{"version":3,"sources":["AnnounceContext.ts"],"sourcesContent":["import * as React from 'react';\n\n/**\n * Defines options for a message to be announced.\n */\nexport type AnnounceOptions = {\n  alert?: boolean;\n\n  /**\n   * A unique identifier for the message. If a message with the same id is already announced, it will be replaced.\n   */\n  batchId?: string;\n\n  /**\n   * Indicates that the message announcement can be interrupted by another message and will be announced only\n   * user is idle.\n   */\n  polite?: boolean;\n\n  /** Defines the priority of the message. Higher priority messages will be announced first. */\n  priority?: number;\n};\n\nexport type AnnounceContextValue = {\n  announce: (message: string, options?: AnnounceOptions) => void;\n};\n\n/**\n * @internal\n */\nconst AnnounceContext = React.createContext<AnnounceContextValue | undefined>(undefined);\n\nexport const AnnounceProvider = AnnounceContext.Provider;\n\n/**\n * Returns a function that can be used to announce messages to screen readers.\n */\nexport function useAnnounce(): AnnounceContextValue {\n  return React.useContext(AnnounceContext) ?? { announce: () => undefined };\n}\n"],"names":["AnnounceProvider","useAnnounce","AnnounceContext","React","createContext","undefined","Provider","useContext","announce"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IAgCaA,gBAAAA;eAAAA;;IAKGC,WAAAA;eAAAA;;;;iEArCO;AA2BvB;;CAEC,GACD,MAAMC,gCAAkBC,OAAMC,aAAa,CAAmCC;AAEvE,MAAML,mBAAmBE,gBAAgBI,QAAQ;AAKjD,SAASL;QACPE;IAAP,OAAOA,CAAAA,oBAAAA,OAAMI,UAAU,CAACL,gBAAAA,MAAAA,QAAjBC,sBAAAA,KAAAA,IAAAA,oBAAqC;QAAEK,UAAU,IAAMH;IAAU;AAC1E"}