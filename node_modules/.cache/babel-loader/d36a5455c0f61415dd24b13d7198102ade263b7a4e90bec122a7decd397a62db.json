{"ast":null,"code":"\"use client\";\n\n// src/use-dropdown.ts\nimport { useProviderContext } from \"@nextui-org/system\";\nimport { useMenuTriggerState } from \"@react-stately/menu\";\nimport { useMenuTrigger } from \"@react-aria/menu\";\nimport { dropdown } from \"@nextui-org/theme\";\nimport { clsx } from \"@nextui-org/shared-utils\";\nimport { mergeRefs } from \"@nextui-org/react-utils\";\nimport { ariaShouldCloseOnInteractOutside } from \"@nextui-org/aria-utils\";\nimport { useMemo, useRef } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\nvar getMenuItem = (props, key) => {\n  if (props) {\n    const mergedChildren = Array.isArray(props.children) ? props.children : [...((props == null ? void 0 : props.items) || [])];\n    if (mergedChildren && mergedChildren.length) {\n      const item = mergedChildren.find(item2 => {\n        if (item2.key === key) {\n          return item2;\n        }\n      }) || {};\n      return item;\n    }\n  }\n  return null;\n};\nvar getCloseOnSelect = (props, key, item) => {\n  const mergedItem = item || getMenuItem(props, key);\n  if (mergedItem && mergedItem.props && \"closeOnSelect\" in mergedItem.props) {\n    return mergedItem.props.closeOnSelect;\n  }\n  return props == null ? void 0 : props.closeOnSelect;\n};\nfunction useDropdown(props) {\n  var _a;\n  const globalContext = useProviderContext();\n  const {\n    as,\n    triggerRef: triggerRefProp,\n    isOpen,\n    defaultOpen,\n    onOpenChange,\n    isDisabled,\n    type = \"menu\",\n    trigger = \"press\",\n    placement = \"bottom\",\n    closeOnSelect = true,\n    shouldBlockScroll = true,\n    classNames: classNamesProp,\n    disableAnimation = (_a = globalContext == null ? void 0 : globalContext.disableAnimation) != null ? _a : false,\n    onClose,\n    className,\n    ...otherProps\n  } = props;\n  const Component = as || \"div\";\n  const triggerRef = useRef(null);\n  const menuTriggerRef = triggerRefProp || triggerRef;\n  const menuRef = useRef(null);\n  const popoverRef = useRef(null);\n  const state = useMenuTriggerState({\n    trigger,\n    isOpen,\n    defaultOpen,\n    onOpenChange: isOpen2 => {\n      onOpenChange == null ? void 0 : onOpenChange(isOpen2);\n      if (!isOpen2) {\n        onClose == null ? void 0 : onClose();\n      }\n    }\n  });\n  const {\n    menuTriggerProps,\n    menuProps\n  } = useMenuTrigger({\n    type,\n    trigger,\n    isDisabled\n  }, state, menuTriggerRef);\n  const classNames = useMemo(() => dropdown({\n    className\n  }), [className]);\n  const onMenuAction = menuCloseOnSelect => {\n    if (menuCloseOnSelect !== void 0 && !menuCloseOnSelect) {\n      return;\n    }\n    if (closeOnSelect) {\n      state.close();\n    }\n  };\n  const getPopoverProps = (props2 = {}) => {\n    const popoverProps = mergeProps(otherProps, props2);\n    return {\n      state,\n      placement,\n      ref: popoverRef,\n      disableAnimation,\n      shouldBlockScroll,\n      scrollRef: menuRef,\n      triggerRef: menuTriggerRef,\n      ...popoverProps,\n      classNames: {\n        ...classNamesProp,\n        ...props2.classNames,\n        content: clsx(classNames, classNamesProp == null ? void 0 : classNamesProp.content, props2.className)\n      },\n      shouldCloseOnInteractOutside: (popoverProps == null ? void 0 : popoverProps.shouldCloseOnInteractOutside) ? popoverProps.shouldCloseOnInteractOutside : element => ariaShouldCloseOnInteractOutside(element, triggerRef, state)\n    };\n  };\n  const getMenuTriggerProps = (originalProps = {}, _ref = null) => {\n    const {\n      onPress,\n      onPressStart,\n      ...otherMenuTriggerProps\n    } = menuTriggerProps;\n    return {\n      ...mergeProps(otherMenuTriggerProps, {\n        isDisabled\n      }, originalProps),\n      ref: mergeRefs(_ref, triggerRef)\n    };\n  };\n  const getMenuProps = (props2, _ref = null) => {\n    return {\n      ref: mergeRefs(_ref, menuRef),\n      menuProps,\n      closeOnSelect,\n      ...mergeProps(props2, {\n        onAction: (key, item) => {\n          const closeOnSelect2 = getCloseOnSelect(props2, key, item);\n          onMenuAction(closeOnSelect2);\n        },\n        onClose: state.close\n      })\n    };\n  };\n  return {\n    Component,\n    menuRef,\n    menuProps,\n    classNames,\n    closeOnSelect,\n    onClose: state.close,\n    autoFocus: state.focusStrategy || true,\n    disableAnimation,\n    getPopoverProps,\n    getMenuProps,\n    getMenuTriggerProps\n  };\n}\nexport { useDropdown };","map":{"version":3,"names":["useProviderContext","useMenuTriggerState","useMenuTrigger","dropdown","clsx","mergeRefs","ariaShouldCloseOnInteractOutside","useMemo","useRef","mergeProps","getMenuItem","props","key","mergedChildren","Array","isArray","children","items","length","item","find","item2","getCloseOnSelect","mergedItem","closeOnSelect","useDropdown","_a","globalContext","as","triggerRef","triggerRefProp","isOpen","defaultOpen","onOpenChange","isDisabled","type","trigger","placement","shouldBlockScroll","classNames","classNamesProp","disableAnimation","onClose","className","otherProps","Component","menuTriggerRef","menuRef","popoverRef","state","isOpen2","menuTriggerProps","menuProps","onMenuAction","menuCloseOnSelect","close","getPopoverProps","props2","popoverProps","ref","scrollRef","content","shouldCloseOnInteractOutside","element","getMenuTriggerProps","originalProps","_ref","onPress","onPressStart","otherMenuTriggerProps","getMenuProps","onAction","closeOnSelect2","autoFocus","focusStrategy"],"sources":["/Users/vedxpatel/cra-template-ved-jp-starter/node_modules/@nextui-org/dropdown/dist/chunk-U5IQOUFU.mjs"],"sourcesContent":["\"use client\";\n\n// src/use-dropdown.ts\nimport { useProviderContext } from \"@nextui-org/system\";\nimport { useMenuTriggerState } from \"@react-stately/menu\";\nimport { useMenuTrigger } from \"@react-aria/menu\";\nimport { dropdown } from \"@nextui-org/theme\";\nimport { clsx } from \"@nextui-org/shared-utils\";\nimport { mergeRefs } from \"@nextui-org/react-utils\";\nimport { ariaShouldCloseOnInteractOutside } from \"@nextui-org/aria-utils\";\nimport { useMemo, useRef } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\nvar getMenuItem = (props, key) => {\n  if (props) {\n    const mergedChildren = Array.isArray(props.children) ? props.children : [...(props == null ? void 0 : props.items) || []];\n    if (mergedChildren && mergedChildren.length) {\n      const item = mergedChildren.find((item2) => {\n        if (item2.key === key) {\n          return item2;\n        }\n      }) || {};\n      return item;\n    }\n  }\n  return null;\n};\nvar getCloseOnSelect = (props, key, item) => {\n  const mergedItem = item || getMenuItem(props, key);\n  if (mergedItem && mergedItem.props && \"closeOnSelect\" in mergedItem.props) {\n    return mergedItem.props.closeOnSelect;\n  }\n  return props == null ? void 0 : props.closeOnSelect;\n};\nfunction useDropdown(props) {\n  var _a;\n  const globalContext = useProviderContext();\n  const {\n    as,\n    triggerRef: triggerRefProp,\n    isOpen,\n    defaultOpen,\n    onOpenChange,\n    isDisabled,\n    type = \"menu\",\n    trigger = \"press\",\n    placement = \"bottom\",\n    closeOnSelect = true,\n    shouldBlockScroll = true,\n    classNames: classNamesProp,\n    disableAnimation = (_a = globalContext == null ? void 0 : globalContext.disableAnimation) != null ? _a : false,\n    onClose,\n    className,\n    ...otherProps\n  } = props;\n  const Component = as || \"div\";\n  const triggerRef = useRef(null);\n  const menuTriggerRef = triggerRefProp || triggerRef;\n  const menuRef = useRef(null);\n  const popoverRef = useRef(null);\n  const state = useMenuTriggerState({\n    trigger,\n    isOpen,\n    defaultOpen,\n    onOpenChange: (isOpen2) => {\n      onOpenChange == null ? void 0 : onOpenChange(isOpen2);\n      if (!isOpen2) {\n        onClose == null ? void 0 : onClose();\n      }\n    }\n  });\n  const { menuTriggerProps, menuProps } = useMenuTrigger(\n    { type, trigger, isDisabled },\n    state,\n    menuTriggerRef\n  );\n  const classNames = useMemo(\n    () => dropdown({\n      className\n    }),\n    [className]\n  );\n  const onMenuAction = (menuCloseOnSelect) => {\n    if (menuCloseOnSelect !== void 0 && !menuCloseOnSelect) {\n      return;\n    }\n    if (closeOnSelect) {\n      state.close();\n    }\n  };\n  const getPopoverProps = (props2 = {}) => {\n    const popoverProps = mergeProps(otherProps, props2);\n    return {\n      state,\n      placement,\n      ref: popoverRef,\n      disableAnimation,\n      shouldBlockScroll,\n      scrollRef: menuRef,\n      triggerRef: menuTriggerRef,\n      ...popoverProps,\n      classNames: {\n        ...classNamesProp,\n        ...props2.classNames,\n        content: clsx(classNames, classNamesProp == null ? void 0 : classNamesProp.content, props2.className)\n      },\n      shouldCloseOnInteractOutside: (popoverProps == null ? void 0 : popoverProps.shouldCloseOnInteractOutside) ? popoverProps.shouldCloseOnInteractOutside : (element) => ariaShouldCloseOnInteractOutside(element, triggerRef, state)\n    };\n  };\n  const getMenuTriggerProps = (originalProps = {}, _ref = null) => {\n    const { onPress, onPressStart, ...otherMenuTriggerProps } = menuTriggerProps;\n    return {\n      ...mergeProps(otherMenuTriggerProps, { isDisabled }, originalProps),\n      ref: mergeRefs(_ref, triggerRef)\n    };\n  };\n  const getMenuProps = (props2, _ref = null) => {\n    return {\n      ref: mergeRefs(_ref, menuRef),\n      menuProps,\n      closeOnSelect,\n      ...mergeProps(props2, {\n        onAction: (key, item) => {\n          const closeOnSelect2 = getCloseOnSelect(props2, key, item);\n          onMenuAction(closeOnSelect2);\n        },\n        onClose: state.close\n      })\n    };\n  };\n  return {\n    Component,\n    menuRef,\n    menuProps,\n    classNames,\n    closeOnSelect,\n    onClose: state.close,\n    autoFocus: state.focusStrategy || true,\n    disableAnimation,\n    getPopoverProps,\n    getMenuProps,\n    getMenuTriggerProps\n  };\n}\n\nexport {\n  useDropdown\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}