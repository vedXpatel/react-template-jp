{"ast":null,"code":"import $fzaAv$react from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nclass $eb2240fc39a57fa5$export$bf788dd355e3a401 {\n  build(props, context) {\n    this.context = context;\n    return $eb2240fc39a57fa5$var$iterable(() => this.iterateCollection(props));\n  }\n  *iterateCollection(props) {\n    let {\n      children: children,\n      items: items\n    } = props;\n    if ((0, $fzaAv$react).isValidElement(children) && children.type === (0, $fzaAv$react).Fragment) yield* this.iterateCollection({\n      children: children.props.children,\n      items: items\n    });else if (typeof children === 'function') {\n      if (!items) throw new Error('props.children was a function but props.items is missing');\n      for (let item of props.items) yield* this.getFullNode({\n        value: item\n      }, {\n        renderer: children\n      });\n    } else {\n      let items = [];\n      (0, $fzaAv$react).Children.forEach(children, child => {\n        items.push(child);\n      });\n      let index = 0;\n      for (let item of items) {\n        let nodes = this.getFullNode({\n          element: item,\n          index: index\n        }, {});\n        for (let node of nodes) {\n          index++;\n          yield node;\n        }\n      }\n    }\n  }\n  getKey(item, partialNode, state, parentKey) {\n    if (item.key != null) return item.key;\n    if (partialNode.type === 'cell' && partialNode.key != null) return `${parentKey}${partialNode.key}`;\n    let v = partialNode.value;\n    if (v != null) {\n      var _v_key;\n      let key = (_v_key = v.key) !== null && _v_key !== void 0 ? _v_key : v.id;\n      if (key == null) throw new Error('No key found for item');\n      return key;\n    }\n    return parentKey ? `${parentKey}.${partialNode.index}` : `$.${partialNode.index}`;\n  }\n  getChildState(state, partialNode) {\n    return {\n      renderer: partialNode.renderer || state.renderer\n    };\n  }\n  *getFullNode(partialNode, state, parentKey, parentNode) {\n    if ((0, $fzaAv$react).isValidElement(partialNode.element) && partialNode.element.type === (0, $fzaAv$react).Fragment) {\n      let children = [];\n      (0, $fzaAv$react).Children.forEach(partialNode.element.props.children, child => {\n        children.push(child);\n      });\n      let index = partialNode.index;\n      for (const child of children) yield* this.getFullNode({\n        element: child,\n        index: index++\n      }, state, parentKey, parentNode);\n      return;\n    }\n    // If there's a value instead of an element on the node, and a parent renderer function is available,\n    // use it to render an element for the value.\n    let element = partialNode.element;\n    if (!element && partialNode.value && state && state.renderer) {\n      let cached = this.cache.get(partialNode.value);\n      if (cached && (!cached.shouldInvalidate || !cached.shouldInvalidate(this.context))) {\n        cached.index = partialNode.index;\n        cached.parentKey = parentNode ? parentNode.key : null;\n        yield cached;\n        return;\n      }\n      element = state.renderer(partialNode.value);\n    }\n    // If there's an element with a getCollectionNode function on its type, then it's a supported component.\n    // Call this function to get a partial node, and recursively build a full node from there.\n    if ((0, $fzaAv$react).isValidElement(element)) {\n      let type = element.type;\n      if (typeof type !== 'function' && typeof type.getCollectionNode !== 'function') {\n        let name = typeof element.type === 'function' ? element.type.name : element.type;\n        throw new Error(`Unknown element <${name}> in collection.`);\n      }\n      let childNodes = type.getCollectionNode(element.props, this.context);\n      let index = partialNode.index;\n      let result = childNodes.next();\n      while (!result.done && result.value) {\n        let childNode = result.value;\n        partialNode.index = index;\n        let nodeKey = childNode.key;\n        if (!nodeKey) nodeKey = childNode.element ? null : this.getKey(element, partialNode, state, parentKey);\n        let nodes = this.getFullNode({\n          ...childNode,\n          key: nodeKey,\n          index: index,\n          wrapper: $eb2240fc39a57fa5$var$compose(partialNode.wrapper, childNode.wrapper)\n        }, this.getChildState(state, childNode), parentKey ? `${parentKey}${element.key}` : element.key, parentNode);\n        let children = [...nodes];\n        for (let node of children) {\n          // Cache the node based on its value\n          node.value = childNode.value || partialNode.value;\n          if (node.value) this.cache.set(node.value, node);\n          // The partial node may have specified a type for the child in order to specify a constraint.\n          // Verify that the full node that was built recursively matches this type.\n          if (partialNode.type && node.type !== partialNode.type) throw new Error(`Unsupported type <${$eb2240fc39a57fa5$var$capitalize(node.type)}> in <${$eb2240fc39a57fa5$var$capitalize(parentNode.type)}>. Only <${$eb2240fc39a57fa5$var$capitalize(partialNode.type)}> is supported.`);\n          index++;\n          yield node;\n        }\n        result = childNodes.next(children);\n      }\n      return;\n    }\n    // Ignore invalid elements\n    if (partialNode.key == null) return;\n    // Create full node\n    let builder = this;\n    let node = {\n      type: partialNode.type,\n      props: partialNode.props,\n      key: partialNode.key,\n      parentKey: parentNode ? parentNode.key : null,\n      value: partialNode.value,\n      level: parentNode ? parentNode.level + 1 : 0,\n      index: partialNode.index,\n      rendered: partialNode.rendered,\n      textValue: partialNode.textValue,\n      'aria-label': partialNode['aria-label'],\n      wrapper: partialNode.wrapper,\n      shouldInvalidate: partialNode.shouldInvalidate,\n      hasChildNodes: partialNode.hasChildNodes,\n      childNodes: $eb2240fc39a57fa5$var$iterable(function* () {\n        if (!partialNode.hasChildNodes) return;\n        let index = 0;\n        for (let child of partialNode.childNodes()) {\n          // Ensure child keys are globally unique by prepending the parent node's key\n          if (child.key != null)\n            // TODO: Remove this line entirely and enforce that users always provide unique keys.\n            // Currently this line will have issues when a parent has a key `a` and a child with key `bc`\n            // but another parent has key `ab` and its child has a key `c`. The combined keys would result in both\n            // children having a key of `abc`.\n            child.key = `${node.key}${child.key}`;\n          child.index = index;\n          let nodes = builder.getFullNode(child, builder.getChildState(state, child), node.key, node);\n          for (let node of nodes) {\n            index++;\n            yield node;\n          }\n        }\n      })\n    };\n    yield node;\n  }\n  constructor() {\n    this.cache = new WeakMap();\n  }\n}\n// Wraps an iterator function as an iterable object, and caches the results.\nfunction $eb2240fc39a57fa5$var$iterable(iterator) {\n  let cache = [];\n  let iterable = null;\n  return {\n    *[Symbol.iterator]() {\n      for (let item of cache) yield item;\n      if (!iterable) iterable = iterator();\n      for (let item of iterable) {\n        cache.push(item);\n        yield item;\n      }\n    }\n  };\n}\nfunction $eb2240fc39a57fa5$var$compose(outer, inner) {\n  if (outer && inner) return element => outer(inner(element));\n  if (outer) return outer;\n  if (inner) return inner;\n}\nfunction $eb2240fc39a57fa5$var$capitalize(str) {\n  return str[0].toUpperCase() + str.slice(1);\n}\nexport { $eb2240fc39a57fa5$export$bf788dd355e3a401 as CollectionBuilder };","map":{"version":3,"names":["$eb2240fc39a57fa5$export$bf788dd355e3a401","build","props","context","$eb2240fc39a57fa5$var$iterable","iterateCollection","children","items","$fzaAv$react","isValidElement","type","Fragment","Error","item","getFullNode","value","renderer","Children","forEach","child","push","index","nodes","element","node","getKey","partialNode","state","parentKey","key","v","_v_key","id","getChildState","parentNode","cached","cache","get","shouldInvalidate","getCollectionNode","name","childNodes","result","next","done","childNode","nodeKey","wrapper","$eb2240fc39a57fa5$var$compose","set","$eb2240fc39a57fa5$var$capitalize","builder","level","rendered","textValue","hasChildNodes","WeakMap","iterator","iterable","Symbol","outer","inner","str","toUpperCase","slice"],"sources":["/Users/vedxpatel/cra-template-ved-jp-starter/node_modules/@react-stately/collections/dist/packages/@react-stately/collections/src/CollectionBuilder.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBase, CollectionElement, Key, Node} from '@react-types/shared';\nimport {PartialNode} from './types';\nimport React, {ReactElement} from 'react';\n\ninterface CollectionBuilderState {\n  renderer?: (value: any) => ReactElement\n}\n\nexport class CollectionBuilder<T extends object> {\n  private context?: unknown;\n  private cache: WeakMap<T, Node<T>> = new WeakMap();\n\n  build(props: CollectionBase<T>, context?: unknown) {\n    this.context = context;\n    return iterable(() => this.iterateCollection(props));\n  }\n\n  private *iterateCollection(props: CollectionBase<T>): Generator<Node<T>> {\n    let {children, items} = props;\n\n    if (React.isValidElement<{children: CollectionElement<T>}>(children) && children.type === React.Fragment) {\n      yield* this.iterateCollection({\n        children: children.props.children,\n        items\n      });\n    } else if (typeof children === 'function') {\n      if (!items) {\n        throw new Error('props.children was a function but props.items is missing');\n      }\n\n      for (let item of props.items) {\n        yield* this.getFullNode({\n          value: item\n        }, {renderer: children});\n      }\n    } else {\n      let items: CollectionElement<T>[] = [];\n      React.Children.forEach(children, child => {\n        items.push(child);\n      });\n\n      let index = 0;\n      for (let item of items) {\n        let nodes = this.getFullNode({\n          element: item,\n          index: index\n        }, {});\n\n        for (let node of nodes) {\n          index++;\n          yield node;\n        }\n      }\n    }\n  }\n\n  private getKey(item: CollectionElement<T>, partialNode: PartialNode<T>, state: CollectionBuilderState, parentKey?: Key): Key {\n    if (item.key != null) {\n      return item.key;\n    }\n\n    if (partialNode.type === 'cell' && partialNode.key != null) {\n      return `${parentKey}${partialNode.key}`;\n    }\n\n    let v = partialNode.value as any;\n    if (v != null) {\n      let key = v.key ?? v.id;\n      if (key == null) {\n        throw new Error('No key found for item');\n      }\n\n      return key;\n    }\n\n    return parentKey ? `${parentKey}.${partialNode.index}` : `$.${partialNode.index}`;\n  }\n\n  private getChildState(state: CollectionBuilderState, partialNode: PartialNode<T>) {\n    return {\n      renderer: partialNode.renderer || state.renderer\n    };\n  }\n\n  private *getFullNode(partialNode: PartialNode<T>, state: CollectionBuilderState, parentKey?: Key, parentNode?: Node<T>): Generator<Node<T>> {\n    if (React.isValidElement<{children: CollectionElement<T>}>(partialNode.element) && partialNode.element.type === React.Fragment) {\n      let children: CollectionElement<T>[] = [];\n\n      React.Children.forEach(partialNode.element.props.children, child => {\n        children.push(child);\n      });\n\n      let index = partialNode.index;\n\n      for (const child of children) {\n        yield* this.getFullNode({\n          element: child,\n          index: index++\n        }, state, parentKey, parentNode);\n      }\n\n      return;\n    }\n\n    // If there's a value instead of an element on the node, and a parent renderer function is available,\n    // use it to render an element for the value.\n    let element = partialNode.element;\n    if (!element && partialNode.value && state && state.renderer) {\n      let cached = this.cache.get(partialNode.value);\n      if (cached && (!cached.shouldInvalidate || !cached.shouldInvalidate(this.context))) {\n        cached.index = partialNode.index;\n        cached.parentKey = parentNode ? parentNode.key : null;\n        yield cached;\n        return;\n      }\n\n      element = state.renderer(partialNode.value);\n    }\n\n    // If there's an element with a getCollectionNode function on its type, then it's a supported component.\n    // Call this function to get a partial node, and recursively build a full node from there.\n    if (React.isValidElement(element)) {\n      let type = element.type as any;\n      if (typeof type !== 'function' && typeof type.getCollectionNode !== 'function') {\n        let name = typeof element.type === 'function' ? element.type.name : element.type;\n        throw new Error(`Unknown element <${name}> in collection.`);\n      }\n\n      let childNodes = type.getCollectionNode(element.props, this.context) as Generator<PartialNode<T>, void, Node<T>[]>;\n      let index = partialNode.index;\n      let result = childNodes.next();\n      while (!result.done && result.value) {\n        let childNode = result.value;\n\n        partialNode.index = index;\n\n        let nodeKey = childNode.key;\n        if (!nodeKey) {\n          nodeKey = childNode.element ? null : this.getKey(element as CollectionElement<T>, partialNode, state, parentKey);\n        }\n\n        let nodes = this.getFullNode({\n          ...childNode,\n          key: nodeKey,\n          index,\n          wrapper: compose(partialNode.wrapper, childNode.wrapper)\n        }, this.getChildState(state, childNode), parentKey ? `${parentKey}${element.key}` : element.key, parentNode);\n\n        let children = [...nodes];\n        for (let node of children) {\n          // Cache the node based on its value\n          node.value = childNode.value || partialNode.value;\n          if (node.value) {\n            this.cache.set(node.value, node);\n          }\n\n          // The partial node may have specified a type for the child in order to specify a constraint.\n          // Verify that the full node that was built recursively matches this type.\n          if (partialNode.type && node.type !== partialNode.type) {\n            throw new Error(`Unsupported type <${capitalize(node.type)}> in <${capitalize(parentNode.type)}>. Only <${capitalize(partialNode.type)}> is supported.`);\n          }\n\n          index++;\n          yield node;\n        }\n\n        result = childNodes.next(children);\n      }\n\n      return;\n    }\n\n    // Ignore invalid elements\n    if (partialNode.key == null) {\n      return;\n    }\n\n    // Create full node\n    let builder = this;\n    let node: Node<T> = {\n      type: partialNode.type,\n      props: partialNode.props,\n      key: partialNode.key,\n      parentKey: parentNode ? parentNode.key : null,\n      value: partialNode.value,\n      level: parentNode ? parentNode.level + 1 : 0,\n      index: partialNode.index,\n      rendered: partialNode.rendered,\n      textValue: partialNode.textValue,\n      'aria-label': partialNode['aria-label'],\n      wrapper: partialNode.wrapper,\n      shouldInvalidate: partialNode.shouldInvalidate,\n      hasChildNodes: partialNode.hasChildNodes,\n      childNodes: iterable(function *() {\n        if (!partialNode.hasChildNodes) {\n          return;\n        }\n\n        let index = 0;\n        for (let child of partialNode.childNodes()) {\n          // Ensure child keys are globally unique by prepending the parent node's key\n          if (child.key != null) {\n            // TODO: Remove this line entirely and enforce that users always provide unique keys.\n            // Currently this line will have issues when a parent has a key `a` and a child with key `bc`\n            // but another parent has key `ab` and its child has a key `c`. The combined keys would result in both\n            // children having a key of `abc`.\n            child.key = `${node.key}${child.key}`;\n          }\n\n          child.index = index;\n          let nodes = builder.getFullNode(child, builder.getChildState(state, child), node.key, node);\n          for (let node of nodes) {\n            index++;\n            yield node;\n          }\n        }\n      })\n    };\n\n    yield node;\n  }\n}\n\n// Wraps an iterator function as an iterable object, and caches the results.\nfunction iterable<T>(iterator: () => IterableIterator<Node<T>>): Iterable<Node<T>> {\n  let cache = [];\n  let iterable = null;\n  return {\n    *[Symbol.iterator]() {\n      for (let item of cache) {\n        yield item;\n      }\n\n      if (!iterable) {\n        iterable = iterator();\n      }\n\n      for (let item of iterable) {\n        cache.push(item);\n        yield item;\n      }\n    }\n  };\n}\n\ntype Wrapper = (element: ReactElement) => ReactElement;\nfunction compose(outer: Wrapper | void, inner: Wrapper | void): Wrapper {\n  if (outer && inner) {\n    return (element) => outer(inner(element));\n  }\n\n  if (outer) {\n    return outer;\n  }\n\n  if (inner) {\n    return inner;\n  }\n}\n\nfunction capitalize(str: string) {\n  return str[0].toUpperCase() + str.slice(1);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}