{"ast":null,"code":"import { isCtrlKeyPressed as $feb5ffebff200149$export$16792effe837dba3, isNonContiguousSelectionModifier as $feb5ffebff200149$export$d3e3bd3e26688c04 } from \"./utils.mjs\";\nimport { useTypeSelect as $fb3050f43d946246$export$e32c88dfddc6e1d8 } from \"./useTypeSelect.mjs\";\nimport { flushSync as $3H3GQ$flushSync } from \"react-dom\";\nimport { useRef as $3H3GQ$useRef, useEffect as $3H3GQ$useEffect } from \"react\";\nimport { getFocusableTreeWalker as $3H3GQ$getFocusableTreeWalker, focusSafely as $3H3GQ$focusSafely } from \"@react-aria/focus\";\nimport { useRouter as $3H3GQ$useRouter, focusWithoutScrolling as $3H3GQ$focusWithoutScrolling, useEvent as $3H3GQ$useEvent, scrollIntoViewport as $3H3GQ$scrollIntoViewport, scrollIntoView as $3H3GQ$scrollIntoView, mergeProps as $3H3GQ$mergeProps } from \"@react-aria/utils\";\nimport { getInteractionModality as $3H3GQ$getInteractionModality } from \"@react-aria/interactions\";\nimport { useLocale as $3H3GQ$useLocale } from \"@react-aria/i18n\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $ae20dd8cbca75726$export$d6daf82dcd84e87c(options) {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref: ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = manager.selectionBehavior === 'replace',\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus: shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n    isVirtualized: isVirtualized,\n    // If no scrollRef is provided, assume the collection ref is the scrollable region\n    scrollRef = ref,\n    linkBehavior = 'action'\n  } = options;\n  let {\n    direction: direction\n  } = (0, $3H3GQ$useLocale)();\n  let router = (0, $3H3GQ$useRouter)();\n  let onKeyDown = e => {\n    // Prevent option + tab from doing anything since it doesn't move focus to the cells, only buttons/checkboxes\n    if (e.altKey && e.key === 'Tab') e.preventDefault();\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (!ref.current.contains(e.target)) return;\n    const navigateToKey = (key, childFocus) => {\n      if (key != null) {\n        if (manager.isLink(key) && linkBehavior === 'selection' && selectOnFocus && !(0, $feb5ffebff200149$export$d3e3bd3e26688c04)(e)) {\n          // Set focused key and re-render synchronously to bring item into view if needed.\n          (0, $3H3GQ$flushSync)(() => {\n            manager.setFocusedKey(key, childFocus);\n          });\n          let item = scrollRef.current.querySelector(`[data-key=\"${CSS.escape(key.toString())}\"]`);\n          let itemProps = manager.getItemProps(key);\n          router.open(item, e, itemProps.href, itemProps.routerOptions);\n          return;\n        }\n        manager.setFocusedKey(key, childFocus);\n        if (manager.isLink(key) && linkBehavior === 'override') return;\n        if (e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(key);else if (selectOnFocus && !(0, $feb5ffebff200149$export$d3e3bd3e26688c04)(e)) manager.replaceSelection(key);\n      }\n    };\n    switch (e.key) {\n      case 'ArrowDown':\n        if (delegate.getKeyBelow) {\n          var _delegate_getKeyBelow, _delegate_getFirstKey, _delegate_getFirstKey1;\n          let nextKey = manager.focusedKey != null ? (_delegate_getKeyBelow = delegate.getKeyBelow) === null || _delegate_getKeyBelow === void 0 ? void 0 : _delegate_getKeyBelow.call(delegate, manager.focusedKey) : (_delegate_getFirstKey = delegate.getFirstKey) === null || _delegate_getFirstKey === void 0 ? void 0 : _delegate_getFirstKey.call(delegate);\n          if (nextKey == null && shouldFocusWrap) nextKey = (_delegate_getFirstKey1 = delegate.getFirstKey) === null || _delegate_getFirstKey1 === void 0 ? void 0 : _delegate_getFirstKey1.call(delegate, manager.focusedKey);\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey);\n          }\n        }\n        break;\n      case 'ArrowUp':\n        if (delegate.getKeyAbove) {\n          var _delegate_getKeyAbove, _delegate_getLastKey, _delegate_getLastKey1;\n          let nextKey = manager.focusedKey != null ? (_delegate_getKeyAbove = delegate.getKeyAbove) === null || _delegate_getKeyAbove === void 0 ? void 0 : _delegate_getKeyAbove.call(delegate, manager.focusedKey) : (_delegate_getLastKey = delegate.getLastKey) === null || _delegate_getLastKey === void 0 ? void 0 : _delegate_getLastKey.call(delegate);\n          if (nextKey == null && shouldFocusWrap) nextKey = (_delegate_getLastKey1 = delegate.getLastKey) === null || _delegate_getLastKey1 === void 0 ? void 0 : _delegate_getLastKey1.call(delegate, manager.focusedKey);\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey);\n          }\n        }\n        break;\n      case 'ArrowLeft':\n        if (delegate.getKeyLeftOf) {\n          var _delegate_getKeyLeftOf, _delegate_getFirstKey2, _delegate_getLastKey2;\n          let nextKey = (_delegate_getKeyLeftOf = delegate.getKeyLeftOf) === null || _delegate_getKeyLeftOf === void 0 ? void 0 : _delegate_getKeyLeftOf.call(delegate, manager.focusedKey);\n          if (nextKey == null && shouldFocusWrap) nextKey = direction === 'rtl' ? (_delegate_getFirstKey2 = delegate.getFirstKey) === null || _delegate_getFirstKey2 === void 0 ? void 0 : _delegate_getFirstKey2.call(delegate, manager.focusedKey) : (_delegate_getLastKey2 = delegate.getLastKey) === null || _delegate_getLastKey2 === void 0 ? void 0 : _delegate_getLastKey2.call(delegate, manager.focusedKey);\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey, direction === 'rtl' ? 'first' : 'last');\n          }\n        }\n        break;\n      case 'ArrowRight':\n        if (delegate.getKeyRightOf) {\n          var _delegate_getKeyRightOf, _delegate_getLastKey3, _delegate_getFirstKey3;\n          let nextKey = (_delegate_getKeyRightOf = delegate.getKeyRightOf) === null || _delegate_getKeyRightOf === void 0 ? void 0 : _delegate_getKeyRightOf.call(delegate, manager.focusedKey);\n          if (nextKey == null && shouldFocusWrap) nextKey = direction === 'rtl' ? (_delegate_getLastKey3 = delegate.getLastKey) === null || _delegate_getLastKey3 === void 0 ? void 0 : _delegate_getLastKey3.call(delegate, manager.focusedKey) : (_delegate_getFirstKey3 = delegate.getFirstKey) === null || _delegate_getFirstKey3 === void 0 ? void 0 : _delegate_getFirstKey3.call(delegate, manager.focusedKey);\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey, direction === 'rtl' ? 'last' : 'first');\n          }\n        }\n        break;\n      case 'Home':\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(manager.focusedKey, (0, $feb5ffebff200149$export$16792effe837dba3)(e));\n          manager.setFocusedKey(firstKey);\n          if ((0, $feb5ffebff200149$export$16792effe837dba3)(e) && e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(firstKey);else if (selectOnFocus) manager.replaceSelection(firstKey);\n        }\n        break;\n      case 'End':\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(manager.focusedKey, (0, $feb5ffebff200149$export$16792effe837dba3)(e));\n          manager.setFocusedKey(lastKey);\n          if ((0, $feb5ffebff200149$export$16792effe837dba3)(e) && e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(lastKey);else if (selectOnFocus) manager.replaceSelection(lastKey);\n        }\n        break;\n      case 'PageDown':\n        if (delegate.getKeyPageBelow) {\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey);\n          }\n        }\n        break;\n      case 'PageUp':\n        if (delegate.getKeyPageAbove) {\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey);\n          }\n        }\n        break;\n      case 'a':\n        if ((0, $feb5ffebff200149$export$16792effe837dba3)(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case 'Escape':\n        if (!disallowEmptySelection && manager.selectedKeys.size !== 0) {\n          e.stopPropagation();\n          e.preventDefault();\n          manager.clearSelection();\n        }\n        break;\n      case 'Tab':\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) ref.current.focus();else {\n            let walker = (0, $3H3GQ$getFocusableTreeWalker)(ref.current, {\n              tabbable: true\n            });\n            let next;\n            let last;\n            do {\n              last = walker.lastChild();\n              if (last) next = last;\n            } while (last);\n            if (next && !next.contains(document.activeElement)) (0, $3H3GQ$focusWithoutScrolling)(next);\n          }\n          break;\n        }\n    }\n  };\n  // Store the scroll position so we can restore it later.\n  /// TODO: should this happen all the time??\n  let scrollPos = (0, $3H3GQ$useRef)({\n    top: 0,\n    left: 0\n  });\n  (0, $3H3GQ$useEvent)(scrollRef, 'scroll', isVirtualized ? null : () => {\n    scrollPos.current = {\n      top: scrollRef.current.scrollTop,\n      left: scrollRef.current.scrollLeft\n    };\n  });\n  let onFocus = e => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) manager.setFocused(false);\n      return;\n    }\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) return;\n    manager.setFocused(true);\n    if (manager.focusedKey == null) {\n      let navigateToFirstKey = key => {\n        if (key != null) {\n          manager.setFocusedKey(key);\n          if (selectOnFocus) manager.replaceSelection(key);\n        }\n      };\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget;\n      var _manager_lastSelectedKey, _manager_firstSelectedKey;\n      if (relatedTarget && e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING) navigateToFirstKey((_manager_lastSelectedKey = manager.lastSelectedKey) !== null && _manager_lastSelectedKey !== void 0 ? _manager_lastSelectedKey : delegate.getLastKey());else navigateToFirstKey((_manager_firstSelectedKey = manager.firstSelectedKey) !== null && _manager_firstSelectedKey !== void 0 ? _manager_firstSelectedKey : delegate.getFirstKey());\n    } else if (!isVirtualized) {\n      // Restore the scroll position to what it was before.\n      scrollRef.current.scrollTop = scrollPos.current.top;\n      scrollRef.current.scrollLeft = scrollPos.current.left;\n    }\n    if (manager.focusedKey != null) {\n      // Refocus and scroll the focused item into view if it exists within the scrollable region.\n      let element = scrollRef.current.querySelector(`[data-key=\"${CSS.escape(manager.focusedKey.toString())}\"]`);\n      if (element) {\n        // This prevents a flash of focus on the first/last element in the collection, or the collection itself.\n        if (!element.contains(document.activeElement)) (0, $3H3GQ$focusWithoutScrolling)(element);\n        let modality = (0, $3H3GQ$getInteractionModality)();\n        if (modality === 'keyboard') (0, $3H3GQ$scrollIntoViewport)(element, {\n          containingElement: ref.current\n        });\n      }\n    }\n  };\n  let onBlur = e => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget)) manager.setFocused(false);\n  };\n  const autoFocusRef = (0, $3H3GQ$useRef)(autoFocus);\n  (0, $3H3GQ$useEffect)(() => {\n    if (autoFocusRef.current) {\n      let focusedKey = null;\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === 'first') focusedKey = delegate.getFirstKey();\n      if (autoFocus === 'last') focusedKey = delegate.getLastKey();\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        for (let key of selectedKeys) if (manager.canSelectItem(key)) {\n          focusedKey = key;\n          break;\n        }\n      }\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus) (0, $3H3GQ$focusSafely)(ref.current);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  // Scroll the focused element into view when the focusedKey changes.\n  let lastFocusedKey = (0, $3H3GQ$useRef)(manager.focusedKey);\n  (0, $3H3GQ$useEffect)(() => {\n    if (manager.isFocused && manager.focusedKey != null && (manager.focusedKey !== lastFocusedKey.current || autoFocusRef.current) && (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current)) {\n      let modality = (0, $3H3GQ$getInteractionModality)();\n      let element = ref.current.querySelector(`[data-key=\"${CSS.escape(manager.focusedKey.toString())}\"]`);\n      if (!element)\n        // If item element wasn't found, return early (don't update autoFocusRef and lastFocusedKey).\n        // The collection may initially be empty (e.g. virtualizer), so wait until the element exists.\n        return;\n      if (modality === 'keyboard' || autoFocusRef.current) {\n        (0, $3H3GQ$scrollIntoView)(scrollRef.current, element);\n        // Avoid scroll in iOS VO, since it may cause overlay to close (i.e. RAC submenu)\n        if (modality !== 'virtual') (0, $3H3GQ$scrollIntoViewport)(element, {\n          containingElement: ref.current\n        });\n      }\n    }\n    // If the focused key becomes null (e.g. the last item is deleted), focus the whole collection.\n    if (!shouldUseVirtualFocus && manager.isFocused && manager.focusedKey == null && lastFocusedKey.current != null) (0, $3H3GQ$focusSafely)(ref.current);\n    lastFocusedKey.current = manager.focusedKey;\n    autoFocusRef.current = false;\n  });\n  // Intercept FocusScope restoration since virtualized collections can reuse DOM nodes.\n  (0, $3H3GQ$useEvent)(ref, 'react-aria-focus-scope-restore', e => {\n    e.preventDefault();\n    manager.setFocused(true);\n  });\n  let handlers = {\n    onKeyDown: onKeyDown,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onMouseDown(e) {\n      // Ignore events that bubbled through portals.\n      if (scrollRef.current === e.target)\n        // Prevent focus going to the collection when clicking on the scrollbar.\n        e.preventDefault();\n    }\n  };\n  let {\n    typeSelectProps: typeSelectProps\n  } = (0, $fb3050f43d946246$export$e32c88dfddc6e1d8)({\n    keyboardDelegate: delegate,\n    selectionManager: manager\n  });\n  if (!disallowTypeAhead) handlers = (0, $3H3GQ$mergeProps)(typeSelectProps, handlers);\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex;\n  if (!shouldUseVirtualFocus) tabIndex = manager.focusedKey == null ? 0 : -1;\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex: tabIndex\n    }\n  };\n}\nexport { $ae20dd8cbca75726$export$d6daf82dcd84e87c as useSelectableCollection };","map":{"version":3,"names":["$ae20dd8cbca75726$export$d6daf82dcd84e87c","options","selectionManager","manager","keyboardDelegate","delegate","ref","autoFocus","shouldFocusWrap","disallowEmptySelection","disallowSelectAll","selectOnFocus","selectionBehavior","disallowTypeAhead","shouldUseVirtualFocus","allowsTabNavigation","isVirtualized","scrollRef","linkBehavior","direction","$3H3GQ$useLocale","router","$3H3GQ$useRouter","onKeyDown","e","altKey","key","preventDefault","current","contains","target","navigateToKey","childFocus","isLink","$feb5ffebff200149$export$d3e3bd3e26688c04","$3H3GQ$flushSync","setFocusedKey","item","querySelector","CSS","escape","toString","itemProps","getItemProps","open","href","routerOptions","shiftKey","selectionMode","extendSelection","replaceSelection","getKeyBelow","_delegate_getKeyBelow","_delegate_getFirstKey","_delegate_getFirstKey1","nextKey","focusedKey","call","getFirstKey","getKeyAbove","_delegate_getKeyAbove","_delegate_getLastKey","_delegate_getLastKey1","getLastKey","getKeyLeftOf","_delegate_getKeyLeftOf","_delegate_getFirstKey2","_delegate_getLastKey2","getKeyRightOf","_delegate_getKeyRightOf","_delegate_getLastKey3","_delegate_getFirstKey3","firstKey","$feb5ffebff200149$export$16792effe837dba3","lastKey","getKeyPageBelow","getKeyPageAbove","selectAll","selectedKeys","size","stopPropagation","clearSelection","focus","walker","$3H3GQ$getFocusableTreeWalker","tabbable","next","last","lastChild","document","activeElement","$3H3GQ$focusWithoutScrolling","scrollPos","$3H3GQ$useRef","top","left","$3H3GQ$useEvent","scrollTop","scrollLeft","onFocus","isFocused","currentTarget","setFocused","navigateToFirstKey","relatedTarget","_manager_lastSelectedKey","_manager_firstSelectedKey","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","lastSelectedKey","firstSelectedKey","element","modality","$3H3GQ$getInteractionModality","$3H3GQ$scrollIntoViewport","containingElement","onBlur","autoFocusRef","$3H3GQ$useEffect","canSelectItem","$3H3GQ$focusSafely","lastFocusedKey","$3H3GQ$scrollIntoView","handlers","onMouseDown","typeSelectProps","$fb3050f43d946246$export$e32c88dfddc6e1d8","$3H3GQ$mergeProps","tabIndex","collectionProps"],"sources":["/Users/vedxpatel/cra-template-ved-jp-starter/node_modules/@react-aria/selection/dist/packages/@react-aria/selection/src/useSelectableCollection.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement, FocusStrategy, Key, KeyboardDelegate, RefObject} from '@react-types/shared';\nimport {flushSync} from 'react-dom';\nimport {FocusEvent, KeyboardEvent, useEffect, useRef} from 'react';\nimport {focusSafely, getFocusableTreeWalker} from '@react-aria/focus';\nimport {focusWithoutScrolling, mergeProps, scrollIntoView, scrollIntoViewport, useEvent, useRouter} from '@react-aria/utils';\nimport {getInteractionModality} from '@react-aria/interactions';\nimport {isCtrlKeyPressed, isNonContiguousSelectionModifier} from './utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useLocale} from '@react-aria/i18n';\nimport {useTypeSelect} from './useTypeSelect';\n\nexport interface AriaSelectableCollectionOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * The ref attached to the element representing the collection.\n   */\n  ref: RefObject<HTMLElement | null>,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether the collection allows the user to select all items via keyboard shortcut.\n   * @default false\n   */\n  disallowSelectAll?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean,\n  /**\n   * Whether the collection items are contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * The ref attached to the scrollable body. Used to provide automatic scrolling on item focus for non-virtualized collections.\n   * If not provided, defaults to the collection ref.\n   */\n  scrollRef?: RefObject<HTMLElement | null>,\n  /**\n   * The behavior of links in the collection.\n   * - 'action': link behaves like onAction.\n   * - 'selection': link follows selection interactions (e.g. if URL drives selection).\n   * - 'override': links override all other interactions (link items are not selectable).\n   * @default 'action'\n   */\n  linkBehavior?: 'action' | 'selection' | 'override'\n}\n\nexport interface SelectableCollectionAria {\n  /** Props for the collection element. */\n  collectionProps: DOMAttributes\n}\n\n/**\n * Handles interactions with selectable collections.\n */\nexport function useSelectableCollection(options: AriaSelectableCollectionOptions): SelectableCollectionAria {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = manager.selectionBehavior === 'replace',\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n    isVirtualized,\n    // If no scrollRef is provided, assume the collection ref is the scrollable region\n    scrollRef = ref,\n    linkBehavior = 'action'\n  } = options;\n  let {direction} = useLocale();\n  let router = useRouter();\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Prevent option + tab from doing anything since it doesn't move focus to the cells, only buttons/checkboxes\n    if (e.altKey && e.key === 'Tab') {\n      e.preventDefault();\n    }\n\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (!ref.current.contains(e.target as Element)) {\n      return;\n    }\n\n    const navigateToKey = (key: Key | undefined, childFocus?: FocusStrategy) => {\n      if (key != null) {\n        if (manager.isLink(key) && linkBehavior === 'selection' && selectOnFocus && !isNonContiguousSelectionModifier(e)) {\n          // Set focused key and re-render synchronously to bring item into view if needed.\n          flushSync(() => {\n            manager.setFocusedKey(key, childFocus);\n          });\n\n          let item = scrollRef.current.querySelector(`[data-key=\"${CSS.escape(key.toString())}\"]`);\n          let itemProps = manager.getItemProps(key);\n          router.open(item, e, itemProps.href, itemProps.routerOptions);\n\n          return;\n        }\n\n        manager.setFocusedKey(key, childFocus);\n\n        if (manager.isLink(key) && linkBehavior === 'override') {\n          return;\n        }\n\n        if (e.shiftKey && manager.selectionMode === 'multiple') {\n          manager.extendSelection(key);\n        } else if (selectOnFocus && !isNonContiguousSelectionModifier(e)) {\n          manager.replaceSelection(key);\n        }\n      }\n    };\n\n    switch (e.key) {\n      case 'ArrowDown': {\n        if (delegate.getKeyBelow) {\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyBelow?.(manager.focusedKey)\n              : delegate.getFirstKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getFirstKey?.(manager.focusedKey);\n          }\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey);\n          }\n        }\n        break;\n      }\n      case 'ArrowUp': {\n        if (delegate.getKeyAbove) {\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyAbove?.(manager.focusedKey)\n              : delegate.getLastKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getLastKey?.(manager.focusedKey);\n          }\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey);\n          }\n        }\n        break;\n      }\n      case 'ArrowLeft': {\n        if (delegate.getKeyLeftOf) {\n          let nextKey = delegate.getKeyLeftOf?.(manager.focusedKey);\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = direction === 'rtl' ? delegate.getFirstKey?.(manager.focusedKey) : delegate.getLastKey?.(manager.focusedKey);\n          }\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey, direction === 'rtl' ? 'first' : 'last');\n          }\n        }\n        break;\n      }\n      case 'ArrowRight': {\n        if (delegate.getKeyRightOf) {\n          let nextKey = delegate.getKeyRightOf?.(manager.focusedKey);\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = direction === 'rtl' ? delegate.getLastKey?.(manager.focusedKey) : delegate.getFirstKey?.(manager.focusedKey);\n          }\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey, direction === 'rtl' ? 'last' : 'first');\n          }\n        }\n        break;\n      }\n      case 'Home':\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(firstKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(firstKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(firstKey);\n          }\n        }\n        break;\n      case 'End':\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(lastKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(lastKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(lastKey);\n          }\n        }\n        break;\n      case 'PageDown':\n        if (delegate.getKeyPageBelow) {\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey);\n          }\n        }\n        break;\n      case 'PageUp':\n        if (delegate.getKeyPageAbove) {\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          if (nextKey != null) {\n            e.preventDefault();\n            navigateToKey(nextKey);\n          }\n        }\n        break;\n      case 'a':\n        if (isCtrlKeyPressed(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case 'Escape':\n        if (!disallowEmptySelection && manager.selectedKeys.size !== 0) {\n          e.stopPropagation();\n          e.preventDefault();\n          manager.clearSelection();\n        }\n        break;\n      case 'Tab': {\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) {\n            ref.current.focus();\n          } else {\n            let walker = getFocusableTreeWalker(ref.current, {tabbable: true});\n            let next: FocusableElement;\n            let last: FocusableElement;\n            do {\n              last = walker.lastChild() as FocusableElement;\n              if (last) {\n                next = last;\n              }\n            } while (last);\n\n            if (next && !next.contains(document.activeElement)) {\n              focusWithoutScrolling(next);\n            }\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  // Store the scroll position so we can restore it later.\n  /// TODO: should this happen all the time??\n  let scrollPos = useRef({top: 0, left: 0});\n  useEvent(scrollRef, 'scroll', isVirtualized ? null : () => {\n    scrollPos.current = {\n      top: scrollRef.current.scrollTop,\n      left: scrollRef.current.scrollLeft\n    };\n  });\n\n  let onFocus = (e: FocusEvent) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      let navigateToFirstKey = (key: Key | undefined) => {\n        if (key != null) {\n          manager.setFocusedKey(key);\n          if (selectOnFocus) {\n            manager.replaceSelection(key);\n          }\n        }\n      };\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget as Element;\n      if (relatedTarget && (e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING)) {\n        navigateToFirstKey(manager.lastSelectedKey ?? delegate.getLastKey());\n      } else {\n        navigateToFirstKey(manager.firstSelectedKey ?? delegate.getFirstKey());\n      }\n    } else if (!isVirtualized) {\n      // Restore the scroll position to what it was before.\n      scrollRef.current.scrollTop = scrollPos.current.top;\n      scrollRef.current.scrollLeft = scrollPos.current.left;\n    }\n\n    if (manager.focusedKey != null) {\n      // Refocus and scroll the focused item into view if it exists within the scrollable region.\n      let element = scrollRef.current.querySelector(`[data-key=\"${CSS.escape(manager.focusedKey.toString())}\"]`) as HTMLElement;\n      if (element) {\n        // This prevents a flash of focus on the first/last element in the collection, or the collection itself.\n        if (!element.contains(document.activeElement)) {\n          focusWithoutScrolling(element);\n        }\n\n        let modality = getInteractionModality();\n        if (modality === 'keyboard') {\n          scrollIntoViewport(element, {containingElement: ref.current});\n        }\n      }\n    }\n  };\n\n  let onBlur = (e) => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget as HTMLElement)) {\n      manager.setFocused(false);\n    }\n  };\n\n  const autoFocusRef = useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      let focusedKey = null;\n\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === 'first') {\n        focusedKey = delegate.getFirstKey();\n      } if (autoFocus === 'last') {\n        focusedKey = delegate.getLastKey();\n      }\n\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        for (let key of selectedKeys) {\n          if (manager.canSelectItem(key)) {\n            focusedKey = key;\n            break;\n          }\n        }\n      }\n\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus) {\n        focusSafely(ref.current);\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Scroll the focused element into view when the focusedKey changes.\n  let lastFocusedKey = useRef(manager.focusedKey);\n  useEffect(() => {\n    if (manager.isFocused && manager.focusedKey != null && (manager.focusedKey !== lastFocusedKey.current || autoFocusRef.current) && scrollRef?.current) {\n      let modality = getInteractionModality();\n      let element = ref.current.querySelector(`[data-key=\"${CSS.escape(manager.focusedKey.toString())}\"]`) as HTMLElement;\n      if (!element) {\n        // If item element wasn't found, return early (don't update autoFocusRef and lastFocusedKey).\n        // The collection may initially be empty (e.g. virtualizer), so wait until the element exists.\n        return;\n      }\n\n      if (modality === 'keyboard' || autoFocusRef.current) {\n        scrollIntoView(scrollRef.current, element);\n\n        // Avoid scroll in iOS VO, since it may cause overlay to close (i.e. RAC submenu)\n        if (modality !== 'virtual') {\n          scrollIntoViewport(element, {containingElement: ref.current});\n        }\n      }\n    }\n\n    // If the focused key becomes null (e.g. the last item is deleted), focus the whole collection.\n    if (!shouldUseVirtualFocus && manager.isFocused && manager.focusedKey == null && lastFocusedKey.current != null) {\n      focusSafely(ref.current);\n    }\n\n    lastFocusedKey.current = manager.focusedKey;\n    autoFocusRef.current = false;\n  });\n\n  // Intercept FocusScope restoration since virtualized collections can reuse DOM nodes.\n  useEvent(ref, 'react-aria-focus-scope-restore', e => {\n    e.preventDefault();\n    manager.setFocused(true);\n  });\n\n  let handlers = {\n    onKeyDown,\n    onFocus,\n    onBlur,\n    onMouseDown(e) {\n      // Ignore events that bubbled through portals.\n      if (scrollRef.current === e.target) {\n        // Prevent focus going to the collection when clicking on the scrollbar.\n        e.preventDefault();\n      }\n    }\n  };\n\n  let {typeSelectProps} = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: manager\n  });\n\n  if (!disallowTypeAhead) {\n    handlers = mergeProps(typeSelectProps, handlers);\n  }\n\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex: number;\n  if (!shouldUseVirtualFocus) {\n    tabIndex = manager.focusedKey == null ? 0 : -1;\n  }\n\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}