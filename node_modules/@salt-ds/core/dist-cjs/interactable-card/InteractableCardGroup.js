'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
var makePrefixer = require('../utils/makePrefixer.js');
var useControlled = require('../utils/useControlled.js');
require('../utils/useFloatingUI/useFloatingUI.js');
var useForkRef = require('../utils/useForkRef.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
require('../accordion/AccordionGroup.js');
require('../accordion/AccordionPanel.js');
require('../accordion/Accordion.js');
require('../accordion/AccordionHeader.js');
require('../aria-announcer/AriaAnnouncerContext.js');
require('../avatar/Avatar.js');
require('../badge/Badge.js');
require('../banner/Banner.js');
require('../banner/BannerActions.js');
require('../banner/BannerContent.js');
require('../border-item/BorderItem.js');
require('../border-layout/BorderLayout.js');
require('../breakpoints/BreakpointProvider.js');
require('../button/Button.js');
require('../card/Card.js');
require('../checkbox/Checkbox.js');
require('../checkbox/CheckboxGroup.js');
require('@salt-ds/icons');
require('../combo-box/ComboBox.js');
require('../dialog/Dialog.js');
require('../dialog/DialogHeader.js');
require('../dialog/DialogActions.js');
require('../dialog/DialogContent.js');
require('../dialog/DialogContext.js');
require('../dialog/DialogCloseButton.js');
require('../divider/Divider.js');
require('../drawer/Drawer.js');
require('../drawer/DrawerCloseButton.js');
require('../dropdown/Dropdown.js');
require('../file-drop-zone/FileDropZone.js');
require('../file-drop-zone/FileDropZoneIcon.js');
require('../file-drop-zone/FileDropZoneTrigger.js');
require('../flex-item/FlexItem.js');
require('../flex-layout/FlexLayout.js');
require('../flow-layout/FlowLayout.js');
require('../form-field/FormField.js');
require('../form-field-context/FormFieldContext.js');
require('../status-indicator/StatusIndicator.js');
require('../text/Text.js');
require('../text/Code.js');
require('../text/Display.js');
require('../text/Headings.js');
require('../text/Label.js');
require('../text/TextAction.js');
require('../text/TextNotation.js');
require('../grid-item/GridItem.js');
require('../grid-layout/GridLayout.js');
require('../input/Input.js');
require('./InteractableCard.js');
var InteractableCardGroupContext = require('./InteractableCardGroupContext.js');
require('../link/Link.js');
require('../link-card/LinkCard.js');
require('../list-box/ListBox.js');
require('../list-control/ListControlContext.js');
require('@floating-ui/react');
require('../menu/MenuContext.js');
require('../menu/MenuItem.js');
require('../menu/MenuPanel.js');
require('../menu/MenuPanelContext.js');
require('../menu/MenuTriggerContext.js');
require('../menu/MenuGroup.js');
require('../multiline-input/MultilineInput.js');
require('../navigation-item/NavigationItem.js');
require('../option/Option.js');
require('../option/OptionGroup.js');
require('../overlay/OverlayContext.js');
require('../overlay/OverlayPanel.js');
require('../overlay/OverlayPanelCloseButton.js');
require('../overlay/OverlayPanelContent.js');
require('../pagination/Pagination.js');
require('../pagination/Paginator.js');
require('../pagination/CompactInput.js');
require('../pagination/CompactPaginator.js');
require('../pagination/GoToInput.js');
require('../panel/Panel.js');
require('../parent-child-layout/ParentChildLayout.js');
require('../pill/Pill.js');
require('../progress/CircularProgress/CircularProgress.js');
require('../progress/LinearProgress/LinearProgress.js');
require('../radio-button/RadioButton.js');
require('../radio-button/RadioButtonGroup.js');
require('../scrim/Scrim.js');
require('../segmented-button-group/SegmentedButtonGroup.js');
require('../spinner/Spinner.js');
require('../stack-layout/StackLayout.js');
require('../status-adornment/StatusAdornment.js');
require('../toast/Toast.js');
require('../toast/ToastContent.js');
require('../split-layout/SplitLayout.js');
require('../switch/Switch.js');
require('../tag/Tag.js');
require('../toggle-button/ToggleButton.js');
require('../toggle-button-group/ToggleButtonGroup.js');
require('../toggle-button-group/ToggleButtonGroupContext.js');
require('../tooltip/Tooltip.js');
require('../semantic-icon-provider/SemanticIconProvider.js');
var InteractableCardGroup$1 = require('./InteractableCardGroup.css.js');

const withBaseName = makePrefixer.makePrefixer("saltInteractableCardGroup");
const InteractableCardGroup = React.forwardRef(function InteractableCardGroup2(props, ref) {
  const {
    children,
    className,
    value: valueProp,
    defaultValue,
    disabled,
    onChange,
    onKeyDown,
    multiSelect,
    ...rest
  } = props;
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-interactable-card-group",
    css: InteractableCardGroup$1,
    window: targetWindow
  });
  const groupRef = React.useRef(null);
  const handleRef = useForkRef.useForkRef(ref, groupRef);
  const [value, setValue] = useControlled.useControlled({
    default: defaultValue,
    controlled: valueProp,
    name: "InteractableCardGroup",
    state: "value"
  });
  const [elements, setElements] = React.useState([]);
  React.useEffect(() => {
    var _a, _b;
    const childElements = Array.from(
      (_b = (_a = groupRef.current) == null ? void 0 : _a.querySelectorAll(
        ".saltInteractableCard:not([disabled])"
      )) != null ? _b : []
    );
    setElements(childElements);
  }, [children]);
  const select = React.useCallback(
    (event, newValue) => {
      if (multiSelect) {
        const currentValues = Array.isArray(value) ? value : [];
        const isSelected2 = currentValues.includes(newValue);
        const nextValues = isSelected2 ? currentValues.filter((val) => val !== newValue) : [...currentValues, newValue];
        setValue(nextValues);
        onChange == null ? void 0 : onChange(event, nextValues);
      } else {
        setValue(newValue);
        if (value !== newValue) {
          onChange == null ? void 0 : onChange(event, newValue);
        }
      }
    },
    [onChange, value, multiSelect]
  );
  const isSelected = React.useCallback(
    (cardValue) => multiSelect ? Array.isArray(value) && value.includes(cardValue) : cardValue !== void 0 && value === cardValue,
    [value, multiSelect]
  );
  const isFirstChild = React.useCallback(
    (cardValue) => {
      return elements.findIndex(
        (element) => element.getAttribute("data-value") === cardValue
      ) === 0;
    },
    [elements]
  );
  const contextValue = React.useMemo(
    () => ({
      select,
      isSelected,
      isFirstChild,
      disabled,
      multiSelect,
      value
    }),
    [select, isSelected, disabled, multiSelect, isFirstChild, value]
  );
  const handleKeyDown = (event) => {
    var _a, _b;
    const currentIndex = elements.findIndex(
      (element) => element === document.activeElement
    );
    const nextIndex = (currentIndex + 1) % elements.length;
    const prevIndex = (currentIndex - 1 + elements.length) % elements.length;
    if (event.key === " ") {
      event.preventDefault();
      select(
        event,
        elements[currentIndex].getAttribute(
          "data-value"
        )
      );
    }
    if (!multiSelect) {
      switch (event.key) {
        case "ArrowDown":
        case "ArrowRight":
          select(
            event,
            elements[nextIndex].getAttribute(
              "data-value"
            )
          );
          (_a = elements[nextIndex]) == null ? void 0 : _a.focus();
          break;
        case "ArrowUp":
        case "ArrowLeft":
          select(
            event,
            elements[prevIndex].getAttribute(
              "data-value"
            )
          );
          (_b = elements[prevIndex]) == null ? void 0 : _b.focus();
          break;
      }
    }
    onKeyDown == null ? void 0 : onKeyDown(event);
  };
  return /* @__PURE__ */ jsxRuntime.jsx(InteractableCardGroupContext.InteractableCardGroupContext.Provider, {
    value: contextValue,
    children: /* @__PURE__ */ jsxRuntime.jsx("div", {
      className: clsx.clsx(withBaseName(), className),
      role: multiSelect ? "group" : "radiogroup",
      onKeyDown: handleKeyDown,
      ref: handleRef,
      ...rest,
      children
    })
  });
});

exports.InteractableCardGroup = InteractableCardGroup;
//# sourceMappingURL=InteractableCardGroup.js.map
