'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var styles = require('@salt-ds/styles');
var window$1 = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
var ListControlContext = require('../list-control/ListControlContext.js');
var ListControlState = require('../list-control/ListControlState.js');
var makePrefixer = require('../utils/makePrefixer.js');
require('../utils/useFloatingUI/useFloatingUI.js');
var useForkRef = require('../utils/useForkRef.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
require('../accordion/AccordionGroup.js');
require('../accordion/AccordionPanel.js');
require('../accordion/Accordion.js');
require('../accordion/AccordionHeader.js');
require('../aria-announcer/AriaAnnouncerContext.js');
require('../avatar/Avatar.js');
require('../badge/Badge.js');
require('../banner/Banner.js');
require('../banner/BannerActions.js');
require('../banner/BannerContent.js');
require('../border-item/BorderItem.js');
require('../border-layout/BorderLayout.js');
require('../breakpoints/BreakpointProvider.js');
require('../button/Button.js');
require('../card/Card.js');
require('../checkbox/Checkbox.js');
require('../checkbox/CheckboxGroup.js');
require('@salt-ds/icons');
require('../combo-box/ComboBox.js');
require('../dialog/Dialog.js');
require('../dialog/DialogHeader.js');
require('../dialog/DialogActions.js');
require('../dialog/DialogContent.js');
require('../dialog/DialogContext.js');
require('../dialog/DialogCloseButton.js');
require('../divider/Divider.js');
require('../drawer/Drawer.js');
require('../drawer/DrawerCloseButton.js');
require('../dropdown/Dropdown.js');
require('../file-drop-zone/FileDropZone.js');
require('../file-drop-zone/FileDropZoneIcon.js');
require('../file-drop-zone/FileDropZoneTrigger.js');
require('../flex-item/FlexItem.js');
require('../flex-layout/FlexLayout.js');
require('../flow-layout/FlowLayout.js');
require('../form-field/FormField.js');
require('../form-field-context/FormFieldContext.js');
require('../status-indicator/StatusIndicator.js');
require('../text/Text.js');
require('../text/Code.js');
require('../text/Display.js');
require('../text/Headings.js');
require('../text/Label.js');
require('../text/TextAction.js');
require('../text/TextNotation.js');
require('../grid-item/GridItem.js');
require('../grid-layout/GridLayout.js');
require('../input/Input.js');
require('../interactable-card/InteractableCard.js');
require('../interactable-card/InteractableCardGroup.js');
require('../interactable-card/InteractableCardGroupContext.js');
require('../link/Link.js');
require('../link-card/LinkCard.js');
require('@floating-ui/react');
require('../menu/MenuContext.js');
require('../menu/MenuItem.js');
require('../menu/MenuPanel.js');
require('../menu/MenuPanelContext.js');
require('../menu/MenuTriggerContext.js');
require('../menu/MenuGroup.js');
require('../multiline-input/MultilineInput.js');
require('../navigation-item/NavigationItem.js');
require('../option/Option.js');
require('../option/OptionGroup.js');
require('../overlay/OverlayContext.js');
require('../overlay/OverlayPanel.js');
require('../overlay/OverlayPanelCloseButton.js');
require('../overlay/OverlayPanelContent.js');
require('../pagination/Pagination.js');
require('../pagination/Paginator.js');
require('../pagination/CompactInput.js');
require('../pagination/CompactPaginator.js');
require('../pagination/GoToInput.js');
require('../panel/Panel.js');
require('../parent-child-layout/ParentChildLayout.js');
require('../pill/Pill.js');
require('../progress/CircularProgress/CircularProgress.js');
require('../progress/LinearProgress/LinearProgress.js');
require('../radio-button/RadioButton.js');
require('../radio-button/RadioButtonGroup.js');
require('../scrim/Scrim.js');
require('../segmented-button-group/SegmentedButtonGroup.js');
require('../spinner/Spinner.js');
require('../stack-layout/StackLayout.js');
require('../status-adornment/StatusAdornment.js');
require('../toast/Toast.js');
require('../toast/ToastContent.js');
require('../split-layout/SplitLayout.js');
require('../switch/Switch.js');
require('../tag/Tag.js');
require('../toggle-button/ToggleButton.js');
require('../toggle-button-group/ToggleButtonGroup.js');
require('../toggle-button-group/ToggleButtonGroupContext.js');
require('../tooltip/Tooltip.js');
require('../semantic-icon-provider/SemanticIconProvider.js');
var ListBox$1 = require('./ListBox.css.js');

const withBaseName = makePrefixer.makePrefixer("saltListBox");
const ListBox = React.forwardRef(function ListBox2(props, ref) {
  const {
    bordered,
    className,
    children,
    defaultSelected,
    disabled,
    selected,
    onSelectionChange,
    multiselect,
    valueToString = ListControlState.defaultValueToString,
    onKeyDown,
    onFocus,
    onBlur,
    ...rest
  } = props;
  const targetWindow = window$1.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-list-box",
    css: ListBox$1,
    window: targetWindow
  });
  const listControl = ListControlState.useListControl({
    multiselect,
    defaultSelected,
    selected,
    onSelectionChange,
    valueToString,
    disabled
  });
  const {
    activeState,
    setActive,
    getOptionAtIndex,
    getIndexOfOption,
    getOptionsMatching,
    getOptionFromSearch,
    getFirstOption,
    getLastOption,
    getOptionAfter,
    getOptionBefore,
    getOptionPageAbove,
    getOptionPageBelow,
    selectedState,
    select,
    setFocusVisibleState,
    setFocusedState,
    listRef
  } = listControl;
  const typeaheadString = React.useRef("");
  const typeaheadTimeout = React.useRef();
  const handleTypeahead = (event) => {
    if (typeaheadTimeout.current) {
      clearTimeout(typeaheadTimeout.current);
    }
    typeaheadString.current += event.key;
    typeaheadTimeout.current = window.setTimeout(() => {
      typeaheadString.current = "";
    }, 500);
    let newOption = getOptionFromSearch(typeaheadString.current, activeState);
    if (!newOption) {
      newOption = getOptionFromSearch(typeaheadString.current);
    }
    if (newOption) {
      setActive(newOption);
      setFocusVisibleState(true);
    }
  };
  const handleKeyDown = (event) => {
    var _a, _b;
    onKeyDown == null ? void 0 : onKeyDown(event);
    if (event.key.length === 1 && !event.ctrlKey && !event.metaKey && !event.altKey) {
      event.preventDefault();
      event.stopPropagation();
      handleTypeahead(event);
    }
    const activeOption = activeState != null ? activeState : getFirstOption().data;
    let newActive = null;
    switch (event.key) {
      case "ArrowDown":
        newActive = (_a = getOptionAfter(activeOption)) != null ? _a : getLastOption();
        break;
      case "ArrowUp":
        newActive = (_b = getOptionBefore(activeOption)) != null ? _b : getFirstOption();
        break;
      case "Home":
        newActive = getFirstOption();
        break;
      case "End":
        newActive = getLastOption();
        break;
      case "PageUp":
        newActive = getOptionPageAbove(activeOption);
        break;
      case "PageDown":
        newActive = getOptionPageBelow(activeOption);
        break;
      case "Enter":
      case " ":
        if (Boolean(activeState == null ? void 0 : activeState.disabled) || typeaheadString.current.trim().length > 0 && event.key === " ") {
          event.preventDefault();
          return;
        }
        if (!activeState) {
          return;
        }
        event.preventDefault();
        select(event, activeState);
        break;
    }
    if (newActive && newActive.data.id !== (activeState == null ? void 0 : activeState.id)) {
      event.preventDefault();
      setActive(newActive.data);
      setFocusVisibleState(true);
    }
  };
  const wasMouseDown = React.useRef(false);
  const handleMouseDown = () => {
    wasMouseDown.current = true;
  };
  const handleFocus = (event) => {
    if (wasMouseDown.current) {
      wasMouseDown.current = false;
      return;
    }
    setFocusVisibleState(true);
    wasMouseDown.current = false;
    const activeIndex = activeState ? getIndexOfOption(activeState) : -1;
    let newActive = void 0;
    if (activeIndex > 0) {
      return;
    }
    if (selectedState.length > 0) {
      newActive = getOptionsMatching(
        (option) => option.value === selectedState[0]
      ).pop();
    }
    if (!newActive) {
      newActive = getOptionAtIndex(0);
    }
    setActive(newActive == null ? void 0 : newActive.data);
    setFocusedState(true);
    onFocus == null ? void 0 : onFocus(event);
  };
  const handleBlur = (event) => {
    setFocusedState(false);
    setActive(void 0);
    onBlur == null ? void 0 : onBlur(event);
  };
  const handleListMouseOver = () => {
    setFocusVisibleState(false);
    setActive(void 0);
  };
  const handleRef = useForkRef.useForkRef(listRef, ref);
  return /* @__PURE__ */ jsxRuntime.jsx(ListControlContext.ListControlContext.Provider, {
    value: listControl,
    children: /* @__PURE__ */ jsxRuntime.jsx("div", {
      className: clsx.clsx(
        withBaseName(),
        { [withBaseName("bordered")]: bordered },
        className
      ),
      role: "listbox",
      "aria-activedescendant": activeState == null ? void 0 : activeState.id,
      "aria-disabled": disabled || void 0,
      "aria-multiselectable": multiselect,
      tabIndex: disabled ? -1 : 0,
      onKeyDown: handleKeyDown,
      onBlur: handleBlur,
      onFocus: handleFocus,
      onMouseOver: handleListMouseOver,
      onMouseDown: handleMouseDown,
      ref: handleRef,
      ...rest,
      children
    })
  });
});

exports.ListBox = ListBox;
//# sourceMappingURL=ListBox.js.map
