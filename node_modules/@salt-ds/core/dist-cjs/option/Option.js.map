{"version":3,"file":"Option.js","sources":["../src/option/Option.tsx"],"sourcesContent":["import { useComponentCssInjection } from \"@salt-ds/styles\";\nimport { useWindow } from \"@salt-ds/window\";\nimport { clsx } from \"clsx\";\nimport {\n  type ComponentPropsWithoutRef,\n  type MouseEvent,\n  type ReactNode,\n  forwardRef,\n  useEffect,\n  useMemo,\n  useRef,\n} from \"react\";\nimport { Checkbox } from \"../checkbox\";\nimport {\n  type OptionValue,\n  useListControlContext,\n} from \"../list-control/ListControlContext\";\nimport { makePrefixer, useForkRef, useId } from \"../utils\";\nimport optionCss from \"./Option.css\";\n\nexport interface OptionProps extends ComponentPropsWithoutRef<\"div\"> {\n  /**\n   * If `true`, the option will be disabled.\n   */\n  disabled?: boolean;\n  /**\n   * The value of the option.\n   */\n  value: unknown;\n  /**\n   * The content of the option.\n   */\n  children?: ReactNode;\n}\n\nconst withBaseName = makePrefixer(\"saltOption\");\n\nexport const Option = forwardRef<HTMLDivElement, OptionProps>(\n  function Option(props, ref) {\n    const {\n      className,\n      children,\n      disabled: disabledProp,\n      onClick,\n      id: idProp,\n      value,\n      ...rest\n    } = props;\n\n    const targetWindow = useWindow();\n    useComponentCssInjection({\n      testId: \"salt-option\",\n      css: optionCss,\n      window: targetWindow,\n    });\n\n    const optionRef = useRef(null);\n    const id = useId(idProp);\n\n    const {\n      setActive,\n      activeState,\n      multiselect,\n      select,\n      register,\n      selectedState,\n      focusVisibleState,\n      valueToString,\n      disabled: listDisabled,\n    } = useListControlContext();\n\n    const disabled = disabledProp || listDisabled;\n\n    const selected = selectedState.includes(value);\n    const active = activeState?.id === id;\n\n    const optionValue: OptionValue<unknown> = useMemo(\n      () => ({\n        id: String(id),\n        disabled: Boolean(disabled),\n        value,\n      }),\n      [id, disabled, value],\n    );\n\n    const handleClick = (event: MouseEvent<HTMLDivElement>) => {\n      if (disabled || id === undefined) {\n        return;\n      }\n\n      // set active descendent\n      setActive(optionValue);\n\n      // handle selection\n      select(event, optionValue);\n\n      onClick?.(event);\n    };\n\n    const handleMouseOver = () => {\n      setActive(optionValue);\n    };\n\n    useEffect(() => {\n      if (id && optionRef.current) {\n        return register(optionValue, optionRef.current);\n      }\n    }, [optionValue, id, register]);\n\n    const handleRef = useForkRef(optionRef, ref);\n\n    return (\n      <div\n        aria-disabled={disabled ? \"true\" : undefined}\n        aria-selected={selected}\n        className={clsx(\n          withBaseName(),\n          {\n            [withBaseName(\"active\")]: active,\n            [withBaseName(\"focusVisible\")]: focusVisibleState && active,\n          },\n          className,\n        )}\n        ref={handleRef}\n        role=\"option\"\n        id={id}\n        onClick={handleClick}\n        onMouseOver={handleMouseOver}\n        {...rest}\n      >\n        {multiselect && (\n          <Checkbox\n            checked={selected}\n            aria-hidden=\"true\"\n            inputProps={{ tabIndex: -1 }}\n          />\n        )}\n        {children ?? valueToString(value)}\n      </div>\n    );\n  },\n);\n"],"names":["makePrefixer","forwardRef","Option","useWindow","useComponentCssInjection","optionCss","useRef","useId","useListControlContext","useMemo","useEffect","useForkRef","jsxs","clsx","jsx","Checkbox"],"mappings":"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"}