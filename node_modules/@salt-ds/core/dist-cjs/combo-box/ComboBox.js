'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('@floating-ui/react');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
var Button = require('../button/Button.js');
require('../form-field-context/FormFieldContext.js');
var useFormFieldProps = require('../form-field-context/useFormFieldProps.js');
var ListControlContext = require('../list-control/ListControlContext.js');
var ListControlState = require('../list-control/ListControlState.js');
var OptionList = require('../option/OptionList.js');
var PillInput = require('../pill-input/PillInput.js');
var SemanticIconProvider = require('../semantic-icon-provider/SemanticIconProvider.js');
var makePrefixer = require('../utils/makePrefixer.js');
var useFloatingUI = require('../utils/useFloatingUI/useFloatingUI.js');
var useForkRef = require('../utils/useForkRef.js');
var useId = require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
require('../accordion/AccordionGroup.js');
require('../accordion/AccordionPanel.js');
require('../accordion/Accordion.js');
require('../accordion/AccordionHeader.js');
require('../aria-announcer/AriaAnnouncerContext.js');
require('../avatar/Avatar.js');
require('../badge/Badge.js');
require('../banner/Banner.js');
require('../banner/BannerActions.js');
require('../banner/BannerContent.js');
require('../border-item/BorderItem.js');
require('../border-layout/BorderLayout.js');
require('../breakpoints/BreakpointProvider.js');
require('../card/Card.js');
require('../checkbox/Checkbox.js');
require('../checkbox/CheckboxGroup.js');
require('@salt-ds/icons');
require('../dialog/Dialog.js');
require('../dialog/DialogHeader.js');
require('../dialog/DialogActions.js');
require('../dialog/DialogContent.js');
require('../dialog/DialogContext.js');
require('../dialog/DialogCloseButton.js');
require('../divider/Divider.js');
require('../drawer/Drawer.js');
require('../drawer/DrawerCloseButton.js');
require('../dropdown/Dropdown.js');
require('../file-drop-zone/FileDropZone.js');
require('../file-drop-zone/FileDropZoneIcon.js');
require('../file-drop-zone/FileDropZoneTrigger.js');
require('../flex-item/FlexItem.js');
require('../flex-layout/FlexLayout.js');
require('../flow-layout/FlowLayout.js');
require('../form-field/FormField.js');
require('../status-indicator/StatusIndicator.js');
require('../text/Text.js');
require('../text/Code.js');
require('../text/Display.js');
require('../text/Headings.js');
require('../text/Label.js');
require('../text/TextAction.js');
require('../text/TextNotation.js');
require('../grid-item/GridItem.js');
require('../grid-layout/GridLayout.js');
require('../input/Input.js');
require('../interactable-card/InteractableCard.js');
require('../interactable-card/InteractableCardGroup.js');
require('../interactable-card/InteractableCardGroupContext.js');
require('../link/Link.js');
require('../link-card/LinkCard.js');
require('../list-box/ListBox.js');
require('../menu/MenuContext.js');
require('../menu/MenuItem.js');
require('../menu/MenuPanel.js');
require('../menu/MenuPanelContext.js');
require('../menu/MenuTriggerContext.js');
require('../menu/MenuGroup.js');
require('../multiline-input/MultilineInput.js');
require('../navigation-item/NavigationItem.js');
require('../option/Option.js');
require('../option/OptionGroup.js');
require('../overlay/OverlayContext.js');
require('../overlay/OverlayPanel.js');
require('../overlay/OverlayPanelCloseButton.js');
require('../overlay/OverlayPanelContent.js');
require('../pagination/Pagination.js');
require('../pagination/Paginator.js');
require('../pagination/CompactInput.js');
require('../pagination/CompactPaginator.js');
require('../pagination/GoToInput.js');
require('../panel/Panel.js');
require('../parent-child-layout/ParentChildLayout.js');
require('../pill/Pill.js');
require('../progress/CircularProgress/CircularProgress.js');
require('../progress/LinearProgress/LinearProgress.js');
require('../radio-button/RadioButton.js');
require('../radio-button/RadioButtonGroup.js');
require('../scrim/Scrim.js');
require('../segmented-button-group/SegmentedButtonGroup.js');
require('../spinner/Spinner.js');
require('../stack-layout/StackLayout.js');
require('../status-adornment/StatusAdornment.js');
require('../toast/Toast.js');
require('../toast/ToastContent.js');
require('../split-layout/SplitLayout.js');
require('../switch/Switch.js');
require('../tag/Tag.js');
require('../toggle-button/ToggleButton.js');
require('../toggle-button-group/ToggleButtonGroup.js');
require('../toggle-button-group/ToggleButtonGroupContext.js');
require('../tooltip/Tooltip.js');
var ComboBox$1 = require('./ComboBox.css.js');
var useComboBox = require('./useComboBox.js');

const withBaseName = makePrefixer.makePrefixer("saltComboBox");
const ComboBox = React.forwardRef(function ComboBox2(props, ref) {
  var _a, _b;
  const {
    children,
    className,
    disabled: disabledProp,
    endAdornment,
    readOnly: readOnlyProp,
    multiselect,
    selectOnTab = !multiselect,
    onSelectionChange,
    selected,
    defaultSelected,
    defaultOpen,
    onOpenChange,
    onChange,
    open,
    inputRef: inputRefProp,
    inputProps: inputPropsProp,
    variant = "primary",
    onKeyDown,
    onFocus,
    onBlur,
    value,
    defaultValue,
    valueToString = ListControlState.defaultValueToString,
    truncate,
    bordered = false,
    ...rest
  } = props;
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-combo-box",
    css: ComboBox$1,
    window: targetWindow
  });
  const { CollapseIcon, ExpandIcon } = SemanticIconProvider.useIcon();
  const {
    a11yProps: { "aria-labelledby": formFieldLabelledBy } = {},
    disabled: formFieldDisabled,
    readOnly: formFieldReadOnly
  } = useFormFieldProps.useFormFieldProps();
  const disabled = Boolean(disabledProp) || formFieldDisabled;
  const readOnly = Boolean(readOnlyProp) || formFieldReadOnly;
  const inputRef = React.useRef(null);
  const handleInputRef = useForkRef.useForkRef(inputRef, inputRefProp);
  const listControl = useComboBox.useComboBox({
    open,
    defaultOpen,
    onOpenChange,
    multiselect,
    defaultSelected,
    selected,
    onSelectionChange,
    value,
    defaultValue,
    disabled,
    readOnly,
    valueToString
  });
  const {
    activeState,
    setActive,
    openState,
    setOpen,
    openKey,
    getIndexOfOption,
    getOptionsMatching,
    getFirstOption,
    getLastOption,
    getOptionAfter,
    getOptionBefore,
    getOptionPageAbove,
    getOptionPageBelow,
    selectedState,
    select,
    clear,
    focusVisibleState,
    setFocusVisibleState,
    focusedState,
    setFocusedState,
    listRef,
    valueState,
    setValueState,
    removePill
  } = listControl;
  const handleOpenChange = (newOpen, _event, reason) => {
    var _a2;
    const focusNotBlur = reason === "focus" && newOpen;
    if (reason === "focus") {
      setFocusedState(newOpen);
    }
    if (reason === "focus" && !newOpen) {
      setFocusVisibleState(false);
    }
    if (readOnly || focusNotBlur)
      return;
    setOpen(newOpen);
    if (newOpen) {
      (_a2 = inputRef.current) == null ? void 0 : _a2.focus();
    }
  };
  const hasValidChildren = React.Children.toArray(children).filter(Boolean).length > 0;
  const { x, y, strategy, elements, floating, reference, context } = useFloatingUI.useFloatingUI({
    open: openState && !readOnly && hasValidChildren,
    onOpenChange: handleOpenChange,
    placement: "bottom-start",
    strategy: "fixed",
    middleware: [
      react.offset(1),
      react.size({
        apply({ rects, elements: elements2, availableHeight }) {
          Object.assign(elements2.floating.style, {
            minWidth: `${rects.reference.width}px`,
            maxHeight: `max(calc(${availableHeight}px - var(--salt-spacing-100)), calc((var(--salt-size-base) + var(--salt-spacing-100)) * 5))`
          });
        }
      }),
      react.flip({ fallbackStrategy: "initialPlacement" })
    ]
  });
  const { getReferenceProps, getFloatingProps } = react.useInteractions([
    react.useDismiss(context),
    react.useFocus(context),
    react.useClick(context, { keyboardHandlers: false, toggle: false })
  ]);
  const handleRef = useForkRef.useForkRef(reference, ref);
  const handleButtonClick = (event) => {
    if (!readOnly) {
      event.stopPropagation();
      setFocusVisibleState(false);
      setOpen(!openState, "manual");
    }
  };
  const handleButtonFocus = () => {
    var _a2;
    (_a2 = inputRef.current) == null ? void 0 : _a2.focus();
  };
  const handleKeyDown = (event) => {
    var _a2, _b2, _c;
    onKeyDown == null ? void 0 : onKeyDown(event);
    if (readOnly) {
      return;
    }
    if (!openState) {
      if (event.key === "ArrowDown" || event.key === "ArrowUp") {
        setOpen(true, void 0, event.key);
        return;
      }
    }
    const activeOption = activeState != null ? activeState : (_a2 = getFirstOption()) == null ? void 0 : _a2.data;
    let newActive = null;
    switch (event.key) {
      case "ArrowDown":
        newActive = (_b2 = getOptionAfter(activeOption)) != null ? _b2 : getLastOption();
        break;
      case "ArrowUp":
        newActive = (_c = getOptionBefore(activeOption)) != null ? _c : getFirstOption();
        break;
      case "Home":
        newActive = getFirstOption();
        break;
      case "End":
        newActive = getLastOption();
        break;
      case "PageUp":
        newActive = getOptionPageAbove(activeOption);
        break;
      case "PageDown":
        newActive = getOptionPageBelow(activeOption);
        break;
      case "Enter":
        if (openState && (activeState == null ? void 0 : activeState.disabled)) {
          event.preventDefault();
          return;
        }
        if (!openState || !activeState) {
          return;
        }
        select(event, activeState);
        if (!multiselect) {
          event.preventDefault();
        }
        break;
      case "Tab":
        if (openState && selectOnTab && activeState && !(activeState == null ? void 0 : activeState.disabled) && !selectedState.includes(activeState == null ? void 0 : activeState.value)) {
          select(event, activeState);
        }
        break;
    }
    if (newActive) {
      setFocusVisibleState(true);
    }
    if (newActive && newActive.data.id !== (activeState == null ? void 0 : activeState.id)) {
      event.preventDefault();
      setActive(newActive.data);
    }
  };
  const handleFocus = (event) => {
    setFocusedState(true);
    onFocus == null ? void 0 : onFocus(event);
  };
  const handleBlur = (event) => {
    event.persist();
    if (!listRef.current || !listRef.current.contains(event.relatedTarget)) {
      onBlur == null ? void 0 : onBlur(event);
    }
  };
  const handleChange = (event) => {
    const value2 = event.target.value;
    if (!openState) {
      setOpen(true, "input");
    }
    if (value2 === "" && !multiselect) {
      clear(event);
    }
    setValueState(value2);
    queueMicrotask(() => {
      if (value2 !== "") {
        const newOption = getFirstOption();
        if (newOption) {
          setActive(newOption.data);
        }
      } else {
        setActive(void 0);
      }
    });
    onChange == null ? void 0 : onChange(event);
  };
  const handlePillRemove = (event, index) => {
    event.stopPropagation();
    const removed = selectedState[index];
    removePill(event, removed);
  };
  const handleListMouseOver = () => {
    setFocusVisibleState(false);
  };
  const handleListMouseLeave = () => {
    setActive(void 0);
  };
  const handleFocusInput = () => {
    var _a2;
    (_a2 = inputRef.current) == null ? void 0 : _a2.focus();
  };
  React.useEffect(() => {
    const activeIndex = activeState ? getIndexOfOption(activeState) : -1;
    let newActive = void 0;
    if (activeIndex > -1) {
      return;
    }
    if (!openState) {
      setActive(void 0);
      return;
    }
    if (selectedState.length > 0) {
      newActive = getOptionsMatching(
        (option) => option.value === selectedState[0]
      ).pop();
    }
    if (!newActive) {
      if (openKey.current === "ArrowDown") {
        newActive = getFirstOption();
        setFocusVisibleState(true);
      } else if (openKey.current === "ArrowUp") {
        newActive = getLastOption();
        setFocusVisibleState(true);
      }
    }
    if (!newActive) {
      newActive = getFirstOption();
    }
    setActive(newActive == null ? void 0 : newActive.data);
  }, [openState, children]);
  const buttonId = useId.useId();
  const listId = useId.useId();
  const handleListRef = useForkRef.useForkRef(listRef, floating);
  return /* @__PURE__ */ jsxRuntime.jsxs(ListControlContext.ListControlContext.Provider, {
    value: listControl,
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(PillInput.PillInput, {
        tabIndex: !disabled ? -1 : void 0,
        className: clsx.clsx(
          withBaseName(),
          {
            [withBaseName("focused")]: focusedState,
            [withBaseName("focusVisible")]: focusVisibleState
          },
          className
        ),
        endAdornment: /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
          children: [
            endAdornment,
            !readOnly && hasValidChildren ? /* @__PURE__ */ jsxRuntime.jsx(Button.Button, {
              "aria-labelledby": clsx.clsx(buttonId, formFieldLabelledBy),
              "aria-label": "Show options",
              "aria-expanded": openState,
              "aria-controls": openState ? listId : void 0,
              "aria-haspopup": "listbox",
              disabled,
              variant: "secondary",
              onClick: handleButtonClick,
              onFocus: handleButtonFocus,
              tabIndex: -1,
              children: openState ? /* @__PURE__ */ jsxRuntime.jsx(CollapseIcon, {
                "aria-hidden": true
              }) : /* @__PURE__ */ jsxRuntime.jsx(ExpandIcon, {
                "aria-hidden": true
              })
            }) : void 0
          ]
        }),
        onChange: handleChange,
        role: "combobox",
        disabled,
        readOnly,
        inputProps: {
          role: "combobox",
          "aria-expanded": openState,
          "aria-controls": openState ? listId : void 0,
          onKeyDown: handleKeyDown,
          ...inputPropsProp
        },
        "aria-activedescendant": activeState == null ? void 0 : activeState.id,
        variant,
        inputRef: handleInputRef,
        value: valueState,
        ref: handleRef,
        bordered,
        ...getReferenceProps({
          onBlur: handleBlur,
          onFocus: handleFocus,
          ...rest
        }),
        pills: multiselect ? selectedState.map((item) => valueToString(item)) : [],
        truncate: truncate && !focusedState && !openState,
        onPillRemove: handlePillRemove,
        hidePillClose: !focusedState || readOnly,
        emptyReadOnlyMarker: readOnly && selectedState.length > 0 ? "" : void 0
      }),
      /* @__PURE__ */ jsxRuntime.jsx(OptionList.OptionList, {
        "aria-multiselectable": multiselect,
        open: (openState || focusedState) && !readOnly && hasValidChildren,
        collapsed: !openState,
        ref: handleListRef,
        id: listId,
        tabIndex: -1,
        ...getFloatingProps({
          onMouseOver: handleListMouseOver,
          onFocus: handleFocusInput,
          onClick: handleFocusInput,
          onMouseLeave: handleListMouseLeave
        }),
        left: x != null ? x : 0,
        top: y != null ? y : 0,
        position: strategy,
        width: (_a = elements.floating) == null ? void 0 : _a.offsetWidth,
        height: (_b = elements.floating) == null ? void 0 : _b.offsetHeight,
        children
      })
    ]
  });
});

exports.ComboBox = ComboBox;
//# sourceMappingURL=ComboBox.js.map
