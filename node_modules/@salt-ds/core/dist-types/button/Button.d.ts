import { type ComponentPropsWithoutRef } from "react";
export declare const ButtonVariantValues: readonly ["primary", "secondary", "cta"];
export declare const ButtonAppearanceValues: readonly ["solid", "bordered", "transparent"];
export declare const ButtonSentimentValues: readonly ["accented", "neutral", "positive", "negative", "caution"];
export declare type ButtonVariant = (typeof ButtonVariantValues)[number];
export declare type ButtonAppearance = (typeof ButtonAppearanceValues)[number];
export declare type ButtonSentiment = (typeof ButtonSentimentValues)[number];
export interface ButtonProps extends ComponentPropsWithoutRef<"button"> {
    /**
     * If `true`, the button will be disabled.
     */
    disabled?: boolean;
    /**
     * If `true`, the button will be focusable when disabled.
     */
    focusableWhenDisabled?: boolean;
    /**
     * The variant to use. Options are 'primary', 'secondary' and 'cta'.
     * 'primary' is the default value.
     *
     * @deprecated Use `appearance` and `sentiment` instead.
     *
     * | variant     | appearance    | sentiment   |
     * | ----------- | ------------- | ----------- |
     * | `cta`       | `solid`       | `accented`  |
     * | `primary`   | `solid`       | `neutral`   |
     * | `secondary` | `transparent` | `neutral`   |
     */
    variant?: ButtonVariant;
    /**
     * The appearance of the button. Options are 'solid', 'bordered', and 'transparent'.
     * 'solid' is the default value.
     *
     * @since 1.36.0.
     */
    appearance?: ButtonAppearance;
    /**
     * The sentiment of the button. Options are 'accented', 'neutral', 'positive', 'negative' and 'caution'.
     * 'neutral' is the default value.
     *
     * @since 1.36.0.
     */
    sentiment?: ButtonSentiment;
}
export declare const Button: import("react").ForwardRefExoticComponent<ButtonProps & import("react").RefAttributes<HTMLButtonElement>>;
