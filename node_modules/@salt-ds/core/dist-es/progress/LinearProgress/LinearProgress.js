import { jsxs, jsx } from 'react/jsx-runtime';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef } from 'react';
import { Text } from '../../text/Text.js';
import '../../text/Code.js';
import '../../text/Display.js';
import '../../text/Headings.js';
import '../../text/Label.js';
import '../../text/TextAction.js';
import '../../text/TextNotation.js';
import { makePrefixer } from '../../utils/makePrefixer.js';
import '../../utils/useFloatingUI/useFloatingUI.js';
import '../../utils/useId.js';
import '../../salt-provider/SaltProvider.js';
import '../../viewport/ViewportProvider.js';
import '../../accordion/AccordionGroup.js';
import '../../accordion/AccordionPanel.js';
import '../../accordion/Accordion.js';
import '../../accordion/AccordionHeader.js';
import '../../aria-announcer/AriaAnnouncerContext.js';
import '../../avatar/Avatar.js';
import '../../badge/Badge.js';
import '../../banner/Banner.js';
import '../../banner/BannerActions.js';
import '../../banner/BannerContent.js';
import '../../border-item/BorderItem.js';
import '../../border-layout/BorderLayout.js';
import '../../breakpoints/BreakpointProvider.js';
import '../../button/Button.js';
import '../../card/Card.js';
import '../../checkbox/Checkbox.js';
import '../../checkbox/CheckboxGroup.js';
import '@salt-ds/icons';
import '../../combo-box/ComboBox.js';
import '../../dialog/Dialog.js';
import '../../dialog/DialogHeader.js';
import '../../dialog/DialogActions.js';
import '../../dialog/DialogContent.js';
import '../../dialog/DialogContext.js';
import '../../dialog/DialogCloseButton.js';
import '../../divider/Divider.js';
import '../../drawer/Drawer.js';
import '../../drawer/DrawerCloseButton.js';
import '../../dropdown/Dropdown.js';
import '../../file-drop-zone/FileDropZone.js';
import '../../file-drop-zone/FileDropZoneIcon.js';
import '../../file-drop-zone/FileDropZoneTrigger.js';
import '../../flex-item/FlexItem.js';
import '../../flex-layout/FlexLayout.js';
import '../../flow-layout/FlowLayout.js';
import '../../form-field/FormField.js';
import '../../form-field-context/FormFieldContext.js';
import '../../status-indicator/StatusIndicator.js';
import '../../grid-item/GridItem.js';
import '../../grid-layout/GridLayout.js';
import '../../input/Input.js';
import '../../interactable-card/InteractableCard.js';
import '../../interactable-card/InteractableCardGroup.js';
import '../../interactable-card/InteractableCardGroupContext.js';
import '../../link/Link.js';
import '../../link-card/LinkCard.js';
import '../../list-box/ListBox.js';
import '../../list-control/ListControlContext.js';
import '@floating-ui/react';
import '../../menu/MenuContext.js';
import '../../menu/MenuItem.js';
import '../../menu/MenuPanel.js';
import '../../menu/MenuPanelContext.js';
import '../../menu/MenuTriggerContext.js';
import '../../menu/MenuGroup.js';
import '../../multiline-input/MultilineInput.js';
import '../../navigation-item/NavigationItem.js';
import '../../option/Option.js';
import '../../option/OptionGroup.js';
import '../../overlay/OverlayContext.js';
import '../../overlay/OverlayPanel.js';
import '../../overlay/OverlayPanelCloseButton.js';
import '../../overlay/OverlayPanelContent.js';
import '../../pagination/Pagination.js';
import '../../pagination/Paginator.js';
import '../../pagination/CompactInput.js';
import '../../pagination/CompactPaginator.js';
import '../../pagination/GoToInput.js';
import '../../panel/Panel.js';
import '../../parent-child-layout/ParentChildLayout.js';
import '../../pill/Pill.js';
import '../CircularProgress/CircularProgress.js';
import '../../radio-button/RadioButton.js';
import '../../radio-button/RadioButtonGroup.js';
import '../../scrim/Scrim.js';
import '../../segmented-button-group/SegmentedButtonGroup.js';
import '../../spinner/Spinner.js';
import '../../stack-layout/StackLayout.js';
import '../../status-adornment/StatusAdornment.js';
import '../../toast/Toast.js';
import '../../toast/ToastContent.js';
import '../../split-layout/SplitLayout.js';
import '../../switch/Switch.js';
import '../../tag/Tag.js';
import '../../toggle-button/ToggleButton.js';
import '../../toggle-button-group/ToggleButtonGroup.js';
import '../../toggle-button-group/ToggleButtonGroupContext.js';
import '../../tooltip/Tooltip.js';
import '../../semantic-icon-provider/SemanticIconProvider.js';
import css_248z from './LinearProgress.css.js';

const withBaseName = makePrefixer("saltLinearProgress");
const LinearProgress = forwardRef(
  function LinearProgress2({
    className,
    hideLabel = false,
    max = 100,
    min = 0,
    value,
    bufferValue,
    ...rest
  }, ref) {
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-linear-progress",
      css: css_248z,
      window: targetWindow
    });
    const isIndeterminate = value === void 0 && bufferValue === void 0;
    const progress = value === void 0 ? 0 : (value - min) / (max - min) * 100;
    const buffer = bufferValue === void 0 ? 0 : (bufferValue - min) / (max - min) * 100;
    const barStyle = {
      width: isIndeterminate ? void 0 : `${progress}%`
    };
    const bufferStyle = {
      width: `${buffer}%`
    };
    return /* @__PURE__ */ jsxs("div", {
      className: clsx(withBaseName(), className),
      ref,
      role: "progressbar",
      "aria-valuemax": max,
      "aria-valuemin": min,
      "aria-valuenow": value === void 0 ? void 0 : Math.round(value),
      ...rest,
      children: [
        /* @__PURE__ */ jsxs("div", {
          className: withBaseName("barContainer"),
          children: [
            /* @__PURE__ */ jsx("div", {
              className: clsx(withBaseName("bar"), {
                [withBaseName("indeterminate")]: isIndeterminate
              }),
              style: barStyle
            }),
            bufferValue && bufferValue > 0 ? /* @__PURE__ */ jsx("div", {
              className: withBaseName("buffer"),
              style: bufferStyle
            }) : null,
            /* @__PURE__ */ jsx("div", {
              className: withBaseName("track")
            })
          ]
        }),
        !hideLabel && /* @__PURE__ */ jsx(Text, {
          styleAs: "h2",
          className: withBaseName("progressLabel"),
          children: isIndeterminate ? "\u2014 %" : `${Math.round(progress)} %`
        })
      ]
    });
  }
);

export { LinearProgress };
//# sourceMappingURL=LinearProgress.js.map
