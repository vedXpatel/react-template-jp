import { jsxs, jsx } from 'react/jsx-runtime';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef, useState, useRef } from 'react';
import '../form-field-context/FormFieldContext.js';
import { useFormFieldProps } from '../form-field-context/useFormFieldProps.js';
import { Pill } from '../pill/Pill.js';
import { useIcon } from '../semantic-icon-provider/SemanticIconProvider.js';
import { StatusAdornment } from '../status-adornment/StatusAdornment.js';
import { makePrefixer } from '../utils/makePrefixer.js';
import { useControlled } from '../utils/useControlled.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import { useForkRef } from '../utils/useForkRef.js';
import { useId } from '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import '../accordion/AccordionGroup.js';
import '../accordion/AccordionPanel.js';
import '../accordion/Accordion.js';
import '../accordion/AccordionHeader.js';
import '../aria-announcer/AriaAnnouncerContext.js';
import '../avatar/Avatar.js';
import '../badge/Badge.js';
import '../banner/Banner.js';
import '../banner/BannerActions.js';
import '../banner/BannerContent.js';
import '../border-item/BorderItem.js';
import '../border-layout/BorderLayout.js';
import '../breakpoints/BreakpointProvider.js';
import '../button/Button.js';
import '../card/Card.js';
import '../checkbox/Checkbox.js';
import '../checkbox/CheckboxGroup.js';
import '@salt-ds/icons';
import '../combo-box/ComboBox.js';
import '../dialog/Dialog.js';
import '../dialog/DialogHeader.js';
import '../dialog/DialogActions.js';
import '../dialog/DialogContent.js';
import '../dialog/DialogContext.js';
import '../dialog/DialogCloseButton.js';
import '../divider/Divider.js';
import '../drawer/Drawer.js';
import '../drawer/DrawerCloseButton.js';
import '../dropdown/Dropdown.js';
import '../file-drop-zone/FileDropZone.js';
import '../file-drop-zone/FileDropZoneIcon.js';
import '../file-drop-zone/FileDropZoneTrigger.js';
import '../flex-item/FlexItem.js';
import '../flex-layout/FlexLayout.js';
import '../flow-layout/FlowLayout.js';
import '../form-field/FormField.js';
import '../status-indicator/StatusIndicator.js';
import '../text/Text.js';
import '../text/Code.js';
import '../text/Display.js';
import '../text/Headings.js';
import '../text/Label.js';
import '../text/TextAction.js';
import '../text/TextNotation.js';
import '../grid-item/GridItem.js';
import '../grid-layout/GridLayout.js';
import '../input/Input.js';
import '../interactable-card/InteractableCard.js';
import '../interactable-card/InteractableCardGroup.js';
import '../interactable-card/InteractableCardGroupContext.js';
import '../link/Link.js';
import '../link-card/LinkCard.js';
import '../list-box/ListBox.js';
import '../list-control/ListControlContext.js';
import '@floating-ui/react';
import '../menu/MenuContext.js';
import '../menu/MenuItem.js';
import '../menu/MenuPanel.js';
import '../menu/MenuPanelContext.js';
import '../menu/MenuTriggerContext.js';
import '../menu/MenuGroup.js';
import '../multiline-input/MultilineInput.js';
import '../navigation-item/NavigationItem.js';
import '../option/Option.js';
import '../option/OptionGroup.js';
import '../overlay/OverlayContext.js';
import '../overlay/OverlayPanel.js';
import '../overlay/OverlayPanelCloseButton.js';
import '../overlay/OverlayPanelContent.js';
import '../pagination/Pagination.js';
import '../pagination/Paginator.js';
import '../pagination/CompactInput.js';
import '../pagination/CompactPaginator.js';
import '../pagination/GoToInput.js';
import '../panel/Panel.js';
import '../parent-child-layout/ParentChildLayout.js';
import '../progress/CircularProgress/CircularProgress.js';
import '../progress/LinearProgress/LinearProgress.js';
import '../radio-button/RadioButton.js';
import '../radio-button/RadioButtonGroup.js';
import '../scrim/Scrim.js';
import '../segmented-button-group/SegmentedButtonGroup.js';
import '../spinner/Spinner.js';
import '../stack-layout/StackLayout.js';
import '../toast/Toast.js';
import '../toast/ToastContent.js';
import '../split-layout/SplitLayout.js';
import '../switch/Switch.js';
import '../tag/Tag.js';
import '../toggle-button/ToggleButton.js';
import '../toggle-button-group/ToggleButtonGroup.js';
import '../toggle-button-group/ToggleButtonGroupContext.js';
import '../tooltip/Tooltip.js';
import { useTruncatePills } from './useTruncatePills.js';
import css_248z from './PillInput.css.js';

const withBaseName = makePrefixer("saltPillInput");
const PillInput = forwardRef(function PillInput2({
  "aria-activedescendant": ariaActiveDescendant,
  "aria-expanded": ariaExpanded,
  "aria-owns": ariaOwns,
  className: classNameProp,
  disabled,
  emptyReadOnlyMarker = "\u2014",
  endAdornment,
  hidePillClose,
  id: idProp,
  inputProps = {},
  inputRef: inputRefProp,
  placeholder,
  pills = [],
  onPillRemove,
  readOnly: readOnlyProp,
  role,
  startAdornment,
  style,
  textAlign = "left",
  value: valueProp,
  defaultValue: defaultValueProp = valueProp === void 0 ? "" : void 0,
  validationStatus: validationStatusProp,
  variant = "primary",
  truncate,
  bordered = false,
  ...other
}, ref) {
  const targetWindow = useWindow();
  const { OverflowIcon, CloseIcon } = useIcon();
  useComponentCssInjection({
    testId: "salt-pill-input",
    css: css_248z,
    window: targetWindow
  });
  const {
    a11yProps: {
      "aria-describedby": formFieldDescribedBy,
      "aria-labelledby": formFieldLabelledBy
    } = {},
    disabled: formFieldDisabled,
    readOnly: formFieldReadOnly,
    necessity: formFieldRequired,
    validationStatus: formFieldValidationStatus
  } = useFormFieldProps();
  const restA11yProps = {
    "aria-activedescendant": ariaActiveDescendant,
    "aria-expanded": ariaExpanded,
    "aria-owns": ariaOwns
  };
  const isDisabled = disabled || formFieldDisabled;
  const isReadOnly = readOnlyProp || formFieldReadOnly;
  const validationStatus = formFieldValidationStatus != null ? formFieldValidationStatus : validationStatusProp;
  const [focused, setFocused] = useState(false);
  const [focusedPillIndex, setFocusedPillIndex] = useState(-1);
  const isEmptyReadOnly = isReadOnly && !defaultValueProp && !valueProp;
  const defaultValue = isEmptyReadOnly ? emptyReadOnlyMarker : defaultValueProp;
  const {
    "aria-describedby": inputDescribedBy,
    "aria-labelledby": inputLabelledBy,
    onBlur,
    onFocus,
    onChange,
    required: inputPropsRequired,
    onKeyDown: inputOnKeyDown,
    ...restInputProps
  } = inputProps;
  const isRequired = formFieldRequired ? ["required", "asterisk"].includes(formFieldRequired) : inputPropsRequired;
  const [value, setValue] = useControlled({
    controlled: valueProp,
    default: defaultValue,
    name: "Input",
    state: "value"
  });
  const { visiblePills, pillListRef } = useTruncatePills({
    pills,
    enable: truncate && pills.length > 0
  });
  const id = useId(idProp);
  const pillListId = `${id}-optionsList`;
  const pillElementsRef = useRef([]);
  const inputRef = useRef(null);
  const handleInputRef = useForkRef(inputRef, inputRefProp);
  const handleChange = (event) => {
    const value2 = event.target.value;
    setValue(value2);
    onChange == null ? void 0 : onChange(event);
  };
  const handleKeyDown = (event) => {
    var _a;
    const target = event.currentTarget;
    if (target.selectionStart === 0 && target.selectionEnd === 0) {
      const lastPillIndex = pills.length - 1;
      const lastPill = pills[lastPillIndex];
      if (event.key === "Backspace" && lastPill) {
        event.preventDefault();
        onPillRemove == null ? void 0 : onPillRemove(event, lastPillIndex);
      } else if (event.key === "ArrowLeft") {
        event.preventDefault();
        (_a = pillElementsRef.current[lastPillIndex]) == null ? void 0 : _a.focus();
      }
    }
    inputOnKeyDown == null ? void 0 : inputOnKeyDown(event);
  };
  const handlePillKeyDown = (event) => {
    var _a, _b, _c, _d, _e, _f;
    const target = event.currentTarget;
    const index = Number(target.dataset.index);
    if (event.key === "ArrowLeft") {
      event.preventDefault();
      (_a = pillElementsRef.current[index - 1]) == null ? void 0 : _a.focus();
    } else if (event.key === "ArrowRight") {
      event.preventDefault();
      if (index === pills.length - 1) {
        (_b = inputRef == null ? void 0 : inputRef.current) == null ? void 0 : _b.focus();
      } else {
        (_c = pillElementsRef.current[index + 1]) == null ? void 0 : _c.focus();
      }
    } else if (event.key === "Delete" || event.key === "Backspace") {
      event.preventDefault();
      onPillRemove == null ? void 0 : onPillRemove(event, index);
      if (pills.length === 1) {
        (_d = inputRef.current) == null ? void 0 : _d.focus();
      } else if (index === pills.length - 1) {
        (_e = pillElementsRef.current[pills.length - 2]) == null ? void 0 : _e.focus();
      } else {
        (_f = pillElementsRef.current[index]) == null ? void 0 : _f.focus();
      }
    }
  };
  const handlePillClick = (event) => {
    var _a;
    const target = event.currentTarget;
    const index = Number(target.dataset.index);
    onPillRemove == null ? void 0 : onPillRemove(event, index);
    (_a = inputRef.current) == null ? void 0 : _a.focus();
  };
  const handleBlur = (event) => {
    onBlur == null ? void 0 : onBlur(event);
    setFocused(false);
  };
  const handleFocus = (event) => {
    onFocus == null ? void 0 : onFocus(event);
    setFocused(true);
  };
  const inputStyle = {
    "--input-textAlign": textAlign,
    ...style
  };
  return /* @__PURE__ */ jsxs("div", {
    className: clsx(
      withBaseName(),
      withBaseName(variant),
      {
        [withBaseName("focused")]: !isDisabled && focused,
        [withBaseName("disabled")]: isDisabled,
        [withBaseName("readOnly")]: isReadOnly,
        [withBaseName("truncate")]: truncate,
        [withBaseName(validationStatus != null ? validationStatus : "")]: validationStatus,
        [withBaseName("bordered")]: bordered
      },
      classNameProp
    ),
    ref,
    style: inputStyle,
    ...other,
    children: [
      startAdornment && /* @__PURE__ */ jsx("div", {
        className: withBaseName("startAdornmentContainer"),
        children: startAdornment
      }),
      /* @__PURE__ */ jsxs("div", {
        className: withBaseName("inputWrapper"),
        ref: pillListRef,
        children: [
          /* @__PURE__ */ jsxs("div", {
            role: "list",
            className: withBaseName("pillList"),
            "aria-labelledby": clsx(formFieldLabelledBy, pillListId),
            "aria-label": "Selected Options",
            id: pillListId,
            children: [
              visiblePills == null ? void 0 : visiblePills.map((pill, index) => /* @__PURE__ */ jsx("div", {
                role: "listitem",
                children: /* @__PURE__ */ jsxs(Pill, {
                  "data-index": index,
                  disabled,
                  ref: (element) => {
                    if (element) {
                      pillElementsRef.current[index] = element;
                    } else {
                      pillElementsRef.current = pillElementsRef.current.filter(
                        (pillEl) => pillEl !== element
                      );
                    }
                  },
                  onFocus: () => setFocusedPillIndex(index),
                  onKeyDown: handlePillKeyDown,
                  onClick: handlePillClick,
                  tabIndex: focusedPillIndex === -1 || focusedPillIndex === index ? 0 : -1,
                  children: [
                    pill,
                    !hidePillClose && /* @__PURE__ */ jsx(CloseIcon, {
                      "aria-label": "click to close"
                    })
                  ]
                })
              }, pill)),
              visiblePills.length < pills.length && /* @__PURE__ */ jsx("div", {
                role: "listitem",
                children: /* @__PURE__ */ jsx("div", {
                  "data-overflowindicator": true,
                  className: withBaseName("overflowIndicator"),
                  children: /* @__PURE__ */ jsx(OverflowIcon, {
                    "aria-hidden": true
                  })
                })
              })
            ]
          }),
          /* @__PURE__ */ jsx("input", {
            "aria-describedby": clsx(formFieldDescribedBy, inputDescribedBy),
            "aria-labelledby": clsx(formFieldLabelledBy, inputLabelledBy),
            className: clsx(withBaseName("input"), inputProps == null ? void 0 : inputProps.className),
            disabled: isDisabled,
            id,
            readOnly: isReadOnly,
            ref: handleInputRef,
            role,
            tabIndex: isDisabled ? -1 : 0,
            onBlur: handleBlur,
            onChange: handleChange,
            onFocus: !isDisabled ? handleFocus : void 0,
            onKeyDown: handleKeyDown,
            placeholder,
            value,
            ...restA11yProps,
            ...restInputProps,
            required: isRequired
          })
        ]
      }),
      !isDisabled && validationStatus && /* @__PURE__ */ jsx("div", {
        className: withBaseName("statusAdornmentContainer"),
        children: /* @__PURE__ */ jsx(StatusAdornment, {
          status: validationStatus
        })
      }),
      endAdornment && /* @__PURE__ */ jsx("div", {
        className: withBaseName("endAdornmentContainer"),
        children: endAdornment
      }),
      /* @__PURE__ */ jsx("div", {
        className: withBaseName("activationIndicator")
      })
    ]
  });
});

export { PillInput };
//# sourceMappingURL=PillInput.js.map
