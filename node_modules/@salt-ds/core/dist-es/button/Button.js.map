{"version":3,"file":"Button.js","sources":["../src/button/Button.tsx"],"sourcesContent":["import { useComponentCssInjection } from \"@salt-ds/styles\";\nimport { useWindow } from \"@salt-ds/window\";\nimport { clsx } from \"clsx\";\nimport {\n  type ComponentPropsWithoutRef,\n  type ReactElement,\n  forwardRef,\n} from \"react\";\nimport { makePrefixer } from \"../utils\";\n\nimport buttonCss from \"./Button.css\";\nimport { useButton } from \"./useButton\";\n\nconst withBaseName = makePrefixer(\"saltButton\");\n\nexport const ButtonVariantValues = [\"primary\", \"secondary\", \"cta\"] as const;\nexport const ButtonAppearanceValues = [\n  \"solid\",\n  \"bordered\",\n  \"transparent\",\n] as const;\nexport const ButtonSentimentValues = [\n  \"accented\",\n  \"neutral\",\n  \"positive\",\n  \"negative\",\n  \"caution\",\n] as const;\nexport type ButtonVariant = (typeof ButtonVariantValues)[number];\nexport type ButtonAppearance = (typeof ButtonAppearanceValues)[number];\nexport type ButtonSentiment = (typeof ButtonSentimentValues)[number];\n\nexport interface ButtonProps extends ComponentPropsWithoutRef<\"button\"> {\n  /**\n   * If `true`, the button will be disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the button will be focusable when disabled.\n   */\n  focusableWhenDisabled?: boolean;\n  /**\n   * The variant to use. Options are 'primary', 'secondary' and 'cta'.\n   * 'primary' is the default value.\n   *\n   * @deprecated Use `appearance` and `sentiment` instead.\n   *\n   * | variant     | appearance    | sentiment   |\n   * | ----------- | ------------- | ----------- |\n   * | `cta`       | `solid`       | `accented`  |\n   * | `primary`   | `solid`       | `neutral`   |\n   * | `secondary` | `transparent` | `neutral`   |\n   */\n  variant?: ButtonVariant;\n  /**\n   * The appearance of the button. Options are 'solid', 'bordered', and 'transparent'.\n   * 'solid' is the default value.\n   *\n   * @since 1.36.0.\n   */\n  appearance?: ButtonAppearance;\n  /**\n   * The sentiment of the button. Options are 'accented', 'neutral', 'positive', 'negative' and 'caution'.\n   * 'neutral' is the default value.\n   *\n   * @since 1.36.0.\n   */\n  sentiment?: ButtonSentiment;\n}\n\nfunction variantToAppearanceAndColor(\n  variant: ButtonVariant,\n): Pick<ButtonProps, \"appearance\" | \"sentiment\"> {\n  switch (variant) {\n    case \"primary\":\n      return { appearance: \"solid\", sentiment: \"neutral\" };\n    case \"secondary\":\n      return { appearance: \"transparent\", sentiment: \"neutral\" };\n    case \"cta\":\n      return { appearance: \"solid\", sentiment: \"accented\" };\n  }\n}\n\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  function Button(\n    {\n      children,\n      className,\n      disabled,\n      focusableWhenDisabled,\n      onKeyUp,\n      onKeyDown,\n      onBlur,\n      onClick,\n      appearance: appearanceProp,\n      sentiment: sentimentProp,\n      type = \"button\",\n      variant = \"primary\",\n      ...restProps\n    },\n    ref?,\n  ): ReactElement<ButtonProps> {\n    const { active, buttonProps } = useButton({\n      disabled,\n      focusableWhenDisabled,\n      onKeyUp,\n      onKeyDown,\n      onBlur,\n      onClick,\n    });\n\n    const targetWindow = useWindow();\n    useComponentCssInjection({\n      testId: \"salt-button\",\n      css: buttonCss,\n      window: targetWindow,\n    });\n\n    const mapped = variantToAppearanceAndColor(variant);\n    const appearance: ButtonAppearance =\n      appearanceProp ?? mapped.appearance ?? \"solid\";\n    const sentiment: ButtonSentiment =\n      sentimentProp ?? mapped.sentiment ?? \"neutral\";\n\n    // we do not want to spread tab index in this case because the button element\n    // does not require tabindex=\"0\" attribute\n    const { tabIndex, ...restButtonProps } = buttonProps;\n    return (\n      <button\n        {...restButtonProps}\n        className={clsx(\n          withBaseName(),\n          withBaseName(variant),\n          {\n            [withBaseName(\"disabled\")]: disabled,\n            [withBaseName(\"active\")]: active,\n            [withBaseName(appearance)]: appearance,\n            [withBaseName(sentiment)]: sentiment,\n          },\n          className,\n        )}\n        {...restProps}\n        ref={ref}\n        type={type}\n      >\n        {children}\n      </button>\n    );\n  },\n);\n"],"names":["Button","buttonCss"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,MAAM,YAAA,GAAe,aAAa,YAAY,CAAA,CAAA;AAEvC,MAAM,mBAAsB,GAAA,CAAC,SAAW,EAAA,WAAA,EAAa,KAAK,EAAA;AAC1D,MAAM,sBAAyB,GAAA;AAAA,EACpC,OAAA;AAAA,EACA,UAAA;AAAA,EACA,aAAA;AACF,EAAA;AACO,MAAM,qBAAwB,GAAA;AAAA,EACnC,UAAA;AAAA,EACA,SAAA;AAAA,EACA,UAAA;AAAA,EACA,UAAA;AAAA,EACA,SAAA;AACF,EAAA;AA2CA,SAAS,4BACP,OAC+C,EAAA;AAC/C,EAAQ,QAAA,OAAA;AAAA,IACD,KAAA,SAAA;AACH,MAAA,OAAO,EAAE,UAAA,EAAY,OAAS,EAAA,SAAA,EAAW,SAAU,EAAA,CAAA;AAAA,IAChD,KAAA,WAAA;AACH,MAAA,OAAO,EAAE,UAAA,EAAY,aAAe,EAAA,SAAA,EAAW,SAAU,EAAA,CAAA;AAAA,IACtD,KAAA,KAAA;AACH,MAAA,OAAO,EAAE,UAAA,EAAY,OAAS,EAAA,SAAA,EAAW,UAAW,EAAA,CAAA;AAAA,GAAA;AAE1D,CAAA;AAEO,MAAM,MAAS,GAAA,UAAA;AAAA,EACpB,SAASA,OACP,CAAA;AAAA,IACE,QAAA;AAAA,IACA,SAAA;AAAA,IACA,QAAA;AAAA,IACA,qBAAA;AAAA,IACA,OAAA;AAAA,IACA,SAAA;AAAA,IACA,MAAA;AAAA,IACA,OAAA;AAAA,IACA,UAAY,EAAA,cAAA;AAAA,IACZ,SAAW,EAAA,aAAA;AAAA,IACX,IAAO,GAAA,QAAA;AAAA,IACP,OAAU,GAAA,SAAA;AAAA,IACP,GAAA,SAAA;AAAA,KAEL,GAC2B,EAAA;AArG/B,IAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAsGI,IAAA,MAAM,EAAE,MAAA,EAAQ,WAAY,EAAA,GAAI,SAAU,CAAA;AAAA,MACxC,QAAA;AAAA,MACA,qBAAA;AAAA,MACA,OAAA;AAAA,MACA,SAAA;AAAA,MACA,MAAA;AAAA,MACA,OAAA;AAAA,KACD,CAAA,CAAA;AAED,IAAA,MAAM,eAAe,SAAU,EAAA,CAAA;AAC/B,IAAyB,wBAAA,CAAA;AAAA,MACvB,MAAQ,EAAA,aAAA;AAAA,MACR,GAAK,EAAAC,QAAA;AAAA,MACL,MAAQ,EAAA,YAAA;AAAA,KACT,CAAA,CAAA;AAED,IAAM,MAAA,MAAA,GAAS,4BAA4B,OAAO,CAAA,CAAA;AAClD,IAAA,MAAM,UACJ,GAAA,CAAA,EAAA,GAAA,cAAA,IAAA,IAAA,GAAA,cAAA,GAAkB,MAAO,CAAA,UAAA,KAAzB,IAAuC,GAAA,EAAA,GAAA,OAAA,CAAA;AACzC,IAAA,MAAM,SACJ,GAAA,CAAA,EAAA,GAAA,aAAA,IAAA,IAAA,GAAA,aAAA,GAAiB,MAAO,CAAA,SAAA,KAAxB,IAAqC,GAAA,EAAA,GAAA,SAAA,CAAA;AAIvC,IAAM,MAAA,EAAE,QAAa,EAAA,GAAA,eAAA,EAAoB,GAAA,WAAA,CAAA;AACzC,IAAA,uBACG,GAAA,CAAA,QAAA,EAAA;AAAA,MACE,GAAG,eAAA;AAAA,MACJ,SAAW,EAAA,IAAA;AAAA,QACT,YAAa,EAAA;AAAA,QACb,aAAa,OAAO,CAAA;AAAA,QACpB;AAAA,UACE,CAAC,YAAa,CAAA,UAAU,CAAI,GAAA,QAAA;AAAA,UAC5B,CAAC,YAAa,CAAA,QAAQ,CAAI,GAAA,MAAA;AAAA,UAC1B,CAAC,YAAa,CAAA,UAAU,CAAI,GAAA,UAAA;AAAA,UAC5B,CAAC,YAAa,CAAA,SAAS,CAAI,GAAA,SAAA;AAAA,SAC7B;AAAA,QACA,SAAA;AAAA,OACF;AAAA,MACC,GAAG,SAAA;AAAA,MACJ,GAAA;AAAA,MACA,IAAA;AAAA,MAEC,QAAA;AAAA,KACH,CAAA,CAAA;AAAA,GAEJ;AACF;;;;"}