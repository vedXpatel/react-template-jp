import { jsx } from 'react/jsx-runtime';
import { useFloatingParentNodeId, useFloatingNodeId, useFloatingTree, offset, flip, shift, limitShift, size, useInteractions, useHover, safePolygon, useClick, useRole, useDismiss, useListNavigation, FloatingNode } from '@floating-ui/react';
import { useRef, useCallback, useState, useEffect } from 'react';
import 'clsx';
import { useControlled } from '../utils/useControlled.js';
import { useFloatingUI } from '../utils/useFloatingUI/useFloatingUI.js';
import '../utils/useId.js';
import { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import '../accordion/AccordionGroup.js';
import '../accordion/AccordionPanel.js';
import '../accordion/Accordion.js';
import '../accordion/AccordionHeader.js';
import '../aria-announcer/AriaAnnouncerContext.js';
import '../avatar/Avatar.js';
import '../badge/Badge.js';
import '../banner/Banner.js';
import '../banner/BannerActions.js';
import '../banner/BannerContent.js';
import '../border-item/BorderItem.js';
import '../border-layout/BorderLayout.js';
import '../breakpoints/BreakpointProvider.js';
import '../button/Button.js';
import '../card/Card.js';
import '../checkbox/Checkbox.js';
import '../checkbox/CheckboxGroup.js';
import '@salt-ds/icons';
import '@salt-ds/styles';
import '@salt-ds/window';
import '../combo-box/ComboBox.js';
import '../dialog/Dialog.js';
import '../dialog/DialogHeader.js';
import '../dialog/DialogActions.js';
import '../dialog/DialogContent.js';
import '../dialog/DialogContext.js';
import '../dialog/DialogCloseButton.js';
import '../divider/Divider.js';
import '../drawer/Drawer.js';
import '../drawer/DrawerCloseButton.js';
import '../dropdown/Dropdown.js';
import '../file-drop-zone/FileDropZone.js';
import '../file-drop-zone/FileDropZoneIcon.js';
import '../file-drop-zone/FileDropZoneTrigger.js';
import '../flex-item/FlexItem.js';
import '../flex-layout/FlexLayout.js';
import '../flow-layout/FlowLayout.js';
import '../form-field/FormField.js';
import '../form-field-context/FormFieldContext.js';
import '../status-indicator/StatusIndicator.js';
import '../text/Text.js';
import '../text/Code.js';
import '../text/Display.js';
import '../text/Headings.js';
import '../text/Label.js';
import '../text/TextAction.js';
import '../text/TextNotation.js';
import '../grid-item/GridItem.js';
import '../grid-layout/GridLayout.js';
import '../input/Input.js';
import '../interactable-card/InteractableCard.js';
import '../interactable-card/InteractableCardGroup.js';
import '../interactable-card/InteractableCardGroupContext.js';
import '../link/Link.js';
import '../link-card/LinkCard.js';
import '../list-box/ListBox.js';
import '../list-control/ListControlContext.js';
import { MenuContext } from './MenuContext.js';
import './MenuItem.js';
import './MenuPanel.js';
import './MenuPanelContext.js';
import './MenuTriggerContext.js';
import './MenuGroup.js';
import '../multiline-input/MultilineInput.js';
import '../navigation-item/NavigationItem.js';
import '../option/Option.js';
import '../option/OptionGroup.js';
import '../overlay/OverlayContext.js';
import '../overlay/OverlayPanel.js';
import '../overlay/OverlayPanelCloseButton.js';
import '../overlay/OverlayPanelContent.js';
import '../pagination/Pagination.js';
import '../pagination/Paginator.js';
import '../pagination/CompactInput.js';
import '../pagination/CompactPaginator.js';
import '../pagination/GoToInput.js';
import '../panel/Panel.js';
import '../parent-child-layout/ParentChildLayout.js';
import '../pill/Pill.js';
import '../progress/CircularProgress/CircularProgress.js';
import '../progress/LinearProgress/LinearProgress.js';
import '../radio-button/RadioButton.js';
import '../radio-button/RadioButtonGroup.js';
import '../scrim/Scrim.js';
import '../segmented-button-group/SegmentedButtonGroup.js';
import '../spinner/Spinner.js';
import '../stack-layout/StackLayout.js';
import '../status-adornment/StatusAdornment.js';
import '../toast/Toast.js';
import '../toast/ToastContent.js';
import '../split-layout/SplitLayout.js';
import '../switch/Switch.js';
import '../tag/Tag.js';
import '../toggle-button/ToggleButton.js';
import '../toggle-button-group/ToggleButtonGroup.js';
import '../toggle-button-group/ToggleButtonGroupContext.js';
import '../tooltip/Tooltip.js';
import '../semantic-icon-provider/SemanticIconProvider.js';

function MenuBase(props) {
  const {
    children,
    defaultOpen,
    open,
    onOpenChange,
    placement,
    getVirtualElement
  } = props;
  const parentId = useFloatingParentNodeId();
  const nodeId = useFloatingNodeId();
  const tree = useFloatingTree();
  const elementsRef = useRef([]);
  const [openState, setOpenState] = useControlled({
    controlled: open,
    default: Boolean(defaultOpen),
    name: "ListControl",
    state: "open"
  });
  const setOpen = useCallback(
    (newOpen) => {
      setOpenState(newOpen);
      onOpenChange == null ? void 0 : onOpenChange(newOpen);
    },
    [onOpenChange]
  );
  const [activeIndex, setActiveIndex] = useState(null);
  const [focusInside, setFocusInside] = useState(false);
  const isNested = parentId != null;
  const { x, y, strategy, elements, refs, context } = useFloatingUI({
    nodeId,
    open: openState,
    onOpenChange: setOpen,
    strategy: !getVirtualElement ? "absolute" : "fixed",
    placement: placement != null ? placement : isNested || getVirtualElement ? "right-start" : "bottom-start",
    middleware: [
      offset(
        isNested ? { crossAxis: -1, mainAxis: 2 } : !getVirtualElement ? 1 : 0
      ),
      flip({}),
      shift({ limiter: limitShift() }),
      size({
        apply({ elements: elements2, availableHeight }) {
          Object.assign(elements2.floating.style, {
            maxHeight: `${availableHeight}px`
          });
        }
      })
    ]
  });
  useIsomorphicLayoutEffect(() => {
    if (getVirtualElement) {
      refs.setPositionReference(getVirtualElement());
    }
  }, [getVirtualElement, refs]);
  const { getReferenceProps, getFloatingProps, getItemProps } = useInteractions(
    [
      useHover(context, {
        enabled: isNested && !focusInside,
        handleClose: safePolygon({ blockPointerEvents: true })
      }),
      useClick(context, {
        event: "mousedown",
        toggle: !isNested,
        ignoreMouse: isNested
      }),
      useRole(context, { role: "menu" }),
      useDismiss(context, { bubbles: true }),
      useListNavigation(context, {
        listRef: elementsRef,
        activeIndex,
        nested: isNested,
        onNavigate: setActiveIndex
      })
    ]
  );
  const getPanelPosition = () => {
    var _a, _b;
    return {
      top: y != null ? y : 0,
      left: x != null ? x : 0,
      position: strategy,
      width: (_a = elements.floating) == null ? void 0 : _a.offsetWidth,
      height: (_b = elements.floating) == null ? void 0 : _b.offsetHeight
    };
  };
  useEffect(() => {
    if (!tree)
      return;
    function handleItemClick() {
      setOpen(false);
    }
    tree.events.on("click", handleItemClick);
    return () => {
      tree.events.off("click", handleItemClick);
    };
  }, [tree, setOpen]);
  return /* @__PURE__ */ jsx(FloatingNode, {
    id: nodeId,
    children: /* @__PURE__ */ jsx(MenuContext.Provider, {
      value: {
        openState,
        getReferenceProps,
        getFloatingProps,
        refs,
        getPanelPosition,
        getItemProps,
        activeIndex,
        context,
        elementsRef,
        focusInside,
        setFocusInside,
        isNested
      },
      children
    })
  });
}

export { MenuBase };
//# sourceMappingURL=MenuBase.js.map
