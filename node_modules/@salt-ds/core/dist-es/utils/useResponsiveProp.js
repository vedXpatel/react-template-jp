import { useBreakpoints } from '../salt-provider/SaltProvider.js';
import { useViewport } from '../viewport/ViewportProvider.js';

const getCurrentBreakpoint = (breakpoints, width) => {
  const breakpointList = Object.entries(breakpoints).sort(
    ([, a], [, b]) => a - b
  );
  const [currentBreakpoint] = breakpointList.reduce(
    (acc, val) => {
      const [, accWidth] = acc;
      const [breakpoint, breakpointWidth] = val;
      if (breakpointWidth < width && breakpointWidth > accWidth) {
        return [breakpoint, breakpointWidth];
      }
      return acc;
    },
    breakpointList[0]
  );
  return currentBreakpoint;
};
const useCurrentBreakpoint = () => {
  const viewport = useViewport();
  const breakpoints = useBreakpoints();
  return getCurrentBreakpoint(breakpoints, viewport);
};
const useOrderedBreakpoints = () => {
  const breakpoints = useBreakpoints();
  return Object.entries(breakpoints).sort(([, a], [, b]) => a - b).map(([key]) => key);
};
const isObject = (value) => {
  const type = typeof value;
  return value !== null && (type === "object" || type === "function");
};
const hasBreakpointValues = (value, breakpoints) => {
  return isObject(value) && Object.keys(value).every((key) => key in breakpoints);
};
const getResponsiveValue = (breakpointValues, breakpoints, viewport, defaultValue) => {
  return Object.entries(breakpointValues).reduce(
    (acc, val) => {
      const [accWidth] = acc;
      const [breakpoint, breakpointValue] = val;
      const breakpointWidth = breakpoints[breakpoint];
      if (breakpointWidth >= accWidth && breakpointWidth <= breakpoints[viewport]) {
        return [breakpointWidth, breakpointValue];
      }
      return acc;
    },
    [0, defaultValue]
  )[1];
};
const useResponsiveProp = (value, defaultValue) => {
  const breakpoints = useBreakpoints();
  const viewport = useViewport();
  if (value === defaultValue)
    return defaultValue;
  const currentViewport = getCurrentBreakpoint(breakpoints, viewport);
  if (hasBreakpointValues(value, breakpoints)) {
    return getResponsiveValue(
      value,
      breakpoints,
      currentViewport,
      defaultValue
    );
  }
  return value;
};
function isBreakpointProp(value) {
  return typeof value === "object" && !Array.isArray(value);
}
function resolveResponsiveValue(value, matchedBreakpoints) {
  if (value && isBreakpointProp(value)) {
    for (const breakpoint of matchedBreakpoints) {
      if (value[breakpoint] != null) {
        return value[breakpoint];
      }
    }
    return void 0;
  }
  return value;
}

export { getCurrentBreakpoint, resolveResponsiveValue, useCurrentBreakpoint, useOrderedBreakpoints, useResponsiveProp };
//# sourceMappingURL=useResponsiveProp.js.map
