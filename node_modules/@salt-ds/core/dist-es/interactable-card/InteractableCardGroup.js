import { jsx } from 'react/jsx-runtime';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef, useRef, useState, useEffect, useCallback, useMemo } from 'react';
import { makePrefixer } from '../utils/makePrefixer.js';
import { useControlled } from '../utils/useControlled.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import { useForkRef } from '../utils/useForkRef.js';
import '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import '../accordion/AccordionGroup.js';
import '../accordion/AccordionPanel.js';
import '../accordion/Accordion.js';
import '../accordion/AccordionHeader.js';
import '../aria-announcer/AriaAnnouncerContext.js';
import '../avatar/Avatar.js';
import '../badge/Badge.js';
import '../banner/Banner.js';
import '../banner/BannerActions.js';
import '../banner/BannerContent.js';
import '../border-item/BorderItem.js';
import '../border-layout/BorderLayout.js';
import '../breakpoints/BreakpointProvider.js';
import '../button/Button.js';
import '../card/Card.js';
import '../checkbox/Checkbox.js';
import '../checkbox/CheckboxGroup.js';
import '@salt-ds/icons';
import '../combo-box/ComboBox.js';
import '../dialog/Dialog.js';
import '../dialog/DialogHeader.js';
import '../dialog/DialogActions.js';
import '../dialog/DialogContent.js';
import '../dialog/DialogContext.js';
import '../dialog/DialogCloseButton.js';
import '../divider/Divider.js';
import '../drawer/Drawer.js';
import '../drawer/DrawerCloseButton.js';
import '../dropdown/Dropdown.js';
import '../file-drop-zone/FileDropZone.js';
import '../file-drop-zone/FileDropZoneIcon.js';
import '../file-drop-zone/FileDropZoneTrigger.js';
import '../flex-item/FlexItem.js';
import '../flex-layout/FlexLayout.js';
import '../flow-layout/FlowLayout.js';
import '../form-field/FormField.js';
import '../form-field-context/FormFieldContext.js';
import '../status-indicator/StatusIndicator.js';
import '../text/Text.js';
import '../text/Code.js';
import '../text/Display.js';
import '../text/Headings.js';
import '../text/Label.js';
import '../text/TextAction.js';
import '../text/TextNotation.js';
import '../grid-item/GridItem.js';
import '../grid-layout/GridLayout.js';
import '../input/Input.js';
import './InteractableCard.js';
import { InteractableCardGroupContext } from './InteractableCardGroupContext.js';
import '../link/Link.js';
import '../link-card/LinkCard.js';
import '../list-box/ListBox.js';
import '../list-control/ListControlContext.js';
import '@floating-ui/react';
import '../menu/MenuContext.js';
import '../menu/MenuItem.js';
import '../menu/MenuPanel.js';
import '../menu/MenuPanelContext.js';
import '../menu/MenuTriggerContext.js';
import '../menu/MenuGroup.js';
import '../multiline-input/MultilineInput.js';
import '../navigation-item/NavigationItem.js';
import '../option/Option.js';
import '../option/OptionGroup.js';
import '../overlay/OverlayContext.js';
import '../overlay/OverlayPanel.js';
import '../overlay/OverlayPanelCloseButton.js';
import '../overlay/OverlayPanelContent.js';
import '../pagination/Pagination.js';
import '../pagination/Paginator.js';
import '../pagination/CompactInput.js';
import '../pagination/CompactPaginator.js';
import '../pagination/GoToInput.js';
import '../panel/Panel.js';
import '../parent-child-layout/ParentChildLayout.js';
import '../pill/Pill.js';
import '../progress/CircularProgress/CircularProgress.js';
import '../progress/LinearProgress/LinearProgress.js';
import '../radio-button/RadioButton.js';
import '../radio-button/RadioButtonGroup.js';
import '../scrim/Scrim.js';
import '../segmented-button-group/SegmentedButtonGroup.js';
import '../spinner/Spinner.js';
import '../stack-layout/StackLayout.js';
import '../status-adornment/StatusAdornment.js';
import '../toast/Toast.js';
import '../toast/ToastContent.js';
import '../split-layout/SplitLayout.js';
import '../switch/Switch.js';
import '../tag/Tag.js';
import '../toggle-button/ToggleButton.js';
import '../toggle-button-group/ToggleButtonGroup.js';
import '../toggle-button-group/ToggleButtonGroupContext.js';
import '../tooltip/Tooltip.js';
import '../semantic-icon-provider/SemanticIconProvider.js';
import css_248z from './InteractableCardGroup.css.js';

const withBaseName = makePrefixer("saltInteractableCardGroup");
const InteractableCardGroup = forwardRef(function InteractableCardGroup2(props, ref) {
  const {
    children,
    className,
    value: valueProp,
    defaultValue,
    disabled,
    onChange,
    onKeyDown,
    multiSelect,
    ...rest
  } = props;
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-interactable-card-group",
    css: css_248z,
    window: targetWindow
  });
  const groupRef = useRef(null);
  const handleRef = useForkRef(ref, groupRef);
  const [value, setValue] = useControlled({
    default: defaultValue,
    controlled: valueProp,
    name: "InteractableCardGroup",
    state: "value"
  });
  const [elements, setElements] = useState([]);
  useEffect(() => {
    var _a, _b;
    const childElements = Array.from(
      (_b = (_a = groupRef.current) == null ? void 0 : _a.querySelectorAll(
        ".saltInteractableCard:not([disabled])"
      )) != null ? _b : []
    );
    setElements(childElements);
  }, [children]);
  const select = useCallback(
    (event, newValue) => {
      if (multiSelect) {
        const currentValues = Array.isArray(value) ? value : [];
        const isSelected2 = currentValues.includes(newValue);
        const nextValues = isSelected2 ? currentValues.filter((val) => val !== newValue) : [...currentValues, newValue];
        setValue(nextValues);
        onChange == null ? void 0 : onChange(event, nextValues);
      } else {
        setValue(newValue);
        if (value !== newValue) {
          onChange == null ? void 0 : onChange(event, newValue);
        }
      }
    },
    [onChange, value, multiSelect]
  );
  const isSelected = useCallback(
    (cardValue) => multiSelect ? Array.isArray(value) && value.includes(cardValue) : cardValue !== void 0 && value === cardValue,
    [value, multiSelect]
  );
  const isFirstChild = useCallback(
    (cardValue) => {
      return elements.findIndex(
        (element) => element.getAttribute("data-value") === cardValue
      ) === 0;
    },
    [elements]
  );
  const contextValue = useMemo(
    () => ({
      select,
      isSelected,
      isFirstChild,
      disabled,
      multiSelect,
      value
    }),
    [select, isSelected, disabled, multiSelect, isFirstChild, value]
  );
  const handleKeyDown = (event) => {
    var _a, _b;
    const currentIndex = elements.findIndex(
      (element) => element === document.activeElement
    );
    const nextIndex = (currentIndex + 1) % elements.length;
    const prevIndex = (currentIndex - 1 + elements.length) % elements.length;
    if (event.key === " ") {
      event.preventDefault();
      select(
        event,
        elements[currentIndex].getAttribute(
          "data-value"
        )
      );
    }
    if (!multiSelect) {
      switch (event.key) {
        case "ArrowDown":
        case "ArrowRight":
          select(
            event,
            elements[nextIndex].getAttribute(
              "data-value"
            )
          );
          (_a = elements[nextIndex]) == null ? void 0 : _a.focus();
          break;
        case "ArrowUp":
        case "ArrowLeft":
          select(
            event,
            elements[prevIndex].getAttribute(
              "data-value"
            )
          );
          (_b = elements[prevIndex]) == null ? void 0 : _b.focus();
          break;
      }
    }
    onKeyDown == null ? void 0 : onKeyDown(event);
  };
  return /* @__PURE__ */ jsx(InteractableCardGroupContext.Provider, {
    value: contextValue,
    children: /* @__PURE__ */ jsx("div", {
      className: clsx(withBaseName(), className),
      role: multiSelect ? "group" : "radiogroup",
      onKeyDown: handleKeyDown,
      ref: handleRef,
      ...rest,
      children
    })
  });
});

export { InteractableCardGroup };
//# sourceMappingURL=InteractableCardGroup.js.map
