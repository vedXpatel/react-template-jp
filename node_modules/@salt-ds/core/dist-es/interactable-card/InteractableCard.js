import { jsx } from 'react/jsx-runtime';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef, useRef } from 'react';
import { capitalize } from '../utils/capitalize.js';
import { makePrefixer } from '../utils/makePrefixer.js';
import { useControlled } from '../utils/useControlled.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import { useForkRef } from '../utils/useForkRef.js';
import '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import '../accordion/AccordionGroup.js';
import '../accordion/AccordionPanel.js';
import '../accordion/Accordion.js';
import '../accordion/AccordionHeader.js';
import '../aria-announcer/AriaAnnouncerContext.js';
import '../avatar/Avatar.js';
import '../badge/Badge.js';
import '../banner/Banner.js';
import '../banner/BannerActions.js';
import '../banner/BannerContent.js';
import '../border-item/BorderItem.js';
import '../border-layout/BorderLayout.js';
import '../breakpoints/BreakpointProvider.js';
import '../button/Button.js';
import '../card/Card.js';
import '../checkbox/Checkbox.js';
import '../checkbox/CheckboxGroup.js';
import '@salt-ds/icons';
import '../combo-box/ComboBox.js';
import '../dialog/Dialog.js';
import '../dialog/DialogHeader.js';
import '../dialog/DialogActions.js';
import '../dialog/DialogContent.js';
import '../dialog/DialogContext.js';
import '../dialog/DialogCloseButton.js';
import '../divider/Divider.js';
import '../drawer/Drawer.js';
import '../drawer/DrawerCloseButton.js';
import '../dropdown/Dropdown.js';
import '../file-drop-zone/FileDropZone.js';
import '../file-drop-zone/FileDropZoneIcon.js';
import '../file-drop-zone/FileDropZoneTrigger.js';
import '../flex-item/FlexItem.js';
import '../flex-layout/FlexLayout.js';
import '../flow-layout/FlowLayout.js';
import '../form-field/FormField.js';
import '../form-field-context/FormFieldContext.js';
import '../status-indicator/StatusIndicator.js';
import '../text/Text.js';
import '../text/Code.js';
import '../text/Display.js';
import '../text/Headings.js';
import '../text/Label.js';
import '../text/TextAction.js';
import '../text/TextNotation.js';
import '../grid-item/GridItem.js';
import '../grid-layout/GridLayout.js';
import '../input/Input.js';
import './InteractableCardGroup.js';
import { useInteractableCardGroup } from './InteractableCardGroupContext.js';
import '../link/Link.js';
import '../link-card/LinkCard.js';
import '../list-box/ListBox.js';
import '../list-control/ListControlContext.js';
import '@floating-ui/react';
import '../menu/MenuContext.js';
import '../menu/MenuItem.js';
import '../menu/MenuPanel.js';
import '../menu/MenuPanelContext.js';
import '../menu/MenuTriggerContext.js';
import '../menu/MenuGroup.js';
import '../multiline-input/MultilineInput.js';
import '../navigation-item/NavigationItem.js';
import '../option/Option.js';
import '../option/OptionGroup.js';
import '../overlay/OverlayContext.js';
import '../overlay/OverlayPanel.js';
import '../overlay/OverlayPanelCloseButton.js';
import '../overlay/OverlayPanelContent.js';
import '../pagination/Pagination.js';
import '../pagination/Paginator.js';
import '../pagination/CompactInput.js';
import '../pagination/CompactPaginator.js';
import '../pagination/GoToInput.js';
import '../panel/Panel.js';
import '../parent-child-layout/ParentChildLayout.js';
import '../pill/Pill.js';
import '../progress/CircularProgress/CircularProgress.js';
import '../progress/LinearProgress/LinearProgress.js';
import '../radio-button/RadioButton.js';
import '../radio-button/RadioButtonGroup.js';
import '../scrim/Scrim.js';
import '../segmented-button-group/SegmentedButtonGroup.js';
import '../spinner/Spinner.js';
import '../stack-layout/StackLayout.js';
import '../status-adornment/StatusAdornment.js';
import '../toast/Toast.js';
import '../toast/ToastContent.js';
import '../split-layout/SplitLayout.js';
import '../switch/Switch.js';
import '../tag/Tag.js';
import '../toggle-button/ToggleButton.js';
import '../toggle-button-group/ToggleButtonGroup.js';
import '../toggle-button-group/ToggleButtonGroupContext.js';
import '../tooltip/Tooltip.js';
import '../semantic-icon-provider/SemanticIconProvider.js';
import css_248z from './InteractableCard.css.js';
import { useInteractableCard } from './useInteractableCard.js';

const withBaseName = makePrefixer("saltInteractableCard");
const InteractableCard = forwardRef(function InteractableCard2(props, ref) {
  const {
    accent,
    accentPlacement,
    children,
    className,
    disabled: disabledProp,
    variant = "primary",
    value,
    onBlur,
    onChange,
    onClick,
    onKeyUp,
    onKeyDown,
    ...rest
  } = props;
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-interactable-card",
    css: css_248z,
    window: targetWindow
  });
  const interactableCardGroup = useInteractableCardGroup();
  const interactableCardGroupSelected = interactableCardGroup == null ? void 0 : interactableCardGroup.isSelected(value);
  const disabled = (interactableCardGroup == null ? void 0 : interactableCardGroup.disabled) || disabledProp;
  const [selected, setSelected] = useControlled({
    controlled: interactableCardGroupSelected,
    default: Boolean(false),
    name: "InteractableCard",
    state: "selected"
  });
  const role = interactableCardGroup ? interactableCardGroup.multiSelect ? "checkbox" : "radio" : "button";
  const isMultiselect = interactableCardGroup == null ? void 0 : interactableCardGroup.multiSelect;
  const isFirstChild = interactableCardGroup == null ? void 0 : interactableCardGroup.isFirstChild(value);
  const ariaChecked = role === "radio" || role === "checkbox" ? selected : void 0;
  const accentValue = accent || accentPlacement;
  const handleClick = (event) => {
    if (interactableCardGroup && !disabled) {
      interactableCardGroup.select(event, value);
      setSelected(!selected);
    }
    onChange == null ? void 0 : onChange(event);
    onClick == null ? void 0 : onClick(event);
  };
  let tabIndex;
  if (interactableCardGroup) {
    if (disabled) {
      tabIndex = -1;
    } else if (isMultiselect) {
      tabIndex = 0;
    } else {
      tabIndex = selected ? 0 : -1;
      if (!interactableCardGroup.value && isFirstChild) {
        tabIndex = 0;
      }
    }
  } else {
    tabIndex = disabled ? -1 : 0;
  }
  const cardRef = useRef(null);
  const handleRef = useForkRef(ref, cardRef);
  const { active, cardProps } = useInteractableCard({
    disabled,
    onKeyUp,
    onKeyDown,
    onBlur,
    onClick
  });
  return /* @__PURE__ */ jsx("div", {
    ...cardProps,
    role,
    "aria-checked": ariaChecked,
    "aria-disabled": disabled,
    "data-value": value,
    className: clsx(
      withBaseName(),
      withBaseName(variant),
      {
        [withBaseName("accent")]: accentValue,
        [withBaseName(`accent${capitalize(accentValue != null ? accentValue : "")}`)]: accentValue,
        [withBaseName("active")]: role === "button" && active,
        [withBaseName("disabled")]: disabled,
        [withBaseName("selected")]: selected
      },
      className
    ),
    ...rest,
    onClick: handleClick,
    ref: handleRef,
    tabIndex,
    children
  });
});

export { InteractableCard };
//# sourceMappingURL=InteractableCard.js.map
