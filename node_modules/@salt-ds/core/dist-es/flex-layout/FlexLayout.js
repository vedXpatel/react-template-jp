import { jsx } from 'react/jsx-runtime';
import { clsx } from 'clsx';
import { forwardRef } from 'react';
import { makePrefixer } from '../utils/makePrefixer.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import '../utils/useId.js';
import { resolveResponsiveValue } from '../utils/useResponsiveProp.js';
import '../accordion/AccordionGroup.js';
import '../accordion/AccordionPanel.js';
import '../accordion/Accordion.js';
import '../accordion/AccordionHeader.js';
import '../aria-announcer/AriaAnnouncerContext.js';
import '../avatar/Avatar.js';
import '../badge/Badge.js';
import '../banner/Banner.js';
import '../banner/BannerActions.js';
import '../banner/BannerContent.js';
import '../border-item/BorderItem.js';
import '../border-layout/BorderLayout.js';
import { useBreakpoint } from '../breakpoints/BreakpointProvider.js';
import '../button/Button.js';
import '../card/Card.js';
import '../checkbox/Checkbox.js';
import '../checkbox/CheckboxGroup.js';
import '@salt-ds/icons';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import '../salt-provider/SaltProvider.js';
import '../combo-box/ComboBox.js';
import '../dialog/Dialog.js';
import '../dialog/DialogHeader.js';
import '../dialog/DialogActions.js';
import '../dialog/DialogContent.js';
import '../dialog/DialogContext.js';
import '../dialog/DialogCloseButton.js';
import '../divider/Divider.js';
import '../drawer/Drawer.js';
import '../drawer/DrawerCloseButton.js';
import '../dropdown/Dropdown.js';
import '../file-drop-zone/FileDropZone.js';
import '../file-drop-zone/FileDropZoneIcon.js';
import '../file-drop-zone/FileDropZoneTrigger.js';
import '../flex-item/FlexItem.js';
import '../flow-layout/FlowLayout.js';
import '../form-field/FormField.js';
import '../form-field-context/FormFieldContext.js';
import '../status-indicator/StatusIndicator.js';
import '../text/Text.js';
import '../text/Code.js';
import '../text/Display.js';
import '../text/Headings.js';
import '../text/Label.js';
import '../text/TextAction.js';
import '../text/TextNotation.js';
import '../grid-item/GridItem.js';
import '../grid-layout/GridLayout.js';
import '../input/Input.js';
import '../interactable-card/InteractableCard.js';
import '../interactable-card/InteractableCardGroup.js';
import '../interactable-card/InteractableCardGroupContext.js';
import '../link/Link.js';
import '../link-card/LinkCard.js';
import '../list-box/ListBox.js';
import '../list-control/ListControlContext.js';
import '@floating-ui/react';
import '../menu/MenuContext.js';
import '../menu/MenuItem.js';
import '../menu/MenuPanel.js';
import '../menu/MenuPanelContext.js';
import '../menu/MenuTriggerContext.js';
import '../menu/MenuGroup.js';
import '../multiline-input/MultilineInput.js';
import '../navigation-item/NavigationItem.js';
import '../option/Option.js';
import '../option/OptionGroup.js';
import '../overlay/OverlayContext.js';
import '../overlay/OverlayPanel.js';
import '../overlay/OverlayPanelCloseButton.js';
import '../overlay/OverlayPanelContent.js';
import '../pagination/Pagination.js';
import '../pagination/Paginator.js';
import '../pagination/CompactInput.js';
import '../pagination/CompactPaginator.js';
import '../pagination/GoToInput.js';
import '../panel/Panel.js';
import '../parent-child-layout/ParentChildLayout.js';
import '../pill/Pill.js';
import '../progress/CircularProgress/CircularProgress.js';
import '../progress/LinearProgress/LinearProgress.js';
import '../radio-button/RadioButton.js';
import '../radio-button/RadioButtonGroup.js';
import '../scrim/Scrim.js';
import '../segmented-button-group/SegmentedButtonGroup.js';
import '../spinner/Spinner.js';
import '../stack-layout/StackLayout.js';
import '../status-adornment/StatusAdornment.js';
import '../toast/Toast.js';
import '../toast/ToastContent.js';
import '../split-layout/SplitLayout.js';
import '../switch/Switch.js';
import '../tag/Tag.js';
import '../toggle-button/ToggleButton.js';
import '../toggle-button-group/ToggleButtonGroup.js';
import '../toggle-button-group/ToggleButtonGroupContext.js';
import '../tooltip/Tooltip.js';
import '../viewport/ViewportProvider.js';
import '../semantic-icon-provider/SemanticIconProvider.js';
import css_248z from './FlexLayout.css.js';

const withBaseName = makePrefixer("saltFlexLayout");
const FLEX_ALIGNMENT_BASE = ["start", "end", "center"];
const FLEX_CONTENT_ALIGNMENT_BASE = [
  ...FLEX_ALIGNMENT_BASE,
  "space-between",
  "space-around",
  "space-evenly"
];
function parseAlignment(style) {
  return style === "start" || style === "end" ? `flex-${style}` : style;
}
function parseSpacing(value) {
  if (value === void 0 || typeof value === "string") {
    return value;
  }
  return `calc(var(--salt-spacing-100) * ${value})`;
}
const FlexLayout = forwardRef(
  ({
    as,
    align,
    children,
    className,
    direction = "row",
    gap = 3,
    justify,
    separators,
    style,
    wrap = false,
    ...rest
  }, ref) => {
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-flex-layout",
      css: css_248z,
      window: targetWindow
    });
    const Component = as || "div";
    const separatorAlignment = separators === true ? "center" : separators;
    const { matchedBreakpoints } = useBreakpoint();
    const flexGap = resolveResponsiveValue(gap, matchedBreakpoints);
    const flexDirection = resolveResponsiveValue(direction, matchedBreakpoints);
    const flexWrap = resolveResponsiveValue(wrap, matchedBreakpoints);
    const flexLayoutStyles = {
      ...style,
      "--flexLayout-align": parseAlignment(align),
      "--flexLayout-direction": flexDirection,
      "--flexLayout-gap": parseSpacing(flexGap),
      "--flexLayout-justify": parseAlignment(justify),
      "--flexLayout-wrap": flexWrap ? "wrap" : "nowrap"
    };
    return /* @__PURE__ */ jsx(Component, {
      className: clsx(
        withBaseName(),
        {
          [withBaseName("separator")]: separatorAlignment && !wrap,
          [withBaseName(
            `separator-${flexDirection != null ? flexDirection : "row"}-${separatorAlignment != null ? separatorAlignment : "center"}`
          )]: separatorAlignment && !wrap,
          [withBaseName(`separator-${flexDirection != null ? flexDirection : "row"}`)]: separatorAlignment && !wrap
        },
        className
      ),
      ref,
      style: flexLayoutStyles,
      ...rest,
      children
    });
  }
);

export { FLEX_ALIGNMENT_BASE, FLEX_CONTENT_ALIGNMENT_BASE, FlexLayout };
//# sourceMappingURL=FlexLayout.js.map
