import { jsx } from 'react/jsx-runtime';
import { StyleInjectionProvider, useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { createContext, useContext, useMemo, isValidElement, cloneElement } from 'react';
import '../aria-announcer/AriaAnnouncerContext.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import '../utils/useId.js';
import { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect.js';
import { ViewportProvider } from '../viewport/ViewportProvider.js';
import '../accordion/AccordionGroup.js';
import '../accordion/AccordionPanel.js';
import '../accordion/Accordion.js';
import '../accordion/AccordionHeader.js';
import '../avatar/Avatar.js';
import '../badge/Badge.js';
import '../banner/Banner.js';
import '../banner/BannerActions.js';
import '../banner/BannerContent.js';
import '../border-item/BorderItem.js';
import '../border-layout/BorderLayout.js';
import { DEFAULT_BREAKPOINTS } from '../breakpoints/Breakpoints.js';
import { useMatchedBreakpoints, BreakpointProvider } from '../breakpoints/BreakpointProvider.js';
import '../button/Button.js';
import '../card/Card.js';
import '../checkbox/Checkbox.js';
import '../checkbox/CheckboxGroup.js';
import '@salt-ds/icons';
import '../combo-box/ComboBox.js';
import '../dialog/Dialog.js';
import '../dialog/DialogHeader.js';
import '../dialog/DialogActions.js';
import '../dialog/DialogContent.js';
import '../dialog/DialogContext.js';
import '../dialog/DialogCloseButton.js';
import '../divider/Divider.js';
import '../drawer/Drawer.js';
import '../drawer/DrawerCloseButton.js';
import '../dropdown/Dropdown.js';
import '../file-drop-zone/FileDropZone.js';
import '../file-drop-zone/FileDropZoneIcon.js';
import '../file-drop-zone/FileDropZoneTrigger.js';
import '../flex-item/FlexItem.js';
import '../flex-layout/FlexLayout.js';
import '../flow-layout/FlowLayout.js';
import '../form-field/FormField.js';
import '../form-field-context/FormFieldContext.js';
import '../status-indicator/StatusIndicator.js';
import '../text/Text.js';
import '../text/Code.js';
import '../text/Display.js';
import '../text/Headings.js';
import '../text/Label.js';
import '../text/TextAction.js';
import '../text/TextNotation.js';
import '../grid-item/GridItem.js';
import '../grid-layout/GridLayout.js';
import '../input/Input.js';
import '../interactable-card/InteractableCard.js';
import '../interactable-card/InteractableCardGroup.js';
import '../interactable-card/InteractableCardGroupContext.js';
import '../link/Link.js';
import '../link-card/LinkCard.js';
import '../list-box/ListBox.js';
import '../list-control/ListControlContext.js';
import '@floating-ui/react';
import '../menu/MenuContext.js';
import '../menu/MenuItem.js';
import '../menu/MenuPanel.js';
import '../menu/MenuPanelContext.js';
import '../menu/MenuTriggerContext.js';
import '../menu/MenuGroup.js';
import '../multiline-input/MultilineInput.js';
import '../navigation-item/NavigationItem.js';
import '../option/Option.js';
import '../option/OptionGroup.js';
import '../overlay/OverlayContext.js';
import '../overlay/OverlayPanel.js';
import '../overlay/OverlayPanelCloseButton.js';
import '../overlay/OverlayPanelContent.js';
import '../pagination/Pagination.js';
import '../pagination/Paginator.js';
import '../pagination/CompactInput.js';
import '../pagination/CompactPaginator.js';
import '../pagination/GoToInput.js';
import '../panel/Panel.js';
import '../parent-child-layout/ParentChildLayout.js';
import '../pill/Pill.js';
import '../progress/CircularProgress/CircularProgress.js';
import '../progress/LinearProgress/LinearProgress.js';
import '../radio-button/RadioButton.js';
import '../radio-button/RadioButtonGroup.js';
import '../scrim/Scrim.js';
import '../segmented-button-group/SegmentedButtonGroup.js';
import '../spinner/Spinner.js';
import '../stack-layout/StackLayout.js';
import '../status-adornment/StatusAdornment.js';
import '../toast/Toast.js';
import '../toast/ToastContent.js';
import '../split-layout/SplitLayout.js';
import '../switch/Switch.js';
import '../tag/Tag.js';
import '../toggle-button/ToggleButton.js';
import '../toggle-button-group/ToggleButtonGroup.js';
import '../toggle-button-group/ToggleButtonGroupContext.js';
import '../tooltip/Tooltip.js';
import '../semantic-icon-provider/SemanticIconProvider.js';
import { AriaAnnouncerProvider } from '../aria-announcer/AriaAnnouncerProvider.js';
import css_248z from './SaltProvider.css.js';

const DEFAULT_DENSITY = "medium";
const DEFAULT_THEME_NAME = "salt-theme";
const DEFAULT_THEME_NAME_NEXT = "salt-theme-next";
const DEFAULT_MODE = "light";
const DEFAULT_CORNER = "sharp";
const DEFAULT_HEADING_FONT = "Open Sans";
const DEFAULT_ACCENT = "blue";
const DEFAULT_ACTION_FONT = "Open Sans";
const DensityContext = createContext(DEFAULT_DENSITY);
const ThemeContext = createContext({
  theme: "",
  mode: DEFAULT_MODE,
  themeNext: false,
  corner: DEFAULT_CORNER,
  UNSTABLE_corner: DEFAULT_CORNER,
  headingFont: DEFAULT_HEADING_FONT,
  UNSTABLE_headingFont: DEFAULT_HEADING_FONT,
  accent: DEFAULT_ACCENT,
  UNSTABLE_accent: DEFAULT_ACCENT,
  actionFont: DEFAULT_ACTION_FONT,
  UNSTABLE_actionFont: DEFAULT_ACTION_FONT
});
const BreakpointContext = createContext(DEFAULT_BREAKPOINTS);
const getThemeNames = (themeName, themeNext) => {
  if (themeNext) {
    return themeName === DEFAULT_THEME_NAME ? clsx(DEFAULT_THEME_NAME, DEFAULT_THEME_NAME_NEXT) : clsx(DEFAULT_THEME_NAME, DEFAULT_THEME_NAME_NEXT, themeName);
  }
  return themeName === DEFAULT_THEME_NAME ? themeName : clsx(DEFAULT_THEME_NAME, themeName);
};
const createThemedChildren = ({
  children,
  themeName,
  density,
  mode,
  applyClassesTo,
  themeNext,
  corner,
  headingFont,
  accent,
  actionFont
}) => {
  var _a;
  const themeNamesString = getThemeNames(themeName, themeNext);
  const themeNextProps = {
    "data-corner": corner,
    "data-heading-font": headingFont,
    "data-accent": accent,
    "data-action-font": actionFont
  };
  if (applyClassesTo === "root") {
    return children;
  }
  if (applyClassesTo === "child") {
    if (isValidElement(children)) {
      return cloneElement(children, {
        className: clsx(
          (_a = children.props) == null ? void 0 : _a.className,
          themeNamesString,
          `salt-density-${density}`
        ),
        "data-mode": mode,
        ...themeNext ? themeNextProps : {}
      });
    }
    console.warn(
      `
SaltProvider can only apply CSS classes for theming to a single nested child element of the SaltProvider.
        Either wrap elements with a single container or consider removing the applyClassesToChild prop, in which case a
        div element will wrap your child elements`
    );
    return children;
  }
  return /* @__PURE__ */ jsx("div", {
    className: clsx(
      "salt-provider",
      themeNamesString,
      `salt-density-${density}`
    ),
    "data-mode": mode,
    ...themeNext ? themeNextProps : {},
    children
  });
};
function InternalSaltProvider({
  applyClassesTo: applyClassesToProp,
  children,
  density: densityProp,
  theme: themeProp,
  mode: modeProp,
  breakpoints: breakpointsProp,
  themeNext,
  corner: cornerProp,
  headingFont: headingFontProp,
  accent: accentProp,
  actionFont: actionFontProp
}) {
  var _a, _b, _c, _d, _e;
  const inheritedDensity = useContext(DensityContext);
  const {
    theme: inheritedTheme,
    mode: inheritedMode,
    window: inheritedWindow,
    corner: inheritedCorner,
    headingFont: inheritedHeadingFont,
    accent: inheritedAccent,
    actionFont: inheritedActionFont
  } = useContext(ThemeContext);
  const isRootProvider = inheritedTheme === void 0 || inheritedTheme === "";
  const density = (_a = densityProp != null ? densityProp : inheritedDensity) != null ? _a : DEFAULT_DENSITY;
  const themeName = themeProp != null ? themeProp : inheritedTheme === "" ? DEFAULT_THEME_NAME : inheritedTheme;
  const mode = modeProp != null ? modeProp : inheritedMode;
  const breakpoints = breakpointsProp != null ? breakpointsProp : DEFAULT_BREAKPOINTS;
  const corner = (_b = cornerProp != null ? cornerProp : inheritedCorner) != null ? _b : DEFAULT_CORNER;
  const headingFont = (_c = headingFontProp != null ? headingFontProp : inheritedHeadingFont) != null ? _c : DEFAULT_HEADING_FONT;
  const accent = (_d = accentProp != null ? accentProp : inheritedAccent) != null ? _d : DEFAULT_ACCENT;
  const actionFont = (_e = actionFontProp != null ? actionFontProp : inheritedActionFont) != null ? _e : DEFAULT_ACTION_FONT;
  const applyClassesTo = applyClassesToProp != null ? applyClassesToProp : isRootProvider ? "root" : "scope";
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-provider",
    css: css_248z,
    window: targetWindow
  });
  const themeContextValue = useMemo(
    () => ({
      theme: themeName,
      mode,
      window: targetWindow,
      themeNext: Boolean(themeNext),
      corner,
      headingFont,
      accent,
      actionFont,
      UNSTABLE_corner: corner,
      UNSTABLE_headingFont: headingFont,
      UNSTABLE_accent: accent,
      UNSTABLE_actionFont: actionFont
    }),
    [
      themeName,
      mode,
      targetWindow,
      themeNext,
      corner,
      headingFont,
      accent,
      actionFont
    ]
  );
  const themedChildren = createThemedChildren({
    children,
    themeName,
    density,
    mode,
    applyClassesTo,
    themeNext,
    corner,
    headingFont,
    accent,
    actionFont
  });
  useIsomorphicLayoutEffect(() => {
    const themeNamesString = getThemeNames(themeName, themeNext);
    const themeNames = themeNamesString.split(" ");
    if (applyClassesTo === "root" && targetWindow) {
      if (inheritedWindow !== targetWindow) {
        targetWindow.document.documentElement.classList.add(
          ...themeNames,
          `salt-density-${density}`
        );
        targetWindow.document.documentElement.dataset.mode = mode;
        if (themeNext) {
          targetWindow.document.documentElement.dataset.corner = corner;
          targetWindow.document.documentElement.dataset.headingFont = headingFont;
          targetWindow.document.documentElement.dataset.accent = accent;
          targetWindow.document.documentElement.dataset.actionFont = actionFont;
        }
      } else {
        console.warn(
          "SaltProvider can only apply CSS classes to the root if it is the root level SaltProvider."
        );
      }
    }
    return () => {
      if (applyClassesTo === "root" && targetWindow) {
        targetWindow.document.documentElement.classList.remove(
          ...themeNames,
          `salt-density-${density}`
        );
        targetWindow.document.documentElement.dataset.mode = void 0;
        if (themeNext) {
          delete targetWindow.document.documentElement.dataset.corner;
          delete targetWindow.document.documentElement.dataset.headingFont;
          delete targetWindow.document.documentElement.dataset.accent;
          delete targetWindow.document.documentElement.dataset.actionFont;
        }
      }
    };
  }, [
    applyClassesTo,
    density,
    mode,
    themeName,
    targetWindow,
    inheritedWindow,
    themeNext,
    corner,
    headingFont,
    accent,
    actionFont
  ]);
  const matchedBreakpoints = useMatchedBreakpoints(breakpoints);
  const saltProvider = /* @__PURE__ */ jsx(DensityContext.Provider, {
    value: density,
    children: /* @__PURE__ */ jsx(ThemeContext.Provider, {
      value: themeContextValue,
      children: /* @__PURE__ */ jsx(BreakpointProvider, {
        matchedBreakpoints,
        children: /* @__PURE__ */ jsx(BreakpointContext.Provider, {
          value: breakpoints,
          children: /* @__PURE__ */ jsx(ViewportProvider, {
            children: themedChildren
          })
        })
      })
    })
  });
  if (isRootProvider) {
    return /* @__PURE__ */ jsx(AriaAnnouncerProvider, {
      children: saltProvider
    });
  }
  return saltProvider;
}
function SaltProvider({
  enableStyleInjection,
  ...restProps
}) {
  return /* @__PURE__ */ jsx(StyleInjectionProvider, {
    value: enableStyleInjection,
    children: /* @__PURE__ */ jsx(InternalSaltProvider, {
      ...restProps
    })
  });
}
function SaltProviderNext({
  enableStyleInjection,
  ...restProps
}) {
  return /* @__PURE__ */ jsx(StyleInjectionProvider, {
    value: enableStyleInjection,
    children: /* @__PURE__ */ jsx(InternalSaltProvider, {
      ...restProps,
      themeNext: true
    })
  });
}
const UNSTABLE_SaltProviderNext = SaltProviderNext;
const useTheme = () => {
  const { window, ...contextWithoutWindow } = useContext(ThemeContext);
  return contextWithoutWindow;
};
function useDensity(density) {
  var _a;
  const densityFromContext = useContext(DensityContext);
  return (_a = density != null ? density : densityFromContext) != null ? _a : DEFAULT_DENSITY;
}
const useBreakpoints = () => {
  return useContext(BreakpointContext);
};

export { BreakpointContext, DEFAULT_DENSITY, DensityContext, SaltProvider, SaltProviderNext, ThemeContext, UNSTABLE_SaltProviderNext, useBreakpoints, useDensity, useTheme };
//# sourceMappingURL=SaltProvider.js.map
