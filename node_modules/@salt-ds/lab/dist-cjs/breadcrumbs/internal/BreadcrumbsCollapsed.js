'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var react = require('react');
var MenuButton = require('../../menu-button/MenuButton.js');
var useFocusMenuRemount = require('./useFocusMenuRemount.js');

const BreadcrumbsCollapsed = ({
  children,
  CascadingMenuProps,
  accessibleText,
  ...rest
}) => {
  const keys = react.Children.map(children, (child) => {
    if (react.isValidElement(child)) {
      return child.key;
    }
    return "";
  });
  const { OverflowIcon } = core.useIcon();
  const key = keys ? keys.join("") : "";
  const { ref, shouldFocusOnMount } = useFocusMenuRemount.useFocusMenuRemount(key);
  const itemToString = react.useCallback((child) => {
    if (!child) {
      return "";
    }
    const { overflowLabel, tooltipText, children: children2 } = child.props;
    return overflowLabel || tooltipText || String(children2);
  }, []);
  const onItemClick = react.useCallback(
    (sourceItem, event) => {
      shouldFocusOnMount.current = true;
    },
    [shouldFocusOnMount]
  );
  const menuItems = [];
  react.Children.forEach(children, (x) => {
    if (react.isValidElement(x)) {
      menuItems.push({ props: x.props });
    }
  });
  return /* @__PURE__ */ jsxRuntime.jsx(MenuButton.MenuButton, {
    CascadingMenuProps: {
      initialSource: {
        menuItems
      },
      itemToString,
      onItemClick,
      minWidth: 0,
      ...CascadingMenuProps
    },
    hideCaret: true,
    ...rest,
    ref,
    children: /* @__PURE__ */ jsxRuntime.jsx(OverflowIcon, {})
  });
};

exports.BreadcrumbsCollapsed = BreadcrumbsCollapsed;
//# sourceMappingURL=BreadcrumbsCollapsed.js.map
