{"version":3,"file":"DatePickerRangePanel.js","sources":["../src/date-picker/DatePickerRangePanel.tsx"],"sourcesContent":["import {\n  type DateValue,\n  endOfMonth,\n  getLocalTimeZone,\n  isSameMonth,\n  startOfMonth,\n  today,\n} from \"@internationalized/date\";\nimport {\n  FlexItem,\n  FlexLayout,\n  FormFieldContext,\n  type FormFieldContextValue,\n  FormFieldHelperText,\n  StackLayout,\n  makePrefixer,\n  useControlled,\n} from \"@salt-ds/core\";\nimport { useComponentCssInjection } from \"@salt-ds/styles\";\nimport { useWindow } from \"@salt-ds/window\";\nimport clsx from \"clsx\";\nimport {\n  type ComponentPropsWithoutRef,\n  type SyntheticEvent,\n  forwardRef,\n  useCallback,\n  useState,\n} from \"react\";\nimport {\n  Calendar,\n  CalendarDateGrid,\n  type CalendarDateGridProps,\n  CalendarNavigation,\n  type CalendarNavigationProps,\n  type CalendarOffsetProps,\n  type CalendarProps,\n  type CalendarRangeProps,\n  CalendarWeekHeader,\n  type CalendarWeekHeaderProps,\n  type DateRangeSelection,\n  type UseCalendarSelectionRangeProps,\n  getCurrentLocale,\n} from \"../calendar\";\nimport { useDatePickerContext } from \"./DatePickerContext\";\nimport datePickerPanelCss from \"./DatePickerPanel.css\";\n\n/**\n * Props for the DatePickerRangePanel component.\n * @template T - The type of the selected date range.\n */\nexport interface DatePickerRangePanelProps<T>\n  extends ComponentPropsWithoutRef<\"div\"> {\n  /**\n   * Callback fired when a date range is selected.\n   * @param event - The synthetic event.\n   * @param selectedDate - The selected date range or null.\n   */\n  onSelect?: (event: SyntheticEvent, selectedDate?: T | null) => void;\n\n  /**\n   * Helper text to be displayed below the date picker.\n   */\n  helperText?: string;\n\n  /**\n   * The currently visible month for the start date.\n   */\n  startVisibleMonth?: DateValue;\n\n  /**\n   * The default visible month for the start date.\n   */\n  defaultStartVisibleMonth?: DateValue;\n\n  /**\n   * Callback fired when the visible month for the start date changes.\n   * @param event - The synthetic event.\n   * @param visibleMonth - The new visible month for the start date.\n   */\n  onStartVisibleMonthChange?: (\n    event: SyntheticEvent,\n    visibleMonth: DateValue,\n  ) => void;\n\n  /**\n   * The currently visible month for the end date.\n   */\n  endVisibleMonth?: DateValue;\n\n  /**\n   * The default visible month for the end date.\n   */\n  defaultEndVisibleMonth?: DateValue;\n\n  /**\n   * Callback fired when the visible month for the end date changes.\n   * @param event - The synthetic event.\n   * @param visibleMonth - The new visible month for the end date.\n   */\n  onEndVisibleMonthChange?: (\n    event: SyntheticEvent,\n    visibleMonth: DateValue,\n  ) => void;\n\n  /**\n   * Props to be passed to the start date CalendarNavigation component.\n   */\n  StartCalendarNavigationProps?: CalendarNavigationProps;\n\n  /**\n   * Props to be passed to the start date calendar component.\n   */\n  StartCalendarProps?: Partial<\n    Omit<\n      CalendarRangeProps | CalendarOffsetProps,\n      | \"selectedDate\"\n      | \"defaultSelectedDate\"\n      | \"onSelectedDateChange\"\n      | \"onVisibleMonthChange\"\n    >\n  >;\n  /**\n   * Props to be passed to the start date CalendarWeekHeader component.\n   */\n  StartCalendarWeekHeaderProps?: CalendarWeekHeaderProps;\n  /**\n   * Props to be passed to the start date CalendarDataGrid component.\n   */\n  StartCalendarDataGridProps?: CalendarDateGridProps;\n\n  /**\n   * Props to be passed to the end date CalendarNavigation component.\n   */\n  EndCalendarProps?: Partial<\n    Omit<\n      CalendarRangeProps,\n      | \"selectedDate\"\n      | \"defaultSelectedDate\"\n      | \"onSelectedDateChange\"\n      | \"onVisibleMonthChange\"\n    >\n  >;\n\n  /**\n   * Props to be passed to the end date CalendarNavigation component.\n   */\n  EndCalendarNavigationProps?: CalendarNavigationProps;\n  /**\n   * Props to be passed to the end date CalendarWeekHeader component.\n   */\n  EndCalendarWeekHeaderProps?: CalendarWeekHeaderProps;\n  /**\n   * Props to be passed to the end date CalendarDataGrid component.\n   */\n  EndCalendarDataGridProps?: CalendarDateGridProps;\n}\n\nfunction getFallbackVisibleMonths(\n  selectedDate: DateRangeSelection | null,\n  timeZone: string,\n) {\n  const createConsecutiveRange = (date: DateValue) => [\n    startOfMonth(date),\n    startOfMonth(date).add({ months: 1 }),\n  ];\n\n  if (selectedDate?.startDate) {\n    const { startDate, endDate } = selectedDate;\n    if (endDate) {\n      return isSameMonth(startDate, endDate)\n        ? createConsecutiveRange(startDate)\n        : [startOfMonth(startDate), startOfMonth(endDate)];\n    }\n    return createConsecutiveRange(startDate);\n  }\n\n  const currentMonth = startOfMonth(today(timeZone));\n  return [currentMonth, currentMonth.add({ months: 1 })];\n}\n\nconst withBaseName = makePrefixer(\"saltDatePickerPanel\");\n\nexport const DatePickerRangePanel = forwardRef<\n  HTMLDivElement,\n  DatePickerRangePanelProps<DateRangeSelection>\n>(function DatePickerRangePanel(props, ref) {\n  const {\n    className,\n    defaultStartVisibleMonth: defaultStartVisibleMonthProp,\n    startVisibleMonth: startVisibleMonthProp,\n    onStartVisibleMonthChange,\n    defaultEndVisibleMonth: defaultEndVisibleMonthProp,\n    endVisibleMonth: endVisibleMonthProp,\n    onEndVisibleMonthChange,\n    helperText,\n    onSelect,\n    StartCalendarProps: StartCalendarPropsProp,\n    StartCalendarNavigationProps,\n    StartCalendarWeekHeaderProps,\n    StartCalendarDataGridProps,\n    EndCalendarProps: EndCalendarPropsProp,\n    EndCalendarNavigationProps,\n    EndCalendarWeekHeaderProps,\n    EndCalendarDataGridProps,\n    ...rest\n  } = props;\n\n  const targetWindow = useWindow();\n  useComponentCssInjection({\n    testId: \"salt-date-picker-range-panel\",\n    css: datePickerPanelCss,\n    window: targetWindow,\n  });\n\n  const {\n    state: {\n      selectedDate,\n      timeZone = getLocalTimeZone(),\n      minDate = startOfMonth(today(timeZone)),\n      maxDate = minDate.add({ months: 1 }),\n      locale = getCurrentLocale(),\n    },\n    helpers: { setSelectedDate },\n  } = useDatePickerContext({ selectionVariant: \"range\" });\n\n  const [hoveredDate, setHoveredDate] = useState<DateValue | null>(null);\n\n  const [[fallbackStartVisibleMonth, fallbackEndVisibleMonth]] = useState(() =>\n    getFallbackVisibleMonths(selectedDate, timeZone),\n  );\n\n  const [startVisibleMonth, setStartVisibleMonth] = useControlled({\n    controlled: startVisibleMonthProp,\n    default: defaultStartVisibleMonthProp || fallbackStartVisibleMonth,\n    name: \"DatePickerRangePanel\",\n    state: \"startVisibleMonth\",\n  });\n\n  const [endVisibleMonth, setEndVisibleMonth] = useControlled({\n    controlled: endVisibleMonthProp,\n    default: defaultEndVisibleMonthProp || fallbackEndVisibleMonth,\n    name: \"DatePickerRangePanel\",\n    state: \"endVisibleMonth\",\n  });\n\n  const handleSelectedDateChange = useCallback(\n    (event: SyntheticEvent, newDate: DateRangeSelection | null) => {\n      setSelectedDate(newDate, { startDate: false, endDate: false });\n      onSelect?.(event, newDate);\n    },\n    [onSelect, setSelectedDate],\n  );\n\n  const handleHoveredStartDateChange: CalendarProps[\"onHoveredDateChange\"] =\n    useCallback(\n      (event: SyntheticEvent, newHoveredDate: DateValue | null) => {\n        setHoveredDate(newHoveredDate);\n        if (newHoveredDate && StartCalendarPropsProp?.onHoveredDateChange) {\n          StartCalendarPropsProp.onHoveredDateChange?.(event, newHoveredDate);\n        }\n      },\n      [StartCalendarPropsProp?.onHoveredDateChange],\n    );\n  const handleHoveredEndDateChange = useCallback(\n    (event: SyntheticEvent, newHoveredDate: DateValue | null) => {\n      setHoveredDate(newHoveredDate);\n      if (newHoveredDate && EndCalendarPropsProp?.onHoveredDateChange) {\n        EndCalendarPropsProp.onHoveredDateChange(event, newHoveredDate);\n      }\n    },\n    [EndCalendarPropsProp?.onHoveredDateChange],\n  );\n\n  const handleStartVisibleMonthChange = useCallback(\n    (event: SyntheticEvent, newVisibleMonth: DateValue) => {\n      setStartVisibleMonth(newVisibleMonth);\n      if (newVisibleMonth.compare(endVisibleMonth) >= 0) {\n        setEndVisibleMonth(newVisibleMonth.add({ months: 1 }));\n      }\n      onStartVisibleMonthChange?.(event, newVisibleMonth);\n    },\n    [endVisibleMonth, onStartVisibleMonthChange],\n  );\n\n  const handleEndVisibleMonthChange = useCallback(\n    (event: SyntheticEvent, newVisibleMonth: DateValue) => {\n      setEndVisibleMonth(newVisibleMonth);\n      if (newVisibleMonth.compare(startVisibleMonth) <= 0) {\n        setStartVisibleMonth(\n          startOfMonth(newVisibleMonth.subtract({ months: 1 })),\n        );\n      }\n      onEndVisibleMonthChange?.(event, newVisibleMonth);\n    },\n    [startVisibleMonth, onEndVisibleMonthChange],\n  );\n\n  function getHoveredDate(\n    date?: DateValue | null,\n    hoveredDate?: DateValue | null,\n  ) {\n    return date && hoveredDate && hoveredDate?.compare(endOfMonth(date)) > 0\n      ? endOfMonth(date)\n      : hoveredDate;\n  }\n\n  const StartCalendarProps = {\n    visibleMonth: startVisibleMonth,\n    hoveredDate: getHoveredDate(selectedDate?.startDate, hoveredDate),\n    selectedDate: selectedDate as DateRangeSelection,\n    onHoveredDateChange: handleHoveredStartDateChange,\n    onVisibleMonthChange: handleStartVisibleMonthChange,\n    onSelectedDateChange: handleSelectedDateChange,\n    hideOutOfRangeDates: true,\n    minDate,\n    maxDate,\n    locale,\n    timeZone,\n    ...StartCalendarPropsProp,\n  } as Partial<UseCalendarSelectionRangeProps>;\n  const EndCalendarProps = {\n    visibleMonth: endVisibleMonth,\n    hoveredDate,\n    selectedDate: selectedDate as DateRangeSelection,\n    onHoveredDateChange: handleHoveredEndDateChange,\n    onVisibleMonthChange: handleEndVisibleMonthChange,\n    onSelectedDateChange: handleSelectedDateChange,\n    hideOutOfRangeDates: true,\n    minDate,\n    maxDate,\n    locale,\n    timeZone,\n    ...EndCalendarPropsProp,\n  } as Partial<UseCalendarSelectionRangeProps>;\n\n  return (\n    <StackLayout\n      separators\n      gap={0}\n      className={clsx(className, withBaseName(\"container\"))}\n      ref={ref}\n      {...rest}\n    >\n      {helperText && (\n        <FlexItem className={withBaseName(\"header\")}>\n          <FormFieldHelperText>{helperText}</FormFieldHelperText>\n        </FlexItem>\n      )}\n      <FlexLayout gap={0}>\n        {/* Avoid Dropdowns in Calendar inheriting the FormField's state */}\n        <FormFieldContext.Provider value={{} as FormFieldContextValue}>\n          <Calendar selectionVariant={\"range\"} {...StartCalendarProps}>\n            <CalendarNavigation {...StartCalendarNavigationProps} />\n            <CalendarWeekHeader {...StartCalendarWeekHeaderProps} />\n            <CalendarDateGrid {...StartCalendarDataGridProps} />\n          </Calendar>\n          <Calendar selectionVariant={\"range\"} {...EndCalendarProps}>\n            <CalendarNavigation {...EndCalendarNavigationProps} />\n            <CalendarWeekHeader {...EndCalendarWeekHeaderProps} />\n            <CalendarDateGrid {...EndCalendarDataGridProps} />\n          </Calendar>\n        </FormFieldContext.Provider>\n      </FlexLayout>\n    </StackLayout>\n  );\n});\n"],"names":["date","startOfMonth","isSameMonth","today","makePrefixer","forwardRef","DatePickerRangePanel","useWindow","useComponentCssInjection","datePickerPanelCss","getLocalTimeZone","getCurrentLocale","useDatePickerContext","useState","useControlled","useCallback","hoveredDate","endOfMonth","jsxs","StackLayout","clsx","jsx","FlexItem","FormFieldHelperText","FlexLayout","FormFieldContext","Calendar","CalendarNavigation","CalendarWeekHeader","CalendarDateGrid"],"mappings":"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"}