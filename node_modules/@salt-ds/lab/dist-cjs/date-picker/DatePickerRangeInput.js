'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var clsx = require('clsx');
var react = require('react');
require('../date-input/DateInputSingle.js');
var DateInputRange = require('../date-input/DateInputRange.js');
require('@internationalized/date');
var DatePickerContext = require('./DatePickerContext.js');
var DatePickerOverlayProvider = require('./DatePickerOverlayProvider.js');

const withBaseName = core.makePrefixer("saltDatePickerRangeInput");
const DatePickerRangeInput = react.forwardRef(function DatePickerRangeInput2(props, ref) {
  const {
    className,
    endInputProps: endInputPropsProp,
    startInputProps: startInputPropsProp,
    onKeyDown,
    defaultValue,
    value: valueProp,
    onChange,
    onDateValueChange,
    ...rest
  } = props;
  const { CalendarIcon } = core.useIcon();
  const {
    state: { selectedDate, disabled, readOnly, cancelled, locale, timeZone },
    helpers: { setSelectedDate }
  } = DatePickerContext.useDatePickerContext({ selectionVariant: "range" });
  const {
    state: { open, floatingUIResult },
    helpers: { getReferenceProps, setOpen }
  } = DatePickerOverlayProvider.useDatePickerOverlay();
  const inputRef = core.useForkRef(ref, floatingUIResult == null ? void 0 : floatingUIResult.reference);
  const prevState = react.useRef();
  const [value, setValue] = core.useControlled({
    controlled: valueProp,
    default: defaultValue,
    name: "DatePickerRangeInput",
    state: "dateValue"
  });
  const handleCalendarButton = react.useCallback(() => {
    setOpen(!open);
  }, [open, setOpen]);
  const handleDateChange = react.useCallback(
    (_event, newDate, error) => {
      setSelectedDate(newDate, error);
    },
    [setSelectedDate]
  );
  const handleDateValueChange = (newDateValue, isFormatted) => {
    setValue(newDateValue);
    onDateValueChange == null ? void 0 : onDateValueChange(newDateValue, isFormatted);
  };
  react.useEffect(() => {
    if (open) {
      prevState.current = { date: selectedDate, value };
    }
  }, [open]);
  react.useEffect(() => {
    var _a, _b;
    if (cancelled) {
      setValue((_a = prevState == null ? void 0 : prevState.current) == null ? void 0 : _a.value);
      setSelectedDate(((_b = prevState == null ? void 0 : prevState.current) == null ? void 0 : _b.date) || null, {
        startDate: false,
        endDate: false
      });
    }
  }, [cancelled]);
  const startInputProps = {
    onKeyDown: (event) => {
      var _a;
      if (event.key === "ArrowDown") {
        setOpen(true);
      }
      (_a = startInputPropsProp == null ? void 0 : startInputPropsProp.onKeyDown) == null ? void 0 : _a.call(startInputPropsProp, event);
    },
    ...startInputPropsProp
  };
  const endInputProps = {
    onKeyDown: (event) => {
      var _a;
      if (event.key === "ArrowDown") {
        setOpen(true);
      }
      (_a = endInputPropsProp == null ? void 0 : endInputPropsProp.onKeyDown) == null ? void 0 : _a.call(endInputPropsProp, event);
    },
    ...endInputPropsProp
  };
  return /* @__PURE__ */ jsxRuntime.jsx(DateInputRange.DateInputRange, {
    value: value || { startDate: "", endDate: "" },
    locale,
    timeZone,
    className: clsx.clsx(withBaseName(), className),
    ref: inputRef,
    date: selectedDate,
    startInputProps: getReferenceProps(startInputProps),
    endInputProps: getReferenceProps(endInputProps),
    readOnly,
    onDateChange: handleDateChange,
    onDateValueChange: handleDateValueChange,
    onChange,
    endAdornment: /* @__PURE__ */ jsxRuntime.jsx(core.Button, {
      appearance: "transparent",
      sentiment: "neutral",
      onClick: handleCalendarButton,
      disabled,
      "aria-label": "Open Calendar",
      children: /* @__PURE__ */ jsxRuntime.jsx(CalendarIcon, {})
    }),
    ...rest
  });
});

exports.DatePickerRangeInput = DatePickerRangeInput;
//# sourceMappingURL=DatePickerRangeInput.js.map
