'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var clsx = require('clsx');
var react = require('react');
require('./DatePicker.js');
var DatePickerContext = require('./DatePickerContext.js');
require('./DatePickerOverlay.js');
require('./DatePickerSingleInput.js');
require('./DatePickerSinglePanel.js');
require('./DatePickerRangeInput.js');
require('./DatePickerRangePanel.js');
var DatePickerActions$1 = require('./DatePickerActions.css.js');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');

const withBaseName = core.makePrefixer("saltDatePickerActions");
const DatePickerActions = react.forwardRef(function DatePickerActions2(props, ref) {
  const {
    applyButtonRef,
    ApplyButtonProps,
    cancelButtonRef,
    children,
    className,
    CancelButtonProps,
    onApply,
    onCancel,
    selectionVariant,
    ...rest
  } = props;
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-date-picker-actions",
    css: DatePickerActions$1,
    window: targetWindow
  });
  let stateAndHelpers;
  if (selectionVariant === "range") {
    stateAndHelpers = DatePickerContext.useDatePickerContext({
      selectionVariant: "range"
    });
  } else {
    stateAndHelpers = DatePickerContext.useDatePickerContext({
      selectionVariant: "single"
    });
  }
  const {
    state: { selectedDate },
    helpers: { cancel, apply, setEnableApply }
  } = stateAndHelpers;
  react.useEffect(() => {
    setEnableApply(true);
  }, [setEnableApply]);
  const handleCancel = (event) => {
    var _a;
    cancel();
    (_a = CancelButtonProps == null ? void 0 : CancelButtonProps.onClick) == null ? void 0 : _a.call(CancelButtonProps, event);
    onCancel == null ? void 0 : onCancel(event);
  };
  const handleApply = (event) => {
    var _a;
    if (selectionVariant === "single") {
      apply(selectedDate, false);
      onApply == null ? void 0 : onApply(event, selectedDate);
    } else {
      apply(selectedDate, { startDate: false, endDate: false });
      onApply == null ? void 0 : onApply(event, selectedDate);
    }
    (_a = ApplyButtonProps == null ? void 0 : ApplyButtonProps.onClick) == null ? void 0 : _a.call(ApplyButtonProps, event);
  };
  return /* @__PURE__ */ jsxRuntime.jsxs("div", {
    className: clsx.clsx(className, withBaseName()),
    ref,
    ...rest,
    children: [
      /* @__PURE__ */ jsxRuntime.jsx("div", {
        className: withBaseName("body"),
        children
      }),
      /* @__PURE__ */ jsxRuntime.jsx(core.Button, {
        appearance: "transparent",
        sentiment: "neutral",
        ref: cancelButtonRef,
        ...CancelButtonProps,
        onClick: handleCancel,
        className: clsx.clsx(withBaseName("action"), CancelButtonProps == null ? void 0 : CancelButtonProps.className),
        children: "Cancel"
      }),
      /* @__PURE__ */ jsxRuntime.jsx(core.Button, {
        appearance: "solid",
        sentiment: "accented",
        ref: applyButtonRef,
        ...ApplyButtonProps,
        onClick: handleApply,
        className: clsx.clsx(withBaseName("action"), ApplyButtonProps == null ? void 0 : ApplyButtonProps.className),
        children: "Apply"
      })
    ]
  });
});

exports.DatePickerActions = DatePickerActions;
//# sourceMappingURL=DatePickerActions.js.map
