'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react$1 = require('@floating-ui/react');
var core = require('@salt-ds/core');
var react = require('react');

const DatePickerOverlayContext = core.createContext("DatePickerOverlayContext", void 0);
const DatePickerOverlayProvider = ({ open: openProp, defaultOpen, children }) => {
  const [open, setOpenState] = core.useControlled({
    controlled: openProp,
    default: Boolean(defaultOpen),
    name: "DatePicker",
    state: "openDatePickerOverlay"
  });
  const triggeringElement = react.useRef(null);
  react.useEffect(() => {
    if (!open) {
      const trigger = triggeringElement.current;
      if (trigger) {
        trigger.focus();
      }
      if (trigger instanceof HTMLInputElement) {
        setTimeout(() => {
          trigger.setSelectionRange(0, trigger.value.length);
        }, 0);
      }
      triggeringElement.current = null;
    }
  }, [open]);
  const setOpen = react.useCallback((newOpen) => {
    if (newOpen) {
      triggeringElement.current = document.activeElement;
    }
    setOpenState(newOpen);
  }, []);
  const floatingUIResult = core.useFloatingUI({
    open,
    onOpenChange: setOpen,
    placement: "bottom-start",
    middleware: [react$1.flip({ fallbackStrategy: "initialPlacement" })]
  });
  const {
    getFloatingProps: _getFloatingPropsCallback,
    getReferenceProps: _getReferenceProps
  } = react$1.useInteractions([react$1.useDismiss(floatingUIResult.context)]);
  const getFloatingPropsCallback = react.useMemo(
    () => _getFloatingPropsCallback,
    [_getFloatingPropsCallback]
  );
  const getReferenceProps = react.useMemo(
    () => _getReferenceProps,
    [_getReferenceProps]
  );
  const getFloatingProps = react.useCallback(
    (userProps) => {
      var _a, _b;
      const { x, y, strategy, elements } = floatingUIResult;
      return {
        top: y != null ? y : 0,
        left: x != null ? x : 0,
        position: strategy,
        width: (_a = elements.floating) == null ? void 0 : _a.offsetWidth,
        height: (_b = elements.floating) == null ? void 0 : _b.offsetHeight,
        ...getFloatingPropsCallback(userProps)
      };
    },
    [getFloatingPropsCallback, floatingUIResult]
  );
  const state = react.useMemo(
    () => ({
      open,
      floatingUIResult
    }),
    [open, floatingUIResult]
  );
  const helpers = react.useMemo(
    () => ({
      getFloatingProps,
      getReferenceProps,
      setOpen
    }),
    [getFloatingProps, getReferenceProps, setOpen]
  );
  const contextValue = react.useMemo(() => ({ state, helpers }), [state, helpers]);
  return /* @__PURE__ */ jsxRuntime.jsx(DatePickerOverlayContext.Provider, {
    value: contextValue,
    children
  });
};
const useDatePickerOverlay = () => {
  const context = react.useContext(DatePickerOverlayContext);
  if (!context) {
    throw new Error(
      "useDatePickerOverlay must be used within a DatePickerOverlayProvider"
    );
  }
  return context;
};

exports.DatePickerOverlayProvider = DatePickerOverlayProvider;
exports.useDatePickerOverlay = useDatePickerOverlay;
//# sourceMappingURL=DatePickerOverlayProvider.js.map
