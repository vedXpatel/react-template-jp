'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var date = require('@internationalized/date');
var core = require('@salt-ds/core');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var react = require('react');
var Calendar = require('../calendar/Calendar.js');
var CalendarNavigation = require('../calendar/CalendarNavigation.js');
var CalendarWeekHeader = require('../calendar/CalendarWeekHeader.js');
var CalendarDateGrid = require('../calendar/CalendarDateGrid.js');
require('../calendar/internal/CalendarContext.js');
var formatDate = require('../calendar/formatDate.js');
require('../calendar/useCalendarSelection.js');
var DatePickerPanel = require('./DatePickerPanel.css.js');
require('./DatePicker.js');
require('./DatePickerActions.js');
var DatePickerContext = require('./DatePickerContext.js');
require('./DatePickerOverlay.js');
require('./DatePickerSingleInput.js');
require('./DatePickerRangeInput.js');
require('./DatePickerRangePanel.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var clsx__default = /*#__PURE__*/_interopDefaultLegacy(clsx);

const withBaseName = core.makePrefixer("saltDatePickerPanel");
const DatePickerSinglePanel = react.forwardRef(function DatePickerSinglePanel2(props, ref) {
  const {
    CalendarProps,
    CalendarWeekHeaderProps,
    CalendarNavigationProps,
    CalendarDataGridProps,
    className,
    defaultVisibleMonth,
    visibleMonth: visibleMonthProp,
    onVisibleMonthChange,
    helperText,
    onSelect,
    ...rest
  } = props;
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-date-picker-single-panel",
    css: DatePickerPanel,
    window: targetWindow
  });
  const {
    state: {
      selectedDate,
      timeZone = date.getLocalTimeZone(),
      minDate = date.startOfMonth(date.today(timeZone)),
      maxDate = minDate.add({ months: 1 }),
      locale = formatDate.getCurrentLocale()
    },
    helpers: { setSelectedDate }
  } = DatePickerContext.useDatePickerContext({ selectionVariant: "single" });
  const [hoveredDate, setHoveredDate] = react.useState(null);
  const [uncontrolledDefaultVisibleMonth] = react.useState(
    () => defaultVisibleMonth || date.startOfMonth(selectedDate || date.today(timeZone))
  );
  const [visibleMonth, setVisibleMonth] = core.useControlled({
    controlled: visibleMonthProp,
    default: uncontrolledDefaultVisibleMonth,
    name: "DatePickerSinglePanel",
    state: "visibleMonth"
  });
  const handleSelectedDateChange = react.useCallback(
    (event, newDate) => {
      setSelectedDate(newDate, false);
      onSelect == null ? void 0 : onSelect(event, newDate);
    },
    [setSelectedDate, onSelect]
  );
  const handleHoveredDateChange = react.useCallback(
    (event, newHoveredDate) => {
      setHoveredDate(newHoveredDate);
      if (newHoveredDate && (CalendarProps == null ? void 0 : CalendarProps.onHoveredDateChange)) {
        CalendarProps.onHoveredDateChange(event, newHoveredDate);
      }
    },
    [CalendarProps == null ? void 0 : CalendarProps.onHoveredDateChange]
  );
  const handleVisibleMonthChange = react.useCallback(
    (event, newVisibleMonth) => {
      setVisibleMonth(newVisibleMonth);
      if (onVisibleMonthChange) {
        onVisibleMonthChange(event, newVisibleMonth);
      }
    },
    [onVisibleMonthChange]
  );
  const baseCalendarProps = {
    selectionVariant: "single",
    visibleMonth,
    hoveredDate,
    onHoveredDateChange: handleHoveredDateChange,
    onVisibleMonthChange: handleVisibleMonthChange,
    onSelectedDateChange: handleSelectedDateChange,
    hideOutOfRangeDates: true,
    selectedDate,
    minDate,
    maxDate,
    locale,
    timeZone,
    ...CalendarProps
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(core.StackLayout, {
    separators: true,
    gap: 0,
    className: clsx__default["default"](className, withBaseName("container")),
    ref,
    ...rest,
    children: [
      helperText && /* @__PURE__ */ jsxRuntime.jsx(core.FlexItem, {
        className: withBaseName("header"),
        children: /* @__PURE__ */ jsxRuntime.jsx(core.FormFieldHelperText, {
          children: helperText
        })
      }),
      /* @__PURE__ */ jsxRuntime.jsx(core.FlexLayout, {
        gap: 0,
        children: /* @__PURE__ */ jsxRuntime.jsx(core.FormFieldContext.Provider, {
          value: {},
          children: /* @__PURE__ */ jsxRuntime.jsxs(Calendar.Calendar, {
            selectionVariant: "single",
            ...baseCalendarProps,
            children: [
              /* @__PURE__ */ jsxRuntime.jsx(CalendarNavigation.CalendarNavigation, {
                ...CalendarNavigationProps
              }),
              /* @__PURE__ */ jsxRuntime.jsx(CalendarWeekHeader.CalendarWeekHeader, {
                ...CalendarWeekHeaderProps
              }),
              /* @__PURE__ */ jsxRuntime.jsx(CalendarDateGrid.CalendarDateGrid, {
                ...CalendarDataGridProps
              })
            ]
          })
        })
      })
    ]
  });
});

exports.DatePickerSinglePanel = DatePickerSinglePanel;
//# sourceMappingURL=DatePickerSinglePanel.js.map
