{"version":3,"file":"DatePickerSinglePanel.js","sources":["../src/date-picker/DatePickerSinglePanel.tsx"],"sourcesContent":["import {\n  type DateValue,\n  getLocalTimeZone,\n  startOfMonth,\n  today,\n} from \"@internationalized/date\";\nimport {\n  FlexItem,\n  FlexLayout,\n  FormFieldContext,\n  type FormFieldContextValue,\n  FormFieldHelperText,\n  StackLayout,\n  makePrefixer,\n  useControlled,\n} from \"@salt-ds/core\";\nimport { useComponentCssInjection } from \"@salt-ds/styles\";\nimport { useWindow } from \"@salt-ds/window\";\nimport clsx from \"clsx\";\nimport {\n  type ComponentPropsWithoutRef,\n  type SyntheticEvent,\n  forwardRef,\n  useCallback,\n  useState,\n} from \"react\";\nimport {\n  CalendarDateGrid,\n  type CalendarDateGridProps,\n  CalendarNavigation,\n  type CalendarNavigationProps,\n  type CalendarSingleProps,\n  CalendarWeekHeader,\n  type CalendarWeekHeaderProps,\n  getCurrentLocale,\n} from \"../calendar\";\nimport { Calendar, type SingleDateSelection } from \"../calendar\";\nimport datePickerPanelCss from \"./DatePickerPanel.css\";\nimport { useDatePickerContext } from \"./index\";\n\n/**\n * Props for the DatePickerSinglePanel component.\n * @template T - The type of the selected date.\n */\nexport interface DatePickerSinglePanelProps<T>\n  extends ComponentPropsWithoutRef<\"div\"> {\n  /**\n   * Callback fired when a date is selected.\n   * @param event - The synthetic event.\n   * @param selectedDate - The selected date or null.\n   */\n  onSelect?: (event: SyntheticEvent, selectedDate?: T | null) => void;\n\n  /**\n   * Helper text to be displayed below the date picker.\n   */\n  helperText?: string;\n\n  /**\n   * The currently visible month.\n   */\n  visibleMonth?: DateValue;\n\n  /**\n   * The default visible month.\n   */\n  defaultVisibleMonth?: DateValue;\n\n  /**\n   * Callback fired when the visible month changes.\n   * @param event - The synthetic event.\n   * @param visibleMonth - The new visible month.\n   */\n  onVisibleMonthChange?: (\n    event: SyntheticEvent,\n    visibleMonth: DateValue,\n  ) => void;\n\n  /**\n   * Props to be passed to the Calendar component.\n   */\n  CalendarProps?: Partial<\n    Omit<\n      CalendarSingleProps,\n      | \"selectionVariant\"\n      | \"selectedDate\"\n      | \"defaultSelectedDate\"\n      | \"onSelectedDateChange\"\n      | \"onVisibleMonthChange\"\n    >\n  >;\n  /**\n   * Props to be passed to the CalendarNavigation component.\n   */\n  CalendarNavigationProps?: CalendarNavigationProps;\n  /**\n   * Props to be passed to the CalendarWeekHeader component.\n   */\n  CalendarWeekHeaderProps?: CalendarWeekHeaderProps;\n  /**\n   * Props to be passed to the CalendarDataGrid component.\n   */\n  CalendarDataGridProps?: CalendarDateGridProps;\n}\n\nconst withBaseName = makePrefixer(\"saltDatePickerPanel\");\n\nexport const DatePickerSinglePanel = forwardRef<\n  HTMLDivElement,\n  DatePickerSinglePanelProps<SingleDateSelection>\n>(function DatePickerSinglePanel(props, ref) {\n  const {\n    CalendarProps,\n    CalendarWeekHeaderProps,\n    CalendarNavigationProps,\n    CalendarDataGridProps,\n    className,\n    defaultVisibleMonth,\n    visibleMonth: visibleMonthProp,\n    onVisibleMonthChange,\n    helperText,\n    onSelect,\n    ...rest\n  } = props;\n\n  const targetWindow = useWindow();\n  useComponentCssInjection({\n    testId: \"salt-date-picker-single-panel\",\n    css: datePickerPanelCss,\n    window: targetWindow,\n  });\n\n  const {\n    state: {\n      selectedDate,\n      timeZone = getLocalTimeZone(),\n      minDate = startOfMonth(today(timeZone)),\n      maxDate = minDate.add({ months: 1 }),\n      locale = getCurrentLocale(),\n    },\n    helpers: { setSelectedDate },\n  } = useDatePickerContext({ selectionVariant: \"single\" });\n\n  const [hoveredDate, setHoveredDate] = useState<DateValue | null>(null);\n\n  const [uncontrolledDefaultVisibleMonth] = useState(\n    () => defaultVisibleMonth || startOfMonth(selectedDate || today(timeZone)),\n  );\n  const [visibleMonth, setVisibleMonth] = useControlled({\n    controlled: visibleMonthProp,\n    default: uncontrolledDefaultVisibleMonth,\n    name: \"DatePickerSinglePanel\",\n    state: \"visibleMonth\",\n  });\n\n  const handleSelectedDateChange = useCallback(\n    (event: SyntheticEvent, newDate: SingleDateSelection | null) => {\n      setSelectedDate(newDate, false);\n      onSelect?.(event, newDate);\n    },\n    [setSelectedDate, onSelect],\n  );\n\n  const handleHoveredDateChange = useCallback(\n    (event: SyntheticEvent, newHoveredDate: SingleDateSelection | null) => {\n      setHoveredDate(newHoveredDate);\n      if (newHoveredDate && CalendarProps?.onHoveredDateChange) {\n        CalendarProps.onHoveredDateChange(event, newHoveredDate);\n      }\n    },\n    [CalendarProps?.onHoveredDateChange],\n  );\n\n  const handleVisibleMonthChange = useCallback(\n    (event: SyntheticEvent, newVisibleMonth: DateValue) => {\n      setVisibleMonth(newVisibleMonth);\n      if (onVisibleMonthChange) {\n        onVisibleMonthChange(event, newVisibleMonth);\n      }\n    },\n    [onVisibleMonthChange],\n  );\n\n  const baseCalendarProps: Partial<CalendarSingleProps> = {\n    selectionVariant: \"single\",\n    visibleMonth,\n    hoveredDate,\n    onHoveredDateChange: handleHoveredDateChange,\n    onVisibleMonthChange: handleVisibleMonthChange,\n    onSelectedDateChange: handleSelectedDateChange,\n    hideOutOfRangeDates: true,\n    selectedDate,\n    minDate,\n    maxDate,\n    locale,\n    timeZone,\n    ...CalendarProps,\n  };\n\n  return (\n    <StackLayout\n      separators\n      gap={0}\n      className={clsx(className, withBaseName(\"container\"))}\n      ref={ref}\n      {...rest}\n    >\n      {helperText && (\n        <FlexItem className={withBaseName(\"header\")}>\n          <FormFieldHelperText>{helperText}</FormFieldHelperText>\n        </FlexItem>\n      )}\n      <FlexLayout gap={0}>\n        {/* Avoid Dropdowns in Calendar inheriting the FormField's state */}\n        <FormFieldContext.Provider value={{} as FormFieldContextValue}>\n          <Calendar selectionVariant=\"single\" {...baseCalendarProps}>\n            <CalendarNavigation {...CalendarNavigationProps} />\n            <CalendarWeekHeader {...CalendarWeekHeaderProps} />\n            <CalendarDateGrid {...CalendarDataGridProps} />\n          </Calendar>\n        </FormFieldContext.Provider>\n      </FlexLayout>\n    </StackLayout>\n  );\n});\n"],"names":["makePrefixer","forwardRef","DatePickerSinglePanel","useWindow","useComponentCssInjection","datePickerPanelCss","getLocalTimeZone","startOfMonth","today","getCurrentLocale","useDatePickerContext","useState","useControlled","useCallback","jsxs","StackLayout","clsx","jsx","FlexItem","FormFieldHelperText","FlexLayout","FormFieldContext","Calendar","CalendarNavigation","CalendarWeekHeader","CalendarDateGrid"],"mappings":"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"}