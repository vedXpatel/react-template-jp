'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var DatePickerContext = require('./DatePickerContext.js');
var DatePickerOverlayProvider = require('./DatePickerOverlayProvider.js');
var useDatePicker = require('./useDatePicker.js');

const DatePickerMain = react.forwardRef(
  function DatePickerMain2(props, ref) {
    var _a, _b;
    const {
      children,
      readOnly,
      disabled,
      selectionVariant,
      defaultSelectedDate,
      selectedDate,
      onSelectedDateChange,
      onApply,
      minDate,
      maxDate,
      timeZone,
      locale,
      onCancel,
      ...rest
    } = props;
    const useDatePickerProps = {
      readOnly,
      disabled,
      selectionVariant,
      defaultSelectedDate,
      selectedDate,
      onSelectedDateChange,
      onApply,
      minDate,
      maxDate,
      timeZone,
      locale,
      onCancel
    };
    if (props.selectionVariant === "range") {
      const stateAndHelpers2 = useDatePicker.useDatePicker(
        useDatePickerProps,
        ref
      );
      return /* @__PURE__ */ jsxRuntime.jsx(DatePickerContext.DateRangeSelectionContext.Provider, {
        value: stateAndHelpers2,
        children: /* @__PURE__ */ jsxRuntime.jsx("div", {
          ref: (_a = stateAndHelpers2 == null ? void 0 : stateAndHelpers2.state) == null ? void 0 : _a.containerRef,
          ...rest,
          children
        })
      });
    }
    const stateAndHelpers = useDatePicker.useDatePicker(
      useDatePickerProps,
      ref
    );
    return /* @__PURE__ */ jsxRuntime.jsx(DatePickerContext.SingleDateSelectionContext.Provider, {
      value: stateAndHelpers,
      children: /* @__PURE__ */ jsxRuntime.jsx("div", {
        ref: (_b = stateAndHelpers == null ? void 0 : stateAndHelpers.state) == null ? void 0 : _b.containerRef,
        ...rest,
        children
      })
    });
  }
);
const DatePicker = react.forwardRef(
  function DatePicker2(props, ref) {
    const { open, defaultOpen, ...rest } = props;
    return /* @__PURE__ */ jsxRuntime.jsx(DatePickerOverlayProvider.DatePickerOverlayProvider, {
      open,
      defaultOpen,
      children: /* @__PURE__ */ jsxRuntime.jsx(DatePickerMain, {
        ...rest,
        ref
      })
    });
  }
);

exports.DatePicker = DatePicker;
exports.DatePickerMain = DatePickerMain;
//# sourceMappingURL=DatePicker.js.map
