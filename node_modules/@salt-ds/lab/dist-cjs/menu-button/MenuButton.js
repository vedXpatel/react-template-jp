'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var react = require('react');
var CascadingMenu = require('../cascading-menu/CascadingMenu.js');
var MenuButtonTrigger = require('./MenuButtonTrigger.js');
var MenuButton$1 = require('./MenuButton.css.js');

const MenuButton = react.forwardRef(
  function MenuButton2({ variant = "secondary", CascadingMenuProps = {}, children, ...restProps }, ref) {
    const {
      initialSource = { menuItems: [] },
      onOpen,
      onClose,
      ...restMenuProps
    } = CascadingMenuProps;
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-menu-button",
      css: MenuButton$1,
      window: targetWindow
    });
    const [isMenuOpen, setMenuOpen] = react.useState(false);
    const handleOpen = react.useCallback(() => {
      setMenuOpen(true);
      onOpen == null ? void 0 : onOpen();
    }, [onOpen]);
    const handleClose = react.useCallback(() => {
      setMenuOpen(false);
      onClose == null ? void 0 : onClose();
    }, [onClose]);
    return /* @__PURE__ */ jsxRuntime.jsx(CascadingMenu.CascadingMenu, {
      initialSource,
      onClose: handleClose,
      onOpen: handleOpen,
      ...restMenuProps,
      children: /* @__PURE__ */ jsxRuntime.jsx(MenuButtonTrigger.MenuButtonTrigger, {
        "aria-expanded": isMenuOpen,
        "aria-haspopup": true,
        isMenuOpen,
        ref,
        variant,
        ...restProps,
        children
      })
    });
  }
);

exports.MenuButton = MenuButton;
//# sourceMappingURL=MenuButton.js.map
