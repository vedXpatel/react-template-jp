'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var react = require('react');
var ReactDOM = require('react-dom');

function getContainer(container) {
  return typeof container === "function" ? container() : container;
}
const DEFAULT_ID = "portal-root";
const Portal = react.forwardRef(function Portal2({
  children,
  container: containerProp = document.body,
  disablePortal = false,
  id = DEFAULT_ID
}, ref) {
  var _a;
  const [mounted, setMounted] = react.useState(false);
  const portalRef = react.useRef(null);
  const handleRef = core.useForkRef(core.getRefFromChildren(children), ref);
  const container = (_a = getContainer(containerProp)) != null ? _a : document.body;
  core.useIsomorphicLayoutEffect(() => {
    const root = core.ownerDocument(container).getElementById(id);
    if (root) {
      portalRef.current = root;
    } else {
      portalRef.current = core.ownerDocument(container).createElement("div");
      portalRef.current.id = id;
    }
    const el = portalRef.current;
    if (!container.contains(el)) {
      container.appendChild(el);
    }
    setMounted(true);
  }, [id, container]);
  if (disablePortal) {
    if (react.isValidElement(children)) {
      return react.cloneElement(children, {
        ref: handleRef
      });
    }
    return /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, {
      children
    });
  }
  if (mounted && portalRef.current && children) {
    return ReactDOM.createPortal(
      /* @__PURE__ */ jsxRuntime.jsx(core.SaltProvider, {
        children
      }),
      portalRef.current
    );
  }
  return null;
});

exports.Portal = Portal;
//# sourceMappingURL=Portal.js.map
