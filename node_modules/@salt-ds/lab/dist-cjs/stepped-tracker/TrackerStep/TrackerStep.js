'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var react = require('react');
var TrackerConnector = require('../TrackerConnector/TrackerConnector.js');
var SteppedTrackerContext = require('../SteppedTrackerContext.js');
var TrackerStep$1 = require('./TrackerStep.css.js');

const withBaseName = core.makePrefixer("saltTrackerStep");
const useCheckWithinSteppedTracker = (isWithinSteppedTracker) => {
  react.useEffect(() => {
    if (process.env.NODE_ENV !== "production") {
      if (!isWithinSteppedTracker) {
        console.error(
          "The TrackerStep component must be placed within a SteppedTracker component"
        );
      }
    }
  }, [isWithinSteppedTracker]);
};
const parseIconName = ({
  stage,
  status,
  active
}) => {
  if (stage === "completed")
    return "completed";
  if (active)
    return "active";
  if (status)
    return status;
  return stage;
};
const TrackerStep = react.forwardRef(
  function TrackerStep2(props, ref) {
    const {
      stage = "pending",
      status,
      style,
      className,
      children,
      ...restProps
    } = props;
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-tracker-step",
      css: TrackerStep$1,
      window: targetWindow
    });
    const { ErrorIcon, WarningIcon, CompletedIcon, ActiveIcon, PendingIcon } = core.useIcon();
    const { activeStep, totalSteps, isWithinSteppedTracker } = SteppedTrackerContext.useSteppedTrackerContext();
    const stepNumber = SteppedTrackerContext.useTrackerStepContext();
    useCheckWithinSteppedTracker(isWithinSteppedTracker);
    const isActive = activeStep === stepNumber;
    const iconName = parseIconName({ stage, status, active: isActive });
    const iconMap = {
      pending: PendingIcon,
      active: ActiveIcon,
      completed: CompletedIcon,
      warning: WarningIcon,
      error: ErrorIcon
    };
    const Icon = iconMap[iconName];
    const connectorState = activeStep > stepNumber ? "active" : "default";
    const hasConnector = stepNumber < totalSteps - 1;
    const innerStyle = {
      ...style,
      "--saltTrackerStep-width": `${100 / totalSteps}%`
    };
    return /* @__PURE__ */ jsxRuntime.jsxs("li", {
      className: clsx.clsx(
        withBaseName(),
        withBaseName(`stage-${stage}`),
        withBaseName(`status-${status}`),
        { [withBaseName("active")]: isActive },
        className
      ),
      style: innerStyle,
      "aria-current": isActive ? "step" : void 0,
      ref,
      ...restProps,
      children: [
        /* @__PURE__ */ jsxRuntime.jsx(Icon, {}),
        hasConnector && /* @__PURE__ */ jsxRuntime.jsx(TrackerConnector.TrackerConnector, {
          state: connectorState
        }),
        /* @__PURE__ */ jsxRuntime.jsx("div", {
          className: withBaseName("body"),
          children
        })
      ]
    });
  }
);

exports.TrackerStep = TrackerStep;
//# sourceMappingURL=TrackerStep.js.map
