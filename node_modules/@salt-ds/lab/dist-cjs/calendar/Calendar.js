'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var clsx = require('clsx');
var react = require('react');
var CalendarContext = require('./internal/CalendarContext.js');
var useCalendar = require('./useCalendar.js');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var date = require('@internationalized/date');
var Calendar$1 = require('./Calendar.css.js');

const withBaseName = core.makePrefixer("saltCalendar");
const Calendar = react.forwardRef(
  function Calendar2(props, ref) {
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-calendar",
      css: Calendar$1,
      window: targetWindow
    });
    const {
      children,
      className,
      selectedDate,
      defaultSelectedDate,
      visibleMonth: visibleMonthProp,
      timeZone,
      locale,
      defaultVisibleMonth,
      onSelectedDateChange,
      onVisibleMonthChange,
      hideOutOfRangeDates,
      isDayUnselectable,
      isDayHighlighted,
      isDayDisabled,
      minDate,
      maxDate,
      selectionVariant,
      onHoveredDateChange,
      hoveredDate,
      ...propsRest
    } = props;
    let startDateOffset;
    let endDateOffset;
    let rest;
    if (selectionVariant === "offset") {
      ({ startDateOffset, endDateOffset, ...rest } = propsRest);
    } else {
      rest = propsRest;
    }
    const useCalendarProps = {
      selectedDate,
      defaultSelectedDate,
      visibleMonth: visibleMonthProp,
      timeZone,
      locale,
      defaultVisibleMonth,
      onSelectedDateChange,
      onVisibleMonthChange,
      isDayUnselectable,
      isDayHighlighted,
      isDayDisabled,
      minDate,
      maxDate,
      selectionVariant,
      onHoveredDateChange,
      hideOutOfRangeDates,
      hoveredDate,
      startDateOffset,
      endDateOffset
    };
    const { state, helpers } = useCalendar.useCalendar(useCalendarProps);
    const calendarLabel = new date.DateFormatter(state.locale, {
      month: "long",
      year: "numeric"
    }).format(state.visibleMonth.toDate(state.timeZone));
    return /* @__PURE__ */ jsxRuntime.jsx(CalendarContext.CalendarContext.Provider, {
      value: {
        state,
        helpers
      },
      children: /* @__PURE__ */ jsxRuntime.jsx("div", {
        className: clsx.clsx(withBaseName(), className),
        role: "application",
        "aria-label": calendarLabel,
        ref,
        ...rest,
        children
      })
    });
  }
);

exports.Calendar = Calendar;
//# sourceMappingURL=Calendar.js.map
