'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var date = require('@internationalized/date');
var core = require('@salt-ds/core');
var react = require('react');
var CalendarContext = require('./internal/CalendarContext.js');
var CalendarMonth = require('./internal/CalendarMonth.js');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var CalendarDateGrid$1 = require('./CalendarDateGrid.css.js');
var utils = require('./internal/utils.js');

function getMonths(month) {
  return [month.subtract({ months: 1 }), month, month.add({ months: 1 })];
}
const withBaseName = core.makePrefixer("saltCalendarDateGrid");
const CalendarDateGrid = react.forwardRef(function CalendarDateGrid2(props, ref) {
  const {
    onFocus,
    onBlur,
    getCalendarMonthProps = () => void 0,
    ...rest
  } = props;
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-calendar-date-grid",
    css: CalendarDateGrid$1,
    window: targetWindow
  });
  const {
    state: { visibleMonth, locale },
    helpers: { setCalendarFocused }
  } = CalendarContext.useCalendarContext();
  const containerRef = react.useRef(null);
  const diffIndex = (a, b) => utils.monthDiff(a, b);
  const { current: baseIndex } = react.useRef(visibleMonth);
  core.useIsomorphicLayoutEffect(() => {
    if (containerRef.current) {
      containerRef.current.style.transform = `translate3d(${diffIndex(baseIndex, visibleMonth) * -101}%, 0, 0)`;
    }
  });
  const [months, setMonths] = react.useState(() => getMonths(visibleMonth));
  react.useEffect(() => {
    setMonths((oldMonths) => {
      const newMonths = getMonths(visibleMonth).filter((month) => {
        return !oldMonths.find((oldMonth) => date.isSameMonth(oldMonth, month));
      });
      return oldMonths.concat(newMonths);
    });
    setMonths(getMonths(visibleMonth));
    return void 0;
  }, [utils.formatDate(visibleMonth, locale)]);
  const handleFocus = react.useCallback(
    (event) => {
      setCalendarFocused(true);
      onFocus == null ? void 0 : onFocus(event);
    },
    [setCalendarFocused, onFocus]
  );
  const handleBlur = react.useCallback(
    (event) => {
      setCalendarFocused(false);
      onBlur == null ? void 0 : onBlur(event);
    },
    [setCalendarFocused, onBlur]
  );
  return /* @__PURE__ */ jsxRuntime.jsx("div", {
    className: withBaseName(),
    tabIndex: -1,
    style: {
      overflowX: "hidden",
      position: "relative"
    },
    ref,
    children: /* @__PURE__ */ jsxRuntime.jsx("div", {
      className: withBaseName("grid"),
      ref: containerRef,
      onBlur: handleBlur,
      onFocus: handleFocus,
      ...rest,
      children: months.map((date, index) => /* @__PURE__ */ jsxRuntime.jsx("div", {
        className: withBaseName("slide"),
        style: {
          transform: `translateX(${diffIndex(date, baseIndex) * -101}%)`
        },
        "aria-hidden": index !== 1 ? "true" : void 0,
        children: /* @__PURE__ */ jsxRuntime.jsx(CalendarMonth.CalendarMonth, {
          ...getCalendarMonthProps(date),
          date
        })
      }, utils.formatDate(date, locale)))
    })
  });
});

exports.CalendarDateGrid = CalendarDateGrid;
//# sourceMappingURL=CalendarDateGrid.js.map
