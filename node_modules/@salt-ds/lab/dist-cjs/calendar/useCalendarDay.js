'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var date = require('@internationalized/date');
var react = require('react');
var CalendarContext = require('./internal/CalendarContext.js');
var useFocusManagement = require('./internal/useFocusManagement.js');
var useCalendarSelection = require('./useCalendarSelection.js');

function useCalendarDay({ date: date$1, month }, ref) {
  const {
    state: {
      focusedDate,
      hideOutOfRangeDates,
      calendarFocused,
      locale,
      timeZone
    },
    helpers: {
      isDayUnselectable,
      isDaySelectable,
      isDayHighlighted,
      isDayDisabled,
      isOutsideAllowedMonths
    }
  } = CalendarContext.useCalendarContext();
  const selectionManager = useCalendarSelection.useCalendarSelectionDay({ date: date$1 });
  const focusManager = useFocusManagement.useFocusManagement({ date: date$1, locale });
  const handleClick = (event) => {
    selectionManager == null ? void 0 : selectionManager.handleClick(event);
    focusManager.handleClick(event);
  };
  const handleKeyDown = (event) => {
    focusManager.handleKeyDown(event);
    selectionManager == null ? void 0 : selectionManager.handleKeyDown(event);
  };
  const handleFocus = (event) => {
    focusManager.handleFocus(event);
  };
  const handleMouseOver = (event) => {
    var _a;
    (_a = selectionManager.handleMouseOver) == null ? void 0 : _a.call(selectionManager, event);
  };
  const eventHandlers = {
    onClick: handleClick,
    onKeyDown: handleKeyDown,
    onFocus: handleFocus,
    onMouseOver: handleMouseOver
  };
  const outOfRange = !date.isSameMonth(date$1, month);
  const focused = focusedDate && date.isSameDay(date$1, focusedDate) && calendarFocused && !outOfRange;
  const tabIndex = focusedDate && date.isSameDay(date$1, focusedDate) && !outOfRange ? 0 : -1;
  const today = date.isToday(date$1, timeZone);
  const unselectableReason = isDayUnselectable(date$1) || isDayDisabled(date$1);
  const highlightedReason = isDayHighlighted(date$1);
  const disabled = isDayDisabled(date$1) || outOfRange && isOutsideAllowedMonths(date$1) || isDaySelectable && !isDaySelectable(date$1);
  const unselectable = Boolean(unselectableReason);
  const highlighted = Boolean(highlightedReason);
  const hidden = hideOutOfRangeDates && outOfRange;
  react.useEffect(() => {
    var _a;
    if (focused) {
      (_a = ref.current) == null ? void 0 : _a.focus({ preventScroll: true });
    }
  }, [ref, focused]);
  return {
    status: {
      outOfRange,
      today,
      unselectable,
      focused,
      hidden,
      disabled,
      highlighted,
      ...selectionManager.status
    },
    dayProps: {
      tabIndex,
      "aria-current": today ? "date" : void 0,
      "aria-hidden": hidden ? "true" : void 0,
      ...eventHandlers,
      ...selectionManager.dayProps
    },
    unselectableReason,
    highlightedReason,
    locale,
    timeZone
  };
}

exports.useCalendarDay = useCalendarDay;
//# sourceMappingURL=useCalendarDay.js.map
