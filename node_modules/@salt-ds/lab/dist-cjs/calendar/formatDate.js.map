{"version":3,"file":"formatDate.js","sources":["../src/calendar/formatDate.ts"],"sourcesContent":["import {\n  DateFormatter,\n  type DateValue,\n  getLocalTimeZone,\n} from \"@internationalized/date\";\n\n/**\n * Gets the current locale from the browser.\n * @returns The current locale as a string.\n */\nexport function getCurrentLocale() {\n  return navigator.languages[0];\n}\n\n/**\n * Default options for date formatting.\n */\nconst defaultFormatOptions: Intl.DateTimeFormatOptions = {\n  day: \"2-digit\",\n  month: \"short\",\n  year: \"numeric\",\n};\n\n/**\n * Formats a date value according to the specified locale and options.\n * @param date - The date value to format.\n * @param locale - The locale to use for formatting. Defaults to the current locale.\n * @param options - Additional options for date formatting.\n * @returns The formatted date as a string.\n */\nexport function formatDate(\n  date: DateValue | null,\n  locale?: string,\n  options?: Intl.DateTimeFormatOptions,\n) {\n  if (!date) {\n    return \"\";\n  }\n  const timeLocale = locale || getCurrentLocale();\n  const timeZone = options?.timeZone || getLocalTimeZone();\n\n  const formatter = new DateFormatter(timeLocale, {\n    ...defaultFormatOptions,\n    ...options,\n  });\n\n  const formattedDate = formatter.formatToParts(date.toDate(timeZone));\n\n  // Determine the separator based on the provided options\n  const isNumericFormat =\n    options?.month === \"numeric\" || defaultFormatOptions.month === \"numeric\";\n  const separator = isNumericFormat ? \"/\" : \" \";\n\n  // Some locales (USA) added commas, so construct the final date ourselves from formatter parts\n  const parts = [];\n  if (options?.day !== undefined || defaultFormatOptions.day !== undefined) {\n    const day = formattedDate.find(\n      (part: Intl.DateTimeFormatPart) => part.type === \"day\",\n    )?.value;\n    if (day) parts.push(day);\n  }\n  if (\n    options?.month !== undefined ||\n    defaultFormatOptions.month !== undefined\n  ) {\n    const month = formattedDate.find(\n      (part: Intl.DateTimeFormatPart) => part.type === \"month\",\n    )?.value;\n    if (month) parts.push(month);\n  }\n  if (options?.year !== undefined || defaultFormatOptions.year !== undefined) {\n    const year = formattedDate.find(\n      (part: Intl.DateTimeFormatPart) => part.type === \"year\",\n    )?.value;\n    if (year) parts.push(year);\n  }\n\n  return parts.join(separator);\n}\n"],"names":["date","getLocalTimeZone","DateFormatter"],"mappings":"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"}