{"version":3,"file":"CalendarDay.js","sources":["../src/calendar/internal/CalendarDay.tsx"],"sourcesContent":["import type { DateValue } from \"@internationalized/date\";\nimport {\n  Tooltip,\n  type TooltipProps,\n  makePrefixer,\n  useForkRef,\n} from \"@salt-ds/core\";\nimport { useComponentCssInjection } from \"@salt-ds/styles\";\nimport { useWindow } from \"@salt-ds/window\";\nimport { clsx } from \"clsx\";\nimport {\n  type ComponentPropsWithRef,\n  type ReactElement,\n  forwardRef,\n  useRef,\n} from \"react\";\nimport { type DayStatus, useCalendarDay } from \"../useCalendarDay\";\nimport calendarDayCss from \"./CalendarDay.css\";\nimport { formatDate as defaultFormatDate } from \"./utils\";\n\nexport type DateFormatter = (day: Date) => string | undefined;\n\nexport interface CalendarDayProps\n  extends Omit<ComponentPropsWithRef<\"button\">, \"children\"> {\n  day: DateValue;\n  formatDate?: typeof defaultFormatDate;\n  renderDayContents?: (date: DateValue, status: DayStatus) => ReactElement;\n  status?: DayStatus;\n  month: DateValue;\n  TooltipProps?: Partial<TooltipProps>;\n}\n\nconst withBaseName = makePrefixer(\"saltCalendarDay\");\n\nexport const CalendarDay = forwardRef<HTMLButtonElement, CalendarDayProps>(\n  function CalendarDay(props, ref) {\n    const {\n      className,\n      day,\n      renderDayContents,\n      month,\n      TooltipProps,\n      formatDate: formatDateProp = defaultFormatDate,\n      ...rest\n    } = props;\n    const targetWindow = useWindow();\n    useComponentCssInjection({\n      testId: \"salt-calendar-day\",\n      css: calendarDayCss,\n      window: targetWindow,\n    });\n\n    const dayRef = useRef<HTMLButtonElement>(null);\n    const buttonRef = useForkRef(ref, dayRef);\n    const { status, dayProps, unselectableReason, highlightedReason, locale } =\n      useCalendarDay(\n        {\n          date: day,\n          month,\n        },\n        dayRef,\n      );\n    const { outOfRange, today, unselectable, highlighted, hidden, disabled } =\n      status;\n\n    const buttonElement = (\n      <button\n        aria-label={formatDateProp(day, locale, {\n          day: \"2-digit\",\n          month: \"long\",\n          year: \"numeric\",\n        })}\n        disabled={disabled}\n        type=\"button\"\n        {...dayProps}\n        ref={buttonRef}\n        {...rest}\n        className={clsx(\n          withBaseName(),\n          {\n            [withBaseName(\"hidden\")]: hidden,\n            [withBaseName(\"outOfRange\")]: outOfRange,\n            [withBaseName(\"disabled\")]: disabled,\n            [withBaseName(\"unselectable\")]: !!unselectable,\n            [withBaseName(\"highlighted\")]: !!highlighted,\n          },\n          dayProps.className,\n          className,\n        )}\n      >\n        <span\n          className={clsx(withBaseName(\"content\"), {\n            [withBaseName(\"today\")]: today,\n          })}\n        >\n          {renderDayContents\n            ? renderDayContents(day, status)\n            : formatDateProp(day, locale, { day: \"numeric\" })}\n        </span>\n      </button>\n    );\n    const hasTooltip = unselectableReason || highlightedReason;\n    if (!hasTooltip) {\n      return buttonElement;\n    }\n    return (\n      <Tooltip\n        hideIcon\n        status={unselectableReason ? \"error\" : \"info\"}\n        content={\n          unselectableReason || highlightedReason || \"Date is out of range\"\n        }\n        placement=\"top\"\n        enterDelay={0} // --salt-duration-instant\n        leaveDelay={0} // --salt-duration-instant\n        {...TooltipProps}\n      >\n        {buttonElement}\n      </Tooltip>\n    );\n  },\n);\n"],"names":["makePrefixer","forwardRef","CalendarDay","defaultFormatDate","useWindow","useComponentCssInjection","calendarDayCss","useRef","useForkRef","useCalendarDay","jsx","clsx","Tooltip"],"mappings":";;;;;;;;;;;;;;AAgCA,MAAM,YAAA,GAAeA,kBAAa,iBAAiB,CAAA,CAAA;AAE5C,MAAM,WAAc,GAAAC,gBAAA;AAAA,EACzB,SAASC,YAAY,CAAA,KAAA,EAAO,GAAK,EAAA;AAC/B,IAAM,MAAA;AAAA,MACJ,SAAA;AAAA,MACA,GAAA;AAAA,MACA,iBAAA;AAAA,MACA,KAAA;AAAA,MACA,YAAA;AAAA,MACA,YAAY,cAAiB,GAAAC,gBAAA;AAAA,MAC1B,GAAA,IAAA;AAAA,KACD,GAAA,KAAA,CAAA;AACJ,IAAA,MAAM,eAAeC,gBAAU,EAAA,CAAA;AAC/B,IAAyBC,+BAAA,CAAA;AAAA,MACvB,MAAQ,EAAA,mBAAA;AAAA,MACR,GAAK,EAAAC,aAAA;AAAA,MACL,MAAQ,EAAA,YAAA;AAAA,KACT,CAAA,CAAA;AAED,IAAM,MAAA,MAAA,GAASC,aAA0B,IAAI,CAAA,CAAA;AAC7C,IAAM,MAAA,SAAA,GAAYC,eAAW,CAAA,GAAA,EAAK,MAAM,CAAA,CAAA;AACxC,IAAA,MAAM,EAAE,MAAQ,EAAA,QAAA,EAAU,kBAAoB,EAAA,iBAAA,EAAmB,QAC/D,GAAAC,6BAAA;AAAA,MACE;AAAA,QACE,IAAM,EAAA,GAAA;AAAA,QACN,KAAA;AAAA,OACF;AAAA,MACA,MAAA;AAAA,KACF,CAAA;AACF,IAAA,MAAM,EAAE,UAAY,EAAA,KAAA,EAAO,cAAc,WAAa,EAAA,MAAA,EAAQ,UAC5D,GAAA,MAAA,CAAA;AAEF,IAAA,MAAM,gCACHC,cAAA,CAAA,QAAA,EAAA;AAAA,MACC,YAAA,EAAY,cAAe,CAAA,GAAA,EAAK,MAAQ,EAAA;AAAA,QACtC,GAAK,EAAA,SAAA;AAAA,QACL,KAAO,EAAA,MAAA;AAAA,QACP,IAAM,EAAA,SAAA;AAAA,OACP,CAAA;AAAA,MACD,QAAA;AAAA,MACA,IAAK,EAAA,QAAA;AAAA,MACJ,GAAG,QAAA;AAAA,MACJ,GAAK,EAAA,SAAA;AAAA,MACJ,GAAG,IAAA;AAAA,MACJ,SAAW,EAAAC,SAAA;AAAA,QACT,YAAa,EAAA;AAAA,QACb;AAAA,UACE,CAAC,YAAa,CAAA,QAAQ,CAAI,GAAA,MAAA;AAAA,UAC1B,CAAC,YAAa,CAAA,YAAY,CAAI,GAAA,UAAA;AAAA,UAC9B,CAAC,YAAa,CAAA,UAAU,CAAI,GAAA,QAAA;AAAA,UAC5B,CAAC,YAAA,CAAa,cAAc,CAAA,GAAI,CAAC,CAAC,YAAA;AAAA,UAClC,CAAC,YAAA,CAAa,aAAa,CAAA,GAAI,CAAC,CAAC,WAAA;AAAA,SACnC;AAAA,QACA,QAAS,CAAA,SAAA;AAAA,QACT,SAAA;AAAA,OACF;AAAA,MAEA,QAAC,kBAAAD,cAAA,CAAA,MAAA,EAAA;AAAA,QACC,SAAW,EAAAC,SAAA,CAAK,YAAa,CAAA,SAAS,CAAG,EAAA;AAAA,UACvC,CAAC,YAAa,CAAA,OAAO,CAAI,GAAA,KAAA;AAAA,SAC1B,CAAA;AAAA,QAEA,QAAA,EAAA,iBAAA,GACG,iBAAkB,CAAA,GAAA,EAAK,MAAM,CAAA,GAC7B,cAAe,CAAA,GAAA,EAAK,MAAQ,EAAA,EAAE,GAAK,EAAA,SAAA,EAAW,CAAA;AAAA,OACpD,CAAA;AAAA,KACF,CAAA,CAAA;AAEF,IAAA,MAAM,aAAa,kBAAsB,IAAA,iBAAA,CAAA;AACzC,IAAA,IAAI,CAAC,UAAY,EAAA;AACf,MAAO,OAAA,aAAA,CAAA;AAAA,KACT;AACA,IAAA,uBACGD,cAAA,CAAAE,YAAA,EAAA;AAAA,MACC,QAAQ,EAAA,IAAA;AAAA,MACR,MAAA,EAAQ,qBAAqB,OAAU,GAAA,MAAA;AAAA,MACvC,OAAA,EACE,sBAAsB,iBAAqB,IAAA,sBAAA;AAAA,MAE7C,SAAU,EAAA,KAAA;AAAA,MACV,UAAY,EAAA,CAAA;AAAA,MACZ,UAAY,EAAA,CAAA;AAAA,MACX,GAAG,YAAA;AAAA,MAEH,QAAA,EAAA,aAAA;AAAA,KACH,CAAA,CAAA;AAAA,GAEJ;AACF;;;;"}