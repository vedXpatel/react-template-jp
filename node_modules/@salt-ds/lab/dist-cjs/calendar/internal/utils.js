'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var date = require('@internationalized/date');
var formatDate$1 = require('../formatDate.js');

function formatDate(date$1, locale, options) {
  const timeLocale = locale || formatDate$1.getCurrentLocale();
  const timeZone = (options == null ? void 0 : options.timeZone) || date.getLocalTimeZone();
  const formatter = new date.DateFormatter(timeLocale, options);
  return formatter.format(date$1.toDate(timeZone));
}
function getCalendar(locale) {
  const calendarIdentifier = new date.DateFormatter(locale).resolvedOptions().calendar;
  return date.createCalendar(calendarIdentifier);
}
function daysForLocale(weekday, locale) {
  return [...Array(7).keys()].map(
    (day) => formatDate(
      date.startOfWeek(date.today(date.getLocalTimeZone()), locale).add({
        days: day
      }),
      locale,
      { weekday: weekday || "long" }
    )
  );
}
function monthsForLocale(currentYear, locale) {
  const calendar = getCalendar(locale);
  return [...Array(calendar.getMonthsInYear(currentYear)).keys()].map(
    (month) => date.startOfYear(currentYear).add({ months: month })
  );
}
function mapDate(currentDate, currentMonth) {
  return {
    date: currentDate,
    dateOfMonth: currentDate.month,
    isCurrentMonth: date.isSameMonth(currentDate, currentMonth)
  };
}
function generateVisibleDays(currentMonth, locale) {
  const totalDays = 6 * 7;
  const startDate = date.startOfWeek(date.startOfMonth(currentMonth), locale);
  return [...Array(totalDays).keys()].map((dayDelta) => {
    const day = startDate.add({ days: dayDelta });
    return mapDate(day, currentMonth);
  });
}
function monthDiff(a, b) {
  return b.month - a.month + 12 * (b.year - a.year);
}
function generateDatesForMonth(date$1) {
  const calendarDate = date.toCalendarDate(date$1);
  const startDate = date.startOfMonth(calendarDate);
  const endDate = date.endOfMonth(calendarDate);
  const dates = [];
  for (let currentDate = startDate; currentDate.compare(endDate) <= 0; currentDate = currentDate.add({ days: 1 })) {
    dates.push(currentDate);
  }
  return dates;
}

exports.daysForLocale = daysForLocale;
exports.formatDate = formatDate;
exports.generateDatesForMonth = generateDatesForMonth;
exports.generateVisibleDays = generateVisibleDays;
exports.getCalendar = getCalendar;
exports.monthDiff = monthDiff;
exports.monthsForLocale = monthsForLocale;
//# sourceMappingURL=utils.js.map
