{"version":3,"file":"useCalendar.js","sources":["../src/calendar/useCalendar.ts"],"sourcesContent":["import {\n  type DateValue,\n  endOfMonth,\n  endOfYear,\n  getLocalTimeZone,\n  isSameDay,\n  isSameMonth,\n  startOfMonth,\n  startOfYear,\n  today,\n} from \"@internationalized/date\";\nimport { useControlled } from \"@salt-ds/core\";\nimport {\n  type SyntheticEvent,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { getCurrentLocale } from \"./formatDate\";\nimport { generateDatesForMonth } from \"./internal/utils\";\nimport {\n  type UseCalendarSelectionMultiSelectProps,\n  type UseCalendarSelectionOffsetProps,\n  type UseCalendarSelectionProps,\n  type UseCalendarSelectionRangeProps,\n  type UseCalendarSelectionSingleProps,\n  isDateRangeSelection,\n  useCalendarSelection,\n} from \"./useCalendarSelection\";\n\n/**\n * Interface representing the base properties UseCalendar hook.\n */\ninterface UseCalendarBaseProps {\n  /**\n   * The default visible month.\n   */\n  defaultVisibleMonth?: DateValue;\n  /**\n   * Callback fired when the visible month changes.\n   * @param event - The synthetic event.\n   * @param visibleMonth - The new visible month.\n   */\n  onVisibleMonthChange?: (\n    event: SyntheticEvent,\n    visibleMonth: DateValue,\n  ) => void;\n  /**\n   * Function to determine if a day is unselectable.\n   * @param date - The date to check.\n   * @returns A string reason if the day is unselectable, otherwise `false` or `undefined`.\n   */\n  isDayUnselectable?: (date: DateValue) => string | false | undefined;\n  /**\n   * Function to determine if a day is highlighted.\n   * @param date - The date to check.\n   * @returns A string reason if the day is highlighted, otherwise `false` or `undefined`.\n   */\n  isDayHighlighted?: (date: DateValue) => string | false | undefined;\n  /**\n   * Function to determine if a day is disabled.\n   * @param date - The date to check.\n   * @returns A string reason if the day is disabled, otherwise `false` or `undefined`.\n   */\n  isDayDisabled?: (date: DateValue) => string | false | undefined;\n  /**\n   * The currently visible month.\n   */\n  visibleMonth?: DateValue;\n  /**\n   * If `true`, hides dates that are out of the selectable range.\n   */\n  hideOutOfRangeDates?: boolean;\n  /**\n   * The minimum selectable date.\n   */\n  minDate?: DateValue;\n  /**\n   * The maximum selectable date.\n   */\n  maxDate?: DateValue;\n  /**\n   * The time zone used for date calculations.\n   */\n  timeZone?: string;\n  /**\n   * The locale used for date formatting.\n   */\n  locale?: string;\n}\n\n/**\n * UseCalendar hook props for a single date selection Calendar.\n */\nexport interface UseCalendarSingleProps\n  extends UseCalendarSelectionSingleProps,\n    UseCalendarBaseProps {\n  /**\n   * The selection variant, set to \"single\".\n   */\n  selectionVariant: \"single\";\n}\n\n/**\n * UseCalendar hook props for a date range selection Calendar.\n */\nexport interface UseCalendarRangeProps\n  extends UseCalendarSelectionRangeProps,\n    UseCalendarBaseProps {\n  /**\n   * The selection variant, set to \"range\".\n   */\n  selectionVariant: \"range\";\n}\n\n/**\n * UseCalendar hook props for a multi-select Calendar.\n */\nexport interface UseCalendarMultiSelectProps\n  extends UseCalendarSelectionMultiSelectProps,\n    UseCalendarBaseProps {\n  /**\n   * The selection variant, set to \"multiselect\".\n   */\n  selectionVariant: \"multiselect\";\n}\n\n/**\n * UseCalendar hook props for an offset date selection Calendar.\n */\nexport interface UseCalendarOffsetProps\n  extends UseCalendarSelectionOffsetProps,\n    UseCalendarBaseProps {\n  /**\n   * The selection variant, set to \"offset\".\n   */\n  selectionVariant: \"offset\";\n}\n\n/**\n * UseCalendar hook props, wth the selection variant determining the return type of the date selection\n */\nexport type UseCalendarProps =\n  | UseCalendarSingleProps\n  | UseCalendarRangeProps\n  | UseCalendarMultiSelectProps\n  | UseCalendarOffsetProps;\n\n/**\n * Default function to determine if a day is unselectable.\n * @returns `false` indicating the day is selectable.\n */\nconst defaultIsDayUnselectable = (): string | false => false;\n\n/**\n * Default function to determine if a day is highlighted.\n * @returns `false` indicating the day is not highlighted.\n */\nconst defaultIsDayHighlighted = (): string | false => false;\n\n/**\n * Default function to determine if a day is disabled.\n * @returns `false` indicating the day is not disabled.\n */\nconst defaultIsDayDisabled = (): false => false;\n\nexport function useCalendar(props: UseCalendarProps) {\n  const {\n    selectedDate,\n    defaultSelectedDate,\n    visibleMonth: visibleMonthProp,\n    hideOutOfRangeDates,\n    timeZone = getLocalTimeZone(),\n    locale = getCurrentLocale(),\n    defaultVisibleMonth = today(timeZone),\n    onSelectedDateChange,\n    onVisibleMonthChange,\n    isDayUnselectable = defaultIsDayUnselectable,\n    isDayHighlighted = defaultIsDayHighlighted,\n    isDayDisabled = defaultIsDayDisabled,\n    minDate,\n    maxDate,\n    selectionVariant,\n    onHoveredDateChange,\n    hoveredDate,\n    // startDateOffset,\n    // endDateOffset,\n  } = props;\n  const [visibleMonth, setVisibleMonthState] = useControlled({\n    controlled: visibleMonthProp ? startOfMonth(visibleMonthProp) : undefined,\n    default: startOfMonth(defaultVisibleMonth),\n    name: \"Calendar\",\n    state: \"visibleMonth\",\n  });\n\n  const isOutsideAllowedDates = useCallback(\n    (date: DateValue) => {\n      return (\n        (minDate && date.compare(minDate) < 0) ||\n        (maxDate && date.compare(maxDate) > 0)\n      );\n    },\n    [maxDate, minDate],\n  );\n\n  const isOutsideAllowedMonths = useCallback(\n    (date: DateValue) => {\n      return (\n        (minDate && endOfMonth(date).compare(minDate) < 0) ||\n        (maxDate && startOfMonth(date).compare(maxDate) > 0)\n      );\n    },\n    [minDate, maxDate],\n  );\n\n  const isOutsideAllowedYears = useCallback(\n    (date: DateValue) => {\n      return (\n        (minDate && endOfYear(date).compare(minDate) < 0) ||\n        (maxDate && startOfYear(date).compare(maxDate) > 0)\n      );\n    },\n    [minDate, maxDate],\n  );\n\n  const isDaySelectable = useCallback(\n    (date?: DateValue) =>\n      !(\n        date &&\n        (isDayUnselectable(date) ||\n          isDayDisabled(date) ||\n          isOutsideAllowedDates(date))\n      ),\n    [isDayUnselectable, isDayDisabled, isOutsideAllowedDates],\n  );\n\n  const selectionManager = useCalendarSelection({\n    defaultSelectedDate: defaultSelectedDate,\n    selectedDate,\n    onSelectedDateChange,\n    startDateOffset:\n      props.selectionVariant === \"offset\" ? props.startDateOffset : undefined,\n    endDateOffset:\n      props.selectionVariant === \"offset\" ? props.endDateOffset : undefined,\n    isDaySelectable,\n    selectionVariant,\n    onHoveredDateChange,\n    hoveredDate,\n  } as UseCalendarSelectionProps);\n\n  const [calendarFocused, setCalendarFocused] = useState(false);\n\n  const isInVisibleMonth = useCallback(\n    (date: DateValue | undefined | null): date is DateValue =>\n      date != null && isSameMonth(date, visibleMonth),\n    [visibleMonth],\n  );\n\n  const getInitialFocusedDate = useCallback(() => {\n    const selectedDate = selectionManager.state.selectedDate;\n    if (\n      (selectionVariant === \"range\" || selectionVariant === \"offset\") &&\n      isDateRangeSelection(selectedDate)\n    ) {\n      if (isInVisibleMonth(selectedDate?.startDate)) {\n        return selectedDate.startDate;\n      }\n      if (isInVisibleMonth(selectedDate?.endDate)) {\n        return selectedDate.endDate;\n      }\n    } else if (\n      selectionVariant === \"multiselect\" &&\n      Array.isArray(selectedDate)\n    ) {\n      // return first selected day in visible month\n      const selectionInMonth = selectedDate\n        .filter((day) => isInVisibleMonth(day))\n        .sort((a, b) => a.compare(b));\n      if (selectionInMonth.length > 0) {\n        return selectionInMonth[0];\n      }\n    } else if (\n      selectionVariant === \"single\" &&\n      !isDateRangeSelection(selectedDate) &&\n      !Array.isArray(selectedDate) &&\n      isInVisibleMonth(selectedDate)\n    ) {\n      return selectedDate;\n    }\n    // Defaults\n    if (isDaySelectable(today(timeZone)) && isInVisibleMonth(today(timeZone))) {\n      return today(timeZone);\n    }\n    const firstSelectableDate = generateDatesForMonth(visibleMonth).find(\n      (visibleDay) => isDaySelectable(visibleDay),\n    );\n    if (firstSelectableDate) {\n      return firstSelectableDate;\n    }\n    return null;\n  }, [\n    isInVisibleMonth,\n    selectionVariant,\n    selectionManager.state.selectedDate,\n    timeZone,\n    visibleMonth,\n  ]);\n\n  const [focusedDate, setFocusedDateState] = useState<DateValue | null>(\n    getInitialFocusedDate,\n  );\n\n  const isDayVisible = useCallback(\n    (date: DateValue) => {\n      const startInsideDays = startOfMonth(visibleMonth);\n\n      if (date.compare(startInsideDays) < 0) return false;\n\n      const endInsideDays = endOfMonth(visibleMonth);\n\n      return !(date.compare(endInsideDays) > 0);\n    },\n    [visibleMonth],\n  );\n\n  const setVisibleMonth = useCallback(\n    (event: SyntheticEvent, newVisibleMonth: DateValue) => {\n      setVisibleMonthState(newVisibleMonth);\n      onVisibleMonthChange?.(event, newVisibleMonth);\n    },\n    [onVisibleMonthChange],\n  );\n\n  const setFocusedDate = useCallback(\n    (event: SyntheticEvent, date: DateValue) => {\n      if (\n        !focusedDate ||\n        isSameDay(date, focusedDate) ||\n        isOutsideAllowedDates(date)\n      )\n        return;\n\n      setFocusedDateState(date);\n\n      const shouldTransition =\n        !isDayVisible(date) &&\n        isDaySelectable(date) &&\n        !isOutsideAllowedDates(date);\n      if (shouldTransition) {\n        setVisibleMonth(event, startOfMonth(date));\n      }\n    },\n    [\n      focusedDate,\n      isDaySelectable,\n      isDayVisible,\n      isOutsideAllowedDates,\n      setVisibleMonth,\n    ],\n  );\n\n  useEffect(() => {\n    if (visibleMonth && focusedDate && !isDayVisible(focusedDate)) {\n      const focusableDate = getInitialFocusedDate();\n      if (focusableDate) {\n        setFocusedDateState(focusableDate);\n      }\n    }\n  }, [isDayVisible, focusedDate, getInitialFocusedDate, visibleMonth]);\n\n  return useMemo(\n    () => ({\n      state: {\n        visibleMonth,\n        focusedDate,\n        minDate,\n        maxDate,\n        selectionVariant,\n        hideOutOfRangeDates,\n        calendarFocused,\n        timeZone,\n        locale,\n        ...selectionManager.state,\n      },\n      helpers: {\n        setVisibleMonth,\n        setFocusedDate,\n        setCalendarFocused,\n        isDayUnselectable,\n        isDayHighlighted,\n        isDayDisabled,\n        isDayVisible,\n        isOutsideAllowedDates,\n        isOutsideAllowedMonths,\n        isOutsideAllowedYears,\n        ...selectionManager.helpers,\n      },\n    }),\n    [\n      visibleMonth,\n      focusedDate,\n      minDate,\n      maxDate,\n      selectionVariant,\n      hideOutOfRangeDates,\n      calendarFocused,\n      timeZone,\n      locale,\n      setVisibleMonth,\n      setFocusedDate,\n      isDayUnselectable,\n      isDayHighlighted,\n      isDayDisabled,\n      isDayVisible,\n      isOutsideAllowedDates,\n      isOutsideAllowedMonths,\n      isOutsideAllowedYears,\n      selectionManager,\n    ],\n  );\n}\n"],"names":["getLocalTimeZone","getCurrentLocale","today","useControlled","startOfMonth","useCallback","date","endOfMonth","endOfYear","startOfYear","useCalendarSelection","useState","isSameMonth","selectedDate","isDateRangeSelection","generateDatesForMonth","isSameDay","useEffect","useMemo"],"mappings":"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"}