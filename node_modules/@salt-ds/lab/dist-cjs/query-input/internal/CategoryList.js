'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var react = require('react');
require('../../list/Highlighter.js');
require('../../list/ListItem.js');
var List = require('../../list/List.js');
require('../../common-hooks/collectionProvider.js');
require('../../common-hooks/keyUtils.js');
require('../../responsive/useResizeObserver.js');
require('../../list/VirtualizedList.js');
var CategoryListContext = require('./CategoryListContext.js');
var CategoryListItem = require('./CategoryListItem.js');

const withBaseName = core.makePrefixer("saltCategoryList");
const getCategoryLabel = (category) => category.name;
function CategoryList(props) {
  const {
    categories,
    rootWidth,
    onCategorySelect,
    highlightedCategoryIndex,
    setHighlightedCategoryIndex
  } = props;
  const measureRef = react.useRef(null);
  const [measuredCategories, setMeasuredCategories] = react.useState([]);
  const [contextValue, setContextValue] = react.useState({
    width: 0
  });
  core.useIsomorphicLayoutEffect(() => {
    setTimeout(() => {
      if (measureRef.current) {
        const width = measureRef.current.offsetWidth;
        setMeasuredCategories(categories);
        setContextValue({
          width
        });
      }
    }, 0);
  }, [categories]);
  const onSelect = react.useCallback(
    (_, item) => {
      onCategorySelect(item);
    },
    [onCategorySelect]
  );
  const isMeasuring = measuredCategories !== categories;
  if (isMeasuring) {
    return /* @__PURE__ */ jsxRuntime.jsx("div", {
      ref: measureRef,
      className: withBaseName("categoryWidthMeasure"),
      children: categories.map((c) => {
        return /* @__PURE__ */ jsxRuntime.jsx("div", {
          className: withBaseName("category"),
          children: c.name
        }, c.name);
      })
    });
  }
  return /* @__PURE__ */ jsxRuntime.jsx(CategoryListContext.CategoryListContext.Provider, {
    value: contextValue,
    children: /* @__PURE__ */ jsxRuntime.jsx(List.List, {
      ListItem: CategoryListItem.CategoryListItem,
      "data-testid": "category-list",
      highlightedIndex: highlightedCategoryIndex,
      itemToString: getCategoryLabel,
      onHighlight: setHighlightedCategoryIndex,
      onSelect,
      source: categories,
      width: rootWidth
    })
  });
}

exports.CategoryList = CategoryList;
//# sourceMappingURL=CategoryList.js.map
