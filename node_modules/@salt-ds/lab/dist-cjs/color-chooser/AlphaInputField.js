'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var clsx = require('clsx');
var react = require('react');
var InputLegacy = require('../input-legacy/InputLegacy.js');
require('../input-legacy/StaticInputAdornment.js');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var RGBAInput = require('./RGBAInput.css.js');

const withBaseName = core.makePrefixer("saltColorChooser");
const AlphaInput = ({
  alphaValue,
  onSubmit,
  showAsOpacity = false
}) => {
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-rgba-input",
    css: RGBAInput,
    window: targetWindow
  });
  const [alphaInputValue, setAlphaInputValue] = react.useState(
    !Number.isNaN(alphaValue) ? alphaValue.toString() : ""
  );
  react.useEffect(() => {
    setAlphaInputValue(!Number.isNaN(alphaValue) ? alphaValue.toString() : "");
  }, [alphaValue]);
  const handleAlphaInputChange = (event, newValue) => {
    const value = newValue.replace("%", "");
    let alpha = value;
    if (value.trim() === "" || Number.isNaN(value)) {
      alpha = "";
    }
    if (showAsOpacity && Number.parseFloat(value)) {
      alpha = (Number.parseFloat(value) / 100).toString();
    }
    if (value.charAt(1) === "." || value.charAt(0) === ".") {
      alpha = value;
    }
    setAlphaInputValue(alpha);
  };
  const handleKeyDownAlpha = (e) => {
    if (e.key === "Enter") {
      const alpha = alphaInputValue.trim().replace("%", "") !== "" ? Number.parseFloat(alphaInputValue) : 0;
      const validatedAlpha = Math.max(0, Math.min(alpha, 1));
      setAlphaInputValue(validatedAlpha.toString());
      onSubmit(validatedAlpha);
    }
  };
  const handleOnBlurAlpha = (e) => {
    const alpha = alphaInputValue.trim() !== "" ? Number.parseFloat(alphaInputValue) : 0;
    const validatedAlpha = Math.max(0, Math.min(alpha, 1));
    setAlphaInputValue(validatedAlpha.toString());
    onSubmit(validatedAlpha, e);
  };
  return /* @__PURE__ */ jsxRuntime.jsx(InputLegacy.InputLegacy, {
    inputProps: {
      "data-testid": "a-input"
    },
    className: clsx.clsx({
      [withBaseName("rgbaInput")]: !showAsOpacity,
      [withBaseName("opacityInput")]: showAsOpacity
    }),
    value: showAsOpacity ? alphaInputValue ? `${(Number.parseFloat(alphaInputValue) * 100).toString()}%` : "%" : alphaInputValue,
    onChange: handleAlphaInputChange,
    onBlur: handleOnBlurAlpha,
    onKeyDown: handleKeyDownAlpha
  });
};

exports.AlphaInput = AlphaInput;
//# sourceMappingURL=AlphaInputField.js.map
