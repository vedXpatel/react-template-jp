'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var react = require('react');
var SliderTrack = require('./internal/SliderTrack.js');
var SliderMarks = require('./internal/SliderMarks.js');
var SliderContext = require('./internal/SliderContext.js');
var Slider$1 = require('./Slider.css.js');
var utils = require('./internal/utils.js');

const withBaseName = core.makePrefixer("saltSlider");
const defaultMin = 0;
const defaultMax = 10;
const defaultStep = 1;
const Slider = react.forwardRef(function Slider2({
  min = defaultMin,
  max = defaultMax,
  step = defaultStep,
  value: valueProp,
  defaultValue = [0],
  onChange,
  className,
  "aria-label": ariaLabel,
  marks = "inline",
  ...rest
}, ref) {
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-slider",
    css: Slider$1,
    window: targetWindow
  });
  const [value, setValue] = core.useControlled({
    controlled: utils.parseValueProp(valueProp, min, max),
    default: defaultValue,
    name: "Slider",
    state: "Value"
  });
  const handleSliderChange = (value2) => {
    setValue(value2);
    onChange == null ? void 0 : onChange(value2);
  };
  return /* @__PURE__ */ jsxRuntime.jsx(SliderContext.SliderContext.Provider, {
    value: {
      value,
      min,
      max,
      step,
      onChange: handleSliderChange,
      ariaLabel
    },
    children: /* @__PURE__ */ jsxRuntime.jsxs("div", {
      ref,
      className: clsx.clsx(
        withBaseName(),
        { [withBaseName("bottomLabel")]: marks !== "inline" },
        className
      ),
      ...rest,
      children: [
        marks !== "all" && /* @__PURE__ */ jsxRuntime.jsx(core.Label, {
          className: clsx.clsx(withBaseName("label"), {
            [withBaseName("labelMinBottom")]: marks !== "inline"
          }),
          children: min
        }),
        /* @__PURE__ */ jsxRuntime.jsx(SliderTrack.SliderTrack, {}),
        marks !== "all" && /* @__PURE__ */ jsxRuntime.jsx(core.Label, {
          className: clsx.clsx(withBaseName("label"), {
            [withBaseName("labelMaxBottom")]: marks !== "inline"
          }),
          children: max
        }),
        marks === "all" && /* @__PURE__ */ jsxRuntime.jsx(SliderMarks.SliderMarks, {
          max,
          min,
          step
        })
      ]
    })
  });
});

exports.Slider = Slider;
//# sourceMappingURL=Slider.js.map
