'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var react = require('react');
var SliderContext = require('./SliderContext.js');
var SliderSelection = require('./SliderSelection.js');
var SliderThumb = require('./SliderThumb.js');
var utils = require('./utils.js');

const withBaseName = core.makePrefixer("saltSliderTrack");
const SliderTrack = ({ ...props }) => {
  const { min, max, step, value, onChange } = SliderContext.useSliderContext();
  const trackRef = react.useRef(null);
  const valueRef = react.useRef(value);
  const [activeThumb, setActiveThumbState] = react.useState(void 0);
  const activeThumbRef = react.useRef(void 0);
  const pointerDown = react.useRef(false);
  const setActiveThumb = (index) => {
    setActiveThumbState(index);
    activeThumbRef.current = index;
  };
  const handlePointerUp = () => {
    setActiveThumb(void 0);
    pointerDown.current = false;
  };
  const handlePointerDown = (event) => {
    if (event.button !== 0)
      return;
    const { clientX } = event;
    const newValue = utils.getValue(trackRef, min, max, step, clientX);
    const nearestIndex = utils.getNearestIndex(value, newValue);
    utils.setValue(value, newValue, value.length > 1 ? nearestIndex : 0, onChange);
    setActiveThumb(nearestIndex);
    pointerDown.current = true;
  };
  const handlePointerMove = (event) => {
    if (!pointerDown.current || typeof activeThumbRef.current === "undefined")
      return;
    const thumb = activeThumbRef.current;
    const { clientX } = event;
    const rawValue = utils.getValue(trackRef, min, max, step, clientX);
    const newValue = utils.preventOverlappingValues(
      valueRef.current,
      rawValue,
      thumb
    );
    utils.setValue(valueRef.current, newValue, thumb, onChange);
  };
  const handlePointerOut = () => {
    if (!pointerDown.current) {
      setActiveThumb(void 0);
    }
  };
  react.useEffect(() => {
    window.addEventListener("pointerup", handlePointerUp);
    window.addEventListener("pointermove", handlePointerMove);
    return () => {
      window.removeEventListener("pointerup", handlePointerUp);
      window.removeEventListener("pointermove", handlePointerMove);
    };
  }, []);
  react.useEffect(() => {
    valueRef.current = value;
  }, [value]);
  return /* @__PURE__ */ jsxRuntime.jsxs("div", {
    className: withBaseName(),
    ref: trackRef,
    onPointerDown: handlePointerDown,
    onPointerOut: handlePointerOut,
    ...props,
    children: [
      /* @__PURE__ */ jsxRuntime.jsx("div", {
        className: withBaseName("rail")
      }),
      /* @__PURE__ */ jsxRuntime.jsx(SliderSelection.SliderSelection, {}),
      value.map((_, i) => {
        return /* @__PURE__ */ jsxRuntime.jsx(SliderThumb.SliderThumb, {
          index: i,
          activeThumb,
          setActiveThumb
        }, i);
      })
    ]
  });
};

exports.SliderTrack = SliderTrack;
//# sourceMappingURL=SliderTrack.js.map
