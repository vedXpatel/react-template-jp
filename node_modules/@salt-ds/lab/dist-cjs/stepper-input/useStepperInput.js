'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var useActivateWhileMouseDown = require('./internal/useActivateWhileMouseDown.js');
var utils = require('./internal/utils.js');

const useStepperInput = ({
  decimalPlaces = 0,
  disabled,
  inputRef,
  max = Number.MAX_SAFE_INTEGER,
  min = Number.MIN_SAFE_INTEGER,
  onChange,
  readOnly,
  setValue,
  step = 1,
  stepBlock = 10,
  value
}) => {
  const setValueInRange = react.useCallback(
    (event, modifiedValue) => {
      if (readOnly)
        return;
      let nextValue = modifiedValue;
      if (nextValue < min)
        nextValue = min;
      if (nextValue > max)
        nextValue = max;
      const roundedValue = utils.toFixedDecimalPlaces(nextValue, decimalPlaces);
      if (Number.isNaN(utils.toFloat(roundedValue)))
        return;
      setValue(roundedValue);
      onChange == null ? void 0 : onChange(event, roundedValue);
    },
    [decimalPlaces, min, max, onChange, readOnly, setValue]
  );
  const decrementValue = react.useCallback(
    (event, block) => {
      if (value === void 0 || utils.isAtMin(value, min))
        return;
      const decrementStep = block ? stepBlock : step;
      const nextValue = value === "" ? -decrementStep : utils.toFloat(value) - decrementStep;
      setValueInRange(event, nextValue);
    },
    [value, min, step, stepBlock, setValueInRange]
  );
  const incrementValue = react.useCallback(
    (event, block) => {
      if (value === void 0 || utils.isAtMax(value, max))
        return;
      const incrementStep = block ? stepBlock : step;
      const nextValue = value === "" ? incrementStep : utils.toFloat(value) + incrementStep;
      setValueInRange(event, nextValue);
    },
    [value, max, step, stepBlock, setValueInRange]
  );
  const { activate: decrementSpinner } = useActivateWhileMouseDown.useActivateWhileMouseDown(
    (event) => decrementValue(event),
    utils.isAtMin(value, min)
  );
  const { activate: incrementSpinner } = useActivateWhileMouseDown.useActivateWhileMouseDown(
    (event) => incrementValue(event),
    utils.isAtMax(value, max)
  );
  const handleButtonMouseUp = () => {
    var _a;
    return (_a = inputRef.current) == null ? void 0 : _a.focus();
  };
  const commonButtonProps = {
    "aria-hidden": true,
    tabIndex: -1,
    onMouseUp: handleButtonMouseUp
  };
  const incrementButtonProps = {
    ...commonButtonProps,
    "aria-label": "increment value",
    disabled: disabled || utils.isAtMax(value, max),
    onMouseDown: (event) => {
      if (event.nativeEvent.button !== 0) {
        return;
      }
      incrementSpinner(event);
    }
  };
  const decrementButtonProps = {
    ...commonButtonProps,
    "aria-label": "decrement value",
    disabled: disabled || utils.isAtMin(value, min),
    onMouseDown: (event) => {
      if (event.nativeEvent.button !== 0) {
        return;
      }
      decrementSpinner(event);
    }
  };
  return {
    incrementButtonProps,
    decrementButtonProps,
    incrementValue,
    decrementValue
  };
};

exports.useStepperInput = useStepperInput;
//# sourceMappingURL=useStepperInput.js.map
