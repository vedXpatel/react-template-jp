{"version":3,"file":"StepperInput.js","sources":["../src/stepper-input/StepperInput.tsx"],"sourcesContent":["import {\n  Button,\n  StatusAdornment,\n  type ValidationStatus,\n  capitalize,\n  makePrefixer,\n  useControlled,\n  useForkRef,\n  useFormFieldProps,\n  useIcon,\n} from \"@salt-ds/core\";\nimport { TriangleDownIcon, TriangleUpIcon } from \"@salt-ds/icons\";\nimport { useComponentCssInjection } from \"@salt-ds/styles\";\nimport { useWindow } from \"@salt-ds/window\";\nimport { clsx } from \"clsx\";\nimport {\n  type ChangeEvent,\n  type ComponentPropsWithoutRef,\n  type FocusEvent,\n  type InputHTMLAttributes,\n  type KeyboardEvent,\n  type ReactNode,\n  type Ref,\n  type SyntheticEvent,\n  forwardRef,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  isAllowedNonNumeric,\n  isOutOfRange,\n  sanitizedInput,\n  toFixedDecimalPlaces,\n  toFloat,\n} from \"./internal/utils\";\n\nimport stepperInputCss from \"./StepperInput.css\";\nimport { useStepperInput } from \"./useStepperInput\";\n\nconst withBaseName = makePrefixer(\"saltStepperInput\");\n\nexport interface StepperInputProps\n  extends Omit<ComponentPropsWithoutRef<\"div\">, \"onChange\"> {\n  /**\n   * A boolean. When `true`, the input will receive a full border.\n   */\n  bordered?: boolean;\n  /**\n   * The number of decimal places to display.\n   */\n  decimalPlaces?: number;\n  /**\n   * Sets the initial default value of the component.\n   */\n  defaultValue?: number | string;\n  /**\n   * If `true`, the stepper input will be disabled.\n   */\n  disabled?: boolean;\n  /**\n   * The marker to use in an empty read only Input.\n   * Use `''` to disable this feature. Defaults to '—'.\n   * @default '—'\n   */\n  emptyReadOnlyMarker?: string;\n  /**\n   * End adornment component\n   */\n  endAdornment?: ReactNode;\n  /**\n   * Whether to hide the stepper buttons. Defaults to `false`.\n   * @default false\n   */\n  hideButtons?: boolean;\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps?: InputHTMLAttributes<HTMLInputElement>;\n  /**\n   * Optional ref for the input component\n   */\n  inputRef?: Ref<HTMLInputElement>;\n  /**\n   * The maximum value that can be selected. Defaults to Number.MAX_SAFE_INTEGER.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  max?: number;\n  /**\n   * The minimum value that can be selected. Defaults to Number.MIN_SAFE_INTEGER.\n   * @default Number.MIN_SAFE_INTEGER\n   */\n  min?: number;\n  /**\n   * Callback when stepper input value is changed.\n   * @param event - the event triggers value change, could be undefined during increment / decrement button long press\n   */\n  onChange?: (\n    event: SyntheticEvent | undefined,\n    value: number | string,\n  ) => void;\n  /**\n   * A string. Displayed in a dimmed color when the input value is empty.\n   */\n  placeholder?: string | undefined;\n  /**\n   * A boolean. If `true`, the component is not editable by the user.\n   */\n  readOnly?: boolean;\n  /**\n   * Start adornment component\n   */\n  startAdornment?: ReactNode;\n  /**\n   * The amount to increment or decrement the value by when using the stepper buttons or Up Arrow and Down Arrow keys. Default to 1.\n   * @default 1\n   */\n  step?: number;\n  /**\n   * The amount to change the value when the value is incremented or decremented by holding Shift and pressing Up arrow or Down arrow keys.\n   * Defaults to 10.\n   * @default 10\n   */\n  stepBlock?: number;\n  /**\n   * Alignment of text within container. Defaults to \"left\".\n   * @default \"left\"\n   */\n  textAlign?: \"left\" | \"center\" | \"right\";\n  /**\n   * Validation status.\n   */\n  validationStatus?: Extract<ValidationStatus, \"error\" | \"warning\" | \"success\">;\n  /**\n   * Styling variant. Defaults to \"primary\".\n   * @default \"primary\"\n   */\n  variant?: \"primary\" | \"secondary\";\n  /**\n   * The value of the stepper input. The component will be controlled if this prop is provided.\n   */\n  value?: number | string | undefined;\n}\n\nexport const StepperInput = forwardRef<HTMLDivElement, StepperInputProps>(\n  function StepperInput(\n    {\n      bordered,\n      className: classNameProp,\n      decimalPlaces = 0,\n      defaultValue: defaultValueProp,\n      disabled,\n      emptyReadOnlyMarker = \"—\",\n      endAdornment,\n      hideButtons,\n      inputProps: inputPropsProp = {},\n      inputRef: inputRefProp,\n      max = Number.MAX_SAFE_INTEGER,\n      min = Number.MIN_SAFE_INTEGER,\n      onChange: onChangeProp,\n      placeholder,\n      readOnly: readOnlyProp,\n      startAdornment,\n      step = 1,\n      stepBlock = 10,\n      textAlign = \"left\",\n      validationStatus: validationStatusProp,\n      value: valueProp,\n      variant = \"primary\",\n      ...restProps\n    },\n    ref,\n  ) {\n    const targetWindow = useWindow();\n    useComponentCssInjection({\n      testId: \"salt-stepper-input\",\n      css: stepperInputCss,\n      window: targetWindow,\n    });\n\n    const { IncreaseIcon, DecreaseIcon } = useIcon();\n\n    const {\n      a11yProps: {\n        \"aria-describedby\": formFieldDescribedBy,\n        \"aria-labelledby\": formFieldLabelledBy,\n      } = {},\n      disabled: formFieldDisabled,\n      readOnly: formFieldReadOnly,\n      necessity: formFieldRequired,\n      validationStatus: formFieldValidationStatus,\n    } = useFormFieldProps();\n\n    const isDisabled = disabled || formFieldDisabled;\n    const isReadOnly = readOnlyProp || formFieldReadOnly;\n    const validationStatus = formFieldValidationStatus ?? validationStatusProp;\n\n    const {\n      \"aria-describedby\": inputDescribedBy,\n      \"aria-labelledby\": inputLabelledBy,\n      className: inputClassName,\n      onBlur: inputOnBlur,\n      onChange: inputOnChange,\n      onFocus: inputOnFocus,\n      required: inputRequired,\n      onKeyDown: inputOnKeyDown,\n      ...restInputProps\n    } = inputPropsProp;\n\n    const isRequired = formFieldRequired\n      ? [\"required\", \"asterisk\"].includes(formFieldRequired)\n      : inputRequired;\n\n    const [value, setValue] = useControlled({\n      controlled: valueProp,\n      default:\n        typeof defaultValueProp === \"number\"\n          ? toFixedDecimalPlaces(defaultValueProp, decimalPlaces)\n          : defaultValueProp,\n      name: \"StepperInput\",\n      state: \"value\",\n    });\n\n    // Won't be needed when `:has` css can be used\n    const [focused, setFocused] = useState(false);\n\n    const inputRef = useRef<HTMLInputElement | null>(null);\n    const forkedInputRef = useForkRef(inputRef, inputRefProp);\n\n    const {\n      decrementButtonProps,\n      decrementValue,\n      incrementButtonProps,\n      incrementValue,\n    } = useStepperInput({\n      inputRef,\n      setValue,\n      decimalPlaces,\n      disabled,\n      max,\n      min,\n      onChange: onChangeProp,\n      readOnly: isReadOnly,\n      step,\n      stepBlock,\n      value,\n    });\n\n    const handleInputFocus = (event: FocusEvent<HTMLInputElement>) => {\n      setFocused(true);\n\n      inputOnFocus?.(event);\n    };\n\n    const handleInputBlur = (event: FocusEvent<HTMLInputElement>) => {\n      setFocused(false);\n\n      if (value === undefined) return;\n\n      const floatValue = toFloat(value);\n      if (Number.isNaN(floatValue)) {\n        // Keep original value if NaN\n        setValue(value);\n        onChangeProp?.(event, value);\n      } else {\n        const roundedValue = toFixedDecimalPlaces(floatValue, decimalPlaces);\n\n        if (value !== \"\" && !isAllowedNonNumeric(value)) {\n          setValue(roundedValue);\n        }\n\n        onChangeProp?.(event, roundedValue);\n      }\n\n      inputOnBlur?.(event);\n    };\n\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n      const changedValue = event.target.value;\n\n      setValue(sanitizedInput(changedValue));\n\n      onChangeProp?.(event, sanitizedInput(changedValue));\n      inputOnChange?.(event);\n    };\n\n    const handleInputKeyDown = (event: KeyboardEvent<HTMLInputElement>) => {\n      switch (event.key) {\n        case \"ArrowUp\": {\n          event.preventDefault();\n          const block = event.shiftKey;\n          incrementValue(event, block);\n          break;\n        }\n        case \"ArrowDown\": {\n          event.preventDefault();\n          const block = event.shiftKey;\n          decrementValue(event, block);\n          break;\n        }\n        case \"Home\": {\n          event.preventDefault();\n          setValue(min);\n          onChangeProp?.(event, min);\n          break;\n        }\n        case \"End\": {\n          event.preventDefault();\n          setValue(max);\n          onChangeProp?.(event, max);\n          break;\n        }\n        case \"PageUp\": {\n          event.preventDefault();\n          incrementValue(event, true);\n          break;\n        }\n        case \"PageDown\": {\n          event.preventDefault();\n          decrementValue(event, true);\n          break;\n        }\n      }\n\n      inputOnKeyDown?.(event);\n    };\n\n    return (\n      <div\n        className={clsx(withBaseName(), classNameProp)}\n        {...restProps}\n        ref={ref}\n      >\n        <div\n          className={clsx(\n            withBaseName(\"inputContainer\"),\n            withBaseName(variant),\n            {\n              [withBaseName(\"focused\")]: !isDisabled && focused,\n              [withBaseName(\"disabled\")]: isDisabled,\n              [withBaseName(\"readOnly\")]: isReadOnly,\n              [withBaseName(validationStatus || \"\")]: validationStatus,\n              [withBaseName(\"bordered\")]: bordered,\n            },\n          )}\n        >\n          {startAdornment && (\n            <div className={withBaseName(\"startAdornmentContainer\")}>\n              {startAdornment}\n            </div>\n          )}\n          <input\n            aria-describedby={clsx(formFieldDescribedBy, inputDescribedBy)}\n            aria-invalid={isOutOfRange(value, min, max)}\n            aria-labelledby={clsx(formFieldLabelledBy, inputLabelledBy)}\n            aria-valuemax={toFloat(toFixedDecimalPlaces(max, decimalPlaces))}\n            aria-valuemin={toFloat(toFixedDecimalPlaces(min, decimalPlaces))}\n            aria-valuenow={\n              value && !Number.isNaN(toFloat(value))\n                ? toFloat(toFixedDecimalPlaces(toFloat(value), decimalPlaces))\n                : undefined\n            }\n            className={clsx(\n              withBaseName(\"input\"),\n              withBaseName(`inputTextAlign${capitalize(textAlign)}`),\n              inputClassName,\n            )}\n            disabled={isDisabled}\n            onBlur={handleInputBlur}\n            onChange={handleInputChange}\n            onFocus={!isDisabled ? handleInputFocus : undefined}\n            onKeyDown={handleInputKeyDown}\n            placeholder={placeholder}\n            readOnly={isReadOnly}\n            ref={forkedInputRef}\n            required={isRequired}\n            role=\"spinbutton\"\n            tabIndex={isDisabled ? -1 : 0}\n            value={value}\n            {...restInputProps}\n          />\n          {!isDisabled && validationStatus && (\n            <StatusAdornment status={validationStatus} />\n          )}\n          {endAdornment && (\n            <div className={withBaseName(\"endAdornmentContainer\")}>\n              {endAdornment}\n            </div>\n          )}\n          <div className={withBaseName(\"activationIndicator\")} />\n        </div>\n\n        {!hideButtons && !isReadOnly && (\n          <div className={withBaseName(\"buttonContainer\")}>\n            <Button\n              className={clsx(\n                withBaseName(\"stepperButton\"),\n                withBaseName(\"stepperButtonIncrement\"),\n              )}\n              {...incrementButtonProps}\n            >\n              <IncreaseIcon aria-hidden />\n            </Button>\n            <Button\n              className={clsx(\n                withBaseName(\"stepperButton\"),\n                withBaseName(\"stepperButtonDecrement\"),\n              )}\n              {...decrementButtonProps}\n            >\n              <DecreaseIcon aria-hidden />\n            </Button>\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n"],"names":["makePrefixer","forwardRef","StepperInput","useWindow","useComponentCssInjection","stepperInputCss","useIcon","useFormFieldProps","useControlled","toFixedDecimalPlaces","useState","useRef","useForkRef","useStepperInput","toFloat","isAllowedNonNumeric","sanitizedInput","jsxs","clsx","jsx","isOutOfRange","capitalize","StatusAdornment","Button"],"mappings":"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"}