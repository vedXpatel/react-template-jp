'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var window = require('@salt-ds/window');
var react = require('react');
var useInterval = require('./useInterval.js');

const INITIAL_DELAY = 500;
const INTERVAL_DELAY = 100;
function useActivateWhileMouseDown(activationFn, isAtLimit) {
  const [buttonDown, setButtonDown] = react.useState(false);
  const [delay, setDelay] = react.useState(INITIAL_DELAY);
  const cancelInterval = react.useCallback(() => {
    setButtonDown(false);
    setDelay(INITIAL_DELAY);
  }, []);
  react.useEffect(() => {
    if (isAtLimit)
      cancelInterval();
  }, [isAtLimit, cancelInterval]);
  const targetWindow = window.useWindow();
  react.useEffect(() => {
    if (targetWindow) {
      targetWindow.addEventListener("mouseup", cancelInterval);
    }
    return () => {
      if (targetWindow) {
        targetWindow.removeEventListener("mouseup", cancelInterval);
      }
    };
  }, [cancelInterval, targetWindow]);
  const activate = (event) => {
    activationFn(event);
    if (event.type === "mousedown") {
      setButtonDown(true);
    }
  };
  useInterval.useInterval(
    () => {
      if (!buttonDown)
        return;
      activationFn();
      if (delay === INITIAL_DELAY) {
        setDelay(INTERVAL_DELAY);
      }
    },
    buttonDown ? delay : null
  );
  return { activate, buttonDown };
}

exports.useActivateWhileMouseDown = useActivateWhileMouseDown;
//# sourceMappingURL=useActivateWhileMouseDown.js.map
