'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var react = require('react');
var utils = require('./internal/utils.js');
var StepperInput$1 = require('./StepperInput.css.js');
var useStepperInput = require('./useStepperInput.js');

const withBaseName = core.makePrefixer("saltStepperInput");
const StepperInput = react.forwardRef(
  function StepperInput2({
    bordered,
    className: classNameProp,
    decimalPlaces = 0,
    defaultValue: defaultValueProp,
    disabled,
    emptyReadOnlyMarker = "\u2014",
    endAdornment,
    hideButtons,
    inputProps: inputPropsProp = {},
    inputRef: inputRefProp,
    max = Number.MAX_SAFE_INTEGER,
    min = Number.MIN_SAFE_INTEGER,
    onChange: onChangeProp,
    placeholder,
    readOnly: readOnlyProp,
    startAdornment,
    step = 1,
    stepBlock = 10,
    textAlign = "left",
    validationStatus: validationStatusProp,
    value: valueProp,
    variant = "primary",
    ...restProps
  }, ref) {
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-stepper-input",
      css: StepperInput$1,
      window: targetWindow
    });
    const { IncreaseIcon, DecreaseIcon } = core.useIcon();
    const {
      a11yProps: {
        "aria-describedby": formFieldDescribedBy,
        "aria-labelledby": formFieldLabelledBy
      } = {},
      disabled: formFieldDisabled,
      readOnly: formFieldReadOnly,
      necessity: formFieldRequired,
      validationStatus: formFieldValidationStatus
    } = core.useFormFieldProps();
    const isDisabled = disabled || formFieldDisabled;
    const isReadOnly = readOnlyProp || formFieldReadOnly;
    const validationStatus = formFieldValidationStatus != null ? formFieldValidationStatus : validationStatusProp;
    const {
      "aria-describedby": inputDescribedBy,
      "aria-labelledby": inputLabelledBy,
      className: inputClassName,
      onBlur: inputOnBlur,
      onChange: inputOnChange,
      onFocus: inputOnFocus,
      required: inputRequired,
      onKeyDown: inputOnKeyDown,
      ...restInputProps
    } = inputPropsProp;
    const isRequired = formFieldRequired ? ["required", "asterisk"].includes(formFieldRequired) : inputRequired;
    const [value, setValue] = core.useControlled({
      controlled: valueProp,
      default: typeof defaultValueProp === "number" ? utils.toFixedDecimalPlaces(defaultValueProp, decimalPlaces) : defaultValueProp,
      name: "StepperInput",
      state: "value"
    });
    const [focused, setFocused] = react.useState(false);
    const inputRef = react.useRef(null);
    const forkedInputRef = core.useForkRef(inputRef, inputRefProp);
    const {
      decrementButtonProps,
      decrementValue,
      incrementButtonProps,
      incrementValue
    } = useStepperInput.useStepperInput({
      inputRef,
      setValue,
      decimalPlaces,
      disabled,
      max,
      min,
      onChange: onChangeProp,
      readOnly: isReadOnly,
      step,
      stepBlock,
      value
    });
    const handleInputFocus = (event) => {
      setFocused(true);
      inputOnFocus == null ? void 0 : inputOnFocus(event);
    };
    const handleInputBlur = (event) => {
      setFocused(false);
      if (value === void 0)
        return;
      const floatValue = utils.toFloat(value);
      if (Number.isNaN(floatValue)) {
        setValue(value);
        onChangeProp == null ? void 0 : onChangeProp(event, value);
      } else {
        const roundedValue = utils.toFixedDecimalPlaces(floatValue, decimalPlaces);
        if (value !== "" && !utils.isAllowedNonNumeric(value)) {
          setValue(roundedValue);
        }
        onChangeProp == null ? void 0 : onChangeProp(event, roundedValue);
      }
      inputOnBlur == null ? void 0 : inputOnBlur(event);
    };
    const handleInputChange = (event) => {
      const changedValue = event.target.value;
      setValue(utils.sanitizedInput(changedValue));
      onChangeProp == null ? void 0 : onChangeProp(event, utils.sanitizedInput(changedValue));
      inputOnChange == null ? void 0 : inputOnChange(event);
    };
    const handleInputKeyDown = (event) => {
      switch (event.key) {
        case "ArrowUp": {
          event.preventDefault();
          const block = event.shiftKey;
          incrementValue(event, block);
          break;
        }
        case "ArrowDown": {
          event.preventDefault();
          const block = event.shiftKey;
          decrementValue(event, block);
          break;
        }
        case "Home": {
          event.preventDefault();
          setValue(min);
          onChangeProp == null ? void 0 : onChangeProp(event, min);
          break;
        }
        case "End": {
          event.preventDefault();
          setValue(max);
          onChangeProp == null ? void 0 : onChangeProp(event, max);
          break;
        }
        case "PageUp": {
          event.preventDefault();
          incrementValue(event, true);
          break;
        }
        case "PageDown": {
          event.preventDefault();
          decrementValue(event, true);
          break;
        }
      }
      inputOnKeyDown == null ? void 0 : inputOnKeyDown(event);
    };
    return /* @__PURE__ */ jsxRuntime.jsxs("div", {
      className: clsx.clsx(withBaseName(), classNameProp),
      ...restProps,
      ref,
      children: [
        /* @__PURE__ */ jsxRuntime.jsxs("div", {
          className: clsx.clsx(
            withBaseName("inputContainer"),
            withBaseName(variant),
            {
              [withBaseName("focused")]: !isDisabled && focused,
              [withBaseName("disabled")]: isDisabled,
              [withBaseName("readOnly")]: isReadOnly,
              [withBaseName(validationStatus || "")]: validationStatus,
              [withBaseName("bordered")]: bordered
            }
          ),
          children: [
            startAdornment && /* @__PURE__ */ jsxRuntime.jsx("div", {
              className: withBaseName("startAdornmentContainer"),
              children: startAdornment
            }),
            /* @__PURE__ */ jsxRuntime.jsx("input", {
              "aria-describedby": clsx.clsx(formFieldDescribedBy, inputDescribedBy),
              "aria-invalid": utils.isOutOfRange(value, min, max),
              "aria-labelledby": clsx.clsx(formFieldLabelledBy, inputLabelledBy),
              "aria-valuemax": utils.toFloat(utils.toFixedDecimalPlaces(max, decimalPlaces)),
              "aria-valuemin": utils.toFloat(utils.toFixedDecimalPlaces(min, decimalPlaces)),
              "aria-valuenow": value && !Number.isNaN(utils.toFloat(value)) ? utils.toFloat(utils.toFixedDecimalPlaces(utils.toFloat(value), decimalPlaces)) : void 0,
              className: clsx.clsx(
                withBaseName("input"),
                withBaseName(`inputTextAlign${core.capitalize(textAlign)}`),
                inputClassName
              ),
              disabled: isDisabled,
              onBlur: handleInputBlur,
              onChange: handleInputChange,
              onFocus: !isDisabled ? handleInputFocus : void 0,
              onKeyDown: handleInputKeyDown,
              placeholder,
              readOnly: isReadOnly,
              ref: forkedInputRef,
              required: isRequired,
              role: "spinbutton",
              tabIndex: isDisabled ? -1 : 0,
              value,
              ...restInputProps
            }),
            !isDisabled && validationStatus && /* @__PURE__ */ jsxRuntime.jsx(core.StatusAdornment, {
              status: validationStatus
            }),
            endAdornment && /* @__PURE__ */ jsxRuntime.jsx("div", {
              className: withBaseName("endAdornmentContainer"),
              children: endAdornment
            }),
            /* @__PURE__ */ jsxRuntime.jsx("div", {
              className: withBaseName("activationIndicator")
            })
          ]
        }),
        !hideButtons && !isReadOnly && /* @__PURE__ */ jsxRuntime.jsxs("div", {
          className: withBaseName("buttonContainer"),
          children: [
            /* @__PURE__ */ jsxRuntime.jsx(core.Button, {
              className: clsx.clsx(
                withBaseName("stepperButton"),
                withBaseName("stepperButtonIncrement")
              ),
              ...incrementButtonProps,
              children: /* @__PURE__ */ jsxRuntime.jsx(IncreaseIcon, {
                "aria-hidden": true
              })
            }),
            /* @__PURE__ */ jsxRuntime.jsx(core.Button, {
              className: clsx.clsx(
                withBaseName("stepperButton"),
                withBaseName("stepperButtonDecrement")
              ),
              ...decrementButtonProps,
              children: /* @__PURE__ */ jsxRuntime.jsx(DecreaseIcon, {
                "aria-hidden": true
              })
            })
          ]
        })
      ]
    });
  }
);

exports.StepperInput = StepperInput;
//# sourceMappingURL=StepperInput.js.map
