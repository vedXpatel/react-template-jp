'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@salt-ds/core');
var react = require('react');
var overflowUtils = require('./overflowUtils.js');

const newlyCollapsed = (overflowItems) => overflowItems.some(
  (item) => item.collapsible === "instant" && item.collapsed && item.fullSize === null
);
const findItemToCollapse = (items) => {
  for (let i = items.length - 1; i >= 0; i--) {
    const item = items[i];
    if (item.collapsible === "instant" && !item.collapsed) {
      return item;
    }
  }
};
const uncollapseItems = (items, containerSize) => {
  var _a;
  const visibleContentSize = items.reduce(overflowUtils.allExceptOverflowIndicator, 0);
  let diff = containerSize - visibleContentSize;
  const collapsed = items.filter((item) => item.collapsible === "instant" && item.collapsed).sort((i1, i2) => i2.index - i1.index);
  const result = [];
  while (collapsed.length) {
    const item = collapsed.pop();
    const itemDiff = ((_a = item.fullSize) != null ? _a : 0) - item.size;
    if (diff >= itemDiff) {
      result.push({
        ...item,
        collapsed: false,
        size: item.fullSize,
        fullSize: null
      });
      diff = diff - itemDiff;
    } else {
      break;
    }
  }
  return result;
};
const useInstantCollapse = ({
  collectionHook,
  hasOverflowedItems,
  innerContainerSize = 0,
  overflowContainerRef: ref,
  overflowItemsRef,
  orientation
}) => {
  const minMaxSizes = react.useMemo(() => /* @__PURE__ */ new Map(), []);
  const { dispatch } = collectionHook;
  const updateCollapse = react.useCallback(
    (containerSize, renderedSize) => {
      const { current: managedItems } = overflowItemsRef;
      if (renderedSize && containerSize < renderedSize) {
        const overflowItem = findItemToCollapse(managedItems);
        if (overflowItem) {
          dispatch({
            type: "collapse-instant-item",
            overflowItem
          });
        }
      } else {
        const uncollapsedItems = uncollapseItems(managedItems, containerSize);
        if (uncollapsedItems.length) {
          dispatch({
            type: "update-items",
            overflowItems: uncollapsedItems
          });
        }
      }
    },
    [dispatch, overflowItemsRef]
  );
  const handleResize = react.useCallback(
    (size, containerHasGrown) => {
      const { current: managedItems } = overflowItemsRef;
      const { isOverflowing: willOverflow } = overflowUtils.measureContainerOverflow(
        ref,
        orientation
      );
      const collapsedItems = managedItems.filter((item) => item.collapsed);
      if (willOverflow && !hasOverflowedItems) {
        const overflowItem = findItemToCollapse(managedItems);
        if (overflowItem) {
          dispatch({
            type: "collapse-instant-item",
            overflowItem
          });
        }
      } else if (collapsedItems.length > 0 && containerHasGrown) {
        updateCollapse(size, null);
      } else if (willOverflow && hasOverflowedItems) {
        const renderedSize = managedItems.reduce(overflowUtils.addAll, 0);
        updateCollapse(size, renderedSize);
      }
    },
    [
      dispatch,
      hasOverflowedItems,
      orientation,
      overflowItemsRef,
      ref,
      updateCollapse
    ]
  );
  const resetMeasurements = react.useCallback(
    (isOverflowing) => {
      const { current: managedItems } = overflowItemsRef;
      if (isOverflowing) {
        const overflowItem = findItemToCollapse(managedItems);
        if (overflowItem) {
          dispatch({
            type: "collapse-instant-item",
            overflowItem
          });
          return true;
        }
        return false;
      }
    },
    [dispatch, overflowItemsRef]
  );
  const setMinSize = react.useCallback(
    (item, size) => {
      const minMaxSize = minMaxSizes.get(item.index);
      if (minMaxSize) {
        minMaxSize.minSize = size;
      } else {
        minMaxSizes.set(item.index, { maxSize: null, minSize: size });
      }
    },
    [minMaxSizes]
  );
  const measureCollapsedItem = react.useCallback(() => {
    const { current: managedItems } = overflowItemsRef;
    const dimension = orientation === "horizontal" ? "width" : "height";
    const [collapsedItem] = managedItems.filter(
      (item) => item.collapsible === "instant" && item.collapsed
    );
    console.log(`measureCollapsedItem ${collapsedItem.index}`);
    if (collapsedItem.fullSize === null) {
      const target = overflowUtils.getElementForItem(ref, collapsedItem);
      if (target) {
        const collapsedSize = overflowUtils.measureElementSize(target, dimension);
        const managedItem = findItemToCollapse(managedItems);
        const diff = collapsedItem.size - collapsedSize;
        const renderedSize = managedItems.reduce(overflowUtils.addAll, 0) - diff;
        const updates = [];
        if (renderedSize > innerContainerSize && managedItem) {
          console.log(`next item to collapse ${managedItem.index}`);
          updates.push(
            {
              ...collapsedItem,
              fullSize: collapsedItem.size,
              size: collapsedSize
            },
            {
              ...managedItem,
              collapsed: true
            }
          );
        } else {
          updates.push({
            ...collapsedItem,
            fullSize: collapsedItem.size,
            size: collapsedSize
          });
        }
        dispatch({
          type: "update-items",
          overflowItems: updates
        });
        setMinSize(collapsedItem, collapsedSize);
      }
    } else {
      return -1;
    }
  }, [
    dispatch,
    innerContainerSize,
    orientation,
    overflowItemsRef,
    ref,
    setMinSize
  ]);
  core.useIsomorphicLayoutEffect(() => {
    const { current: managedItems } = overflowItemsRef;
    const newlyCollapsedItem = newlyCollapsed(managedItems);
    if (newlyCollapsedItem) {
      measureCollapsedItem();
    }
  });
  return {
    onResize: handleResize,
    resetMeasurements
  };
};

exports.useInstantCollapse = useInstantCollapse;
//# sourceMappingURL=useInstantCollapse.js.map
