'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var overflowUtils = require('./overflowUtils.js');

const getPriority = (item) => item.priority;
const canReclaimSpace = (item) => item.collapsed && item.reclaimSpace;
const hasReclaimedSpace = (item) => item.reclaimedSpace;
const getReclaimableSpace = ({ size, minSize = 0 }) => size - minSize;
const findNextOverflowedItem = (items) => {
  const overflowedItems = items.filter((item) => item.overflowed);
  const minPriority = Math.min(...overflowedItems.map(getPriority));
  for (let i = 0; i < overflowedItems.length; i++) {
    if (overflowedItems[i].priority === minPriority) {
      return overflowedItems[i];
    }
  }
  return null;
};
const addAllVisible = (sum, m) => sum + (m.overflowed ? 0 : m.size);
const canReleaseReclaimedSpace = (size, items) => {
  var _a;
  const claimant = items.find(hasReclaimedSpace);
  const overflowedItem = findNextOverflowedItem(items);
  if (claimant && overflowedItem) {
    const renderedSize = items.reduce(addAllVisible, 0);
    const { size: indicatorSize } = (_a = overflowUtils.getOverflowIndicator(items)) != null ? _a : { size: 0 };
    const { size: overflowedSize } = overflowedItem;
    const reclaimableSpace = getReclaimableSpace(claimant);
    const renderedSizeAfterReclaim = renderedSize - reclaimableSpace - indicatorSize;
    const maxAvailableSpace = size - renderedSizeAfterReclaim;
    if (maxAvailableSpace >= overflowedSize) {
      return true;
    }
  }
};
const mightBeAbleToReclaimSpace = (items) => items.some(canReclaimSpace);
const useReclaimSpace = ({
  collectionHook,
  label = "Toolbar",
  overflowItemsRef: managedItemsRef,
  overflowContainerRef: ref,
  orientation
}) => {
  const releaseReclaimedSpace = react.useCallback(() => {
    const { current: managedItems } = managedItemsRef;
    const claimant = managedItems.find(hasReclaimedSpace);
    if (claimant) {
      collectionHook.dispatch({
        type: "replace-item",
        overflowItem: {
          ...claimant,
          collapsed: true,
          collapsing: false,
          reclaimedSpace: void 0,
          size: claimant.minSize,
          fullSize: claimant.size
        }
      });
    }
  }, [managedItemsRef, collectionHook.dispatch]);
  const handleResize = react.useCallback(
    (size, containerHasGrown) => {
      const { isOverflowing: willOverflow } = overflowUtils.measureContainerOverflow(
        ref,
        orientation
      );
      const { current: managedItems } = managedItemsRef;
      if (containerHasGrown && canReleaseReclaimedSpace(size, managedItems)) {
        releaseReclaimedSpace();
      } else if (!containerHasGrown && willOverflow && mightBeAbleToReclaimSpace(managedItems)) {
        const collapsedChild = managedItems.find(canReclaimSpace);
        if (collapsedChild) {
          collectionHook.dispatch({
            type: "replace-item",
            overflowItem: {
              ...collapsedChild,
              collapsed: false,
              collapsing: true,
              reclaimedSpace: true,
              size: collapsedChild.fullSize,
              fullSize: null
            }
          });
        }
      }
    },
    [
      ref,
      managedItemsRef,
      releaseReclaimedSpace,
      collectionHook.dispatch,
      orientation
    ]
  );
  return {
    onResize: handleResize
  };
};

exports.addAllVisible = addAllVisible;
exports.useReclaimSpace = useReclaimSpace;
//# sourceMappingURL=useReclaimSpace.js.map
