{"version":3,"file":"DateInputSingle.js","sources":["../src/date-input/DateInputSingle.tsx"],"sourcesContent":["import {\n  type DateValue,\n  type TimeFields,\n  getLocalTimeZone,\n} from \"@internationalized/date\";\nimport {\n  StatusAdornment,\n  makePrefixer,\n  useControlled,\n  useForkRef,\n  useFormFieldProps,\n  useId,\n} from \"@salt-ds/core\";\nimport { useComponentCssInjection } from \"@salt-ds/styles\";\nimport { useWindow } from \"@salt-ds/window\";\nimport { clsx } from \"clsx\";\nimport {\n  type ChangeEventHandler,\n  type ComponentPropsWithoutRef,\n  type FocusEventHandler,\n  type InputHTMLAttributes,\n  type KeyboardEventHandler,\n  type MouseEventHandler,\n  type ReactNode,\n  type RefObject,\n  type SyntheticEvent,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  type SingleDateSelection,\n  formatDate as defaultFormatDate,\n  getCurrentLocale,\n} from \"../calendar\";\nimport dateInputCss from \"./DateInput.css\";\nimport { extractTimeFieldsFromDate, parseCalendarDate } from \"./utils\";\n\nconst withBaseName = makePrefixer(\"saltDateInput\");\n\n/**\n * Date error produced by DateInputSingle parser.\n */\nexport type DateInputSingleParserError = string | false;\n\n/**\n * Date error produced by DateInputSingle parser.\n */\nexport type DateInputSingleError = DateInputSingleParserError;\n\n/**\n * Return value of DateInputSingle parser.\n * @template T\n */\nexport interface DateInputSingleParserResult<T = DateValue | null> {\n  /**\n   * The parsed date value.\n   */\n  date: T;\n  /**\n   * The error encountered during parsing, if any.\n   */\n  error: DateInputSingleParserError;\n}\n\n/**\n * Props for the DateInputSingle component.\n * @template T\n */\nexport interface DateInputSingleProps<T = SingleDateSelection>\n  extends Omit<ComponentPropsWithoutRef<\"div\">, \"defaultValue\">,\n    Pick<\n      ComponentPropsWithoutRef<\"input\">,\n      \"disabled\" | \"value\" | \"defaultValue\" | \"placeholder\"\n    > {\n  /**\n   * The aria-label for accessibility.\n   */\n  ariaLabel?: string;\n  /**\n   * Styling variant with full border. Defaults to false.\n   */\n  bordered?: boolean;\n  /**\n   * The marker to use in an empty read-only DateInput.\n   * Use `''` to disable this feature. Defaults to '—'.\n   */\n  emptyReadOnlyMarker?: string;\n  /**\n   * End adornment component.\n   */\n  endAdornment?: ReactNode;\n  /**\n   * Attributes applied to the `input` element.\n   * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dateInput#Attributes\n   */\n  inputProps?: InputHTMLAttributes<HTMLInputElement>;\n  /**\n   * If `true`, the component is read-only.\n   */\n  readOnly?: boolean;\n  /**\n   * Validation status.\n   */\n  validationStatus?: \"error\" | \"warning\" | \"success\";\n  /**\n   * Styling variant. Defaults to \"primary\".\n   */\n  variant?: \"primary\" | \"secondary\";\n  /**\n   * Function to format the input value.\n   */\n  format?: (date: DateValue | null) => string;\n  /**\n   * Reference for the input.\n   */\n  inputRef?: RefObject<HTMLInputElement>;\n  /**\n   * Input value. Use when the input value is controlled.\n   */\n  value?: string;\n  /**\n   * The initial input value. Use when the component is uncontrolled.\n   */\n  defaultValue?: string;\n  /**\n   * The date value. Use when the component is controlled.\n   */\n  date?: T | null;\n  /**\n   * The initial selected date value. Use when the component is uncontrolled.\n   */\n  defaultDate?: T | null;\n  /**\n   * Callback fired when the selected date changes.\n   * @param event - The synthetic event.\n   * @param date - The new date value.\n   * @param error - The date input single error.\n   */\n  onDateChange?: (\n    event: SyntheticEvent,\n    date: T | null,\n    error: DateInputSingleError,\n  ) => void;\n  /**\n   * Function to parse date string to valid `DateValue` or null, if invalid or empty.\n   * @param inputDate - The input date string.\n   * @returns The result of the date input single parser.\n   */\n  parse?: (inputDate: string) => DateInputSingleParserResult;\n  /**\n   * Called when input value changes, either due to user interaction or programmatic formatting of valid dates.\n   * @param newValue - The new date input value.\n   * @param isFormatted - Whether the value is formatted.\n   */\n  onDateValueChange?: (newValue: string, isFormatted: boolean) => void;\n  /**\n   * Locale of the entered date.\n   */\n  locale?: string;\n  /**\n   * Timezone of the entered date.\n   */\n  timeZone?: string;\n}\nexport const DateInputSingle = forwardRef<HTMLDivElement, DateInputSingleProps>(\n  function DateInput(props, ref) {\n    const {\n      bordered = false,\n      className,\n      disabled,\n      \"aria-label\": ariaLabel,\n      date: dateProp,\n      defaultDate,\n      onDateChange,\n      value: valueProp,\n      defaultValue = \"\",\n      onChange,\n      onClick,\n      emptyReadOnlyMarker = \"—\",\n      endAdornment,\n      format: formatProp,\n      inputProps = {},\n      inputRef: inputRefProp = null,\n      parse = parseCalendarDate,\n      placeholder = \"dd mmm yyyy\",\n      readOnly: readOnlyProp,\n      validationStatus: validationStatusProp,\n      variant = \"primary\",\n      onDateValueChange,\n      locale = getCurrentLocale(),\n      timeZone = getLocalTimeZone(),\n      ...rest\n    } = props;\n    const wrapperRef = useRef(null);\n    const lastError = useRef<string | false>(false);\n    const handleWrapperRef = useForkRef<HTMLDivElement>(ref, wrapperRef);\n    const innerInputRef = useRef<HTMLInputElement>(null);\n    const handleInputRef = useForkRef<HTMLInputElement>(\n      innerInputRef,\n      inputRefProp,\n    );\n\n    const inputId = useId();\n\n    const targetWindow = useWindow();\n    useComponentCssInjection({\n      testId: \"salt-date-input-single\",\n      css: dateInputCss,\n      window: targetWindow,\n    });\n\n    const [date, setDate] = useControlled({\n      controlled: dateProp,\n      default: defaultDate,\n      name: \"DateInputSingle\",\n      state: \"date\",\n    });\n    const [dateValue, setDateValue] = useControlled({\n      controlled: valueProp,\n      default: defaultValue,\n      name: \"DateInputSingle\",\n      state: \"dateValue\",\n    });\n    const preservedTime = useRef<TimeFields | undefined>(\n      extractTimeFieldsFromDate(date || null),\n    );\n\n    const format = useCallback(\n      (date: DateValue | null) => {\n        return formatProp\n          ? formatProp(date)\n          : defaultFormatDate(date, locale, { timeZone });\n      },\n      [formatProp, locale, timeZone],\n    );\n\n    // Update date string value when selected date changes\n    useEffect(() => {\n      const formattedDate = format(date || null);\n      if (formattedDate) {\n        setDateValue(formattedDate);\n        onDateValueChange?.(formattedDate, true);\n      }\n    }, [date, format, locale, timeZone]);\n\n    const [focused, setFocused] = useState(false);\n\n    const {\n      a11yProps: {\n        \"aria-describedby\": formFieldDescribedBy,\n        \"aria-labelledby\": formFieldLabelledBy,\n      } = {},\n      disabled: formFieldDisabled,\n      readOnly: formFieldReadOnly,\n      necessity: formFieldRequired,\n      validationStatus: formFieldValidationStatus,\n    } = useFormFieldProps();\n\n    const isReadOnly = readOnlyProp || formFieldReadOnly;\n    const isDisabled = disabled || formFieldDisabled;\n\n    const validationStatus = formFieldValidationStatus ?? validationStatusProp;\n\n    const {\n      \"aria-describedby\": dateInputDescribedBy,\n      \"aria-labelledby\": dateInputLabelledBy,\n      onBlur: inputPropsOnBlur,\n      onChange: inputPropsOnChange,\n      onKeyDown: inputPropsOnKeyDown,\n      onFocus: inputPropsOnFocus,\n      required: dateInputPropsRequired,\n      ...restDateInputProps\n    } = inputProps;\n\n    const isRequired = formFieldRequired\n      ? [\"required\", \"asterisk\"].includes(formFieldRequired)\n      : dateInputPropsRequired;\n\n    const apply = (event: SyntheticEvent) => {\n      const { date: parsedDate, error } = parse(dateValue ?? \"\");\n      let newDate = parsedDate;\n      if (newDate) {\n        const formattedDate = format(newDate);\n        if (formattedDate) {\n          setDateValue(formattedDate);\n          onDateValueChange?.(formattedDate, true);\n        }\n      }\n      const hasDateChanged =\n        newDate && date ? newDate.compare(date) !== 0 : newDate !== date;\n      if (hasDateChanged) {\n        setDate(newDate);\n        if (newDate && preservedTime.current) {\n          newDate = newDate.set(preservedTime.current);\n        }\n      }\n      if (hasDateChanged || lastError.current !== error) {\n        onDateChange?.(event, newDate, error);\n      }\n      lastError.current = error;\n    };\n\n    const handleChange: ChangeEventHandler<HTMLInputElement> = (event) => {\n      const newDateValue = event.target.value;\n      setDateValue(newDateValue);\n      inputPropsOnChange?.(event);\n      onChange?.(event);\n      onDateValueChange?.(newDateValue, false);\n    };\n\n    const handleFocus: FocusEventHandler<HTMLInputElement> = (event) => {\n      setFocused(true);\n      inputPropsOnFocus?.(event);\n    };\n    const handleBlur: FocusEventHandler<HTMLInputElement> = (event) => {\n      setFocused(false);\n      apply(event);\n      inputPropsOnBlur?.(event);\n    };\n\n    const handleKeyDown: KeyboardEventHandler<HTMLInputElement> = (event) => {\n      if (event.key === \"Enter\") {\n        apply(event);\n      }\n      inputPropsOnKeyDown?.(event);\n    };\n\n    const handleClick: MouseEventHandler<HTMLDivElement> = (event) => {\n      if (event.target === wrapperRef.current) {\n        innerInputRef?.current?.focus();\n      }\n      onClick?.(event);\n    };\n\n    return (\n      <div\n        className={clsx(\n          withBaseName(),\n          withBaseName(variant),\n          {\n            [withBaseName(\"focused\")]: !isDisabled && focused,\n            [withBaseName(\"disabled\")]: isDisabled,\n            [withBaseName(\"readOnly\")]: isReadOnly,\n            [withBaseName(validationStatus ?? \"\")]: validationStatus,\n            [withBaseName(\"bordered\")]: bordered,\n          },\n          className,\n        )}\n        ref={handleWrapperRef}\n        onClick={handleClick}\n        {...rest}\n      >\n        <input\n          autoComplete=\"off\"\n          aria-describedby={clsx(formFieldDescribedBy, dateInputDescribedBy)}\n          aria-labelledby={clsx(\n            formFieldLabelledBy,\n            dateInputLabelledBy,\n            inputId,\n          )}\n          aria-label={clsx(\"Selected date\", ariaLabel)}\n          id={inputId}\n          className={withBaseName(\"input\")}\n          disabled={isDisabled}\n          readOnly={isReadOnly}\n          ref={handleInputRef}\n          tabIndex={isDisabled ? -1 : 0}\n          placeholder={placeholder}\n          size={placeholder.length}\n          value={isReadOnly && !dateValue ? emptyReadOnlyMarker : dateValue}\n          {...restDateInputProps}\n          onBlur={handleBlur}\n          onChange={handleChange}\n          onKeyDown={handleKeyDown}\n          onFocus={!isDisabled ? handleFocus : undefined}\n          required={isRequired}\n        />\n        <div className={withBaseName(\"endAdornmentContainer\")}>\n          {!isDisabled && !isReadOnly && validationStatus && (\n            <StatusAdornment status={validationStatus} />\n          )}\n          {endAdornment}\n        </div>\n        <div className={withBaseName(\"activationIndicator\")} />\n      </div>\n    );\n  },\n);\n"],"names":["makePrefixer","forwardRef","DateInput","parseCalendarDate","getCurrentLocale","getLocalTimeZone","useRef","useForkRef","useId","useWindow","useComponentCssInjection","dateInputCss","date","useControlled","extractTimeFieldsFromDate","useCallback","defaultFormatDate","useEffect","useState","useFormFieldProps","jsxs","clsx","jsx","StatusAdornment"],"mappings":"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"}