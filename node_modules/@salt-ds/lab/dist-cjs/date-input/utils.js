'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var date = require('@internationalized/date');

function parseCalendarDate(inputDate) {
  if (!(inputDate == null ? void 0 : inputDate.length)) {
    return { date: null, error: false };
  }
  const date$1 = new Date(inputDate);
  if (Number.isNaN(date$1.getTime())) {
    return { date: null, error: "not a valid date" };
  }
  const year = date$1.getFullYear();
  const month = date$1.getMonth() + 1;
  const day = date$1.getDate();
  try {
    const isoDate = new date.CalendarDate(year, month, day);
    return { date: isoDate, error: false };
  } catch (err) {
    return { date: null, error: err.message };
  }
}
function parseZonedDateTime(inputDate, timeZone = date.getLocalTimeZone()) {
  const parsedDate = parseCalendarDate(inputDate);
  if (!parsedDate.date || parsedDate.error) {
    return { ...parsedDate, date: null };
  }
  try {
    const zonedDate = date.toZoned(parsedDate.date, timeZone, "compatible");
    return { date: zonedDate, error: false };
  } catch (err) {
    return { date: null, error: err.message };
  }
}
const dateSupportsTime = (date$1) => date$1 instanceof date.CalendarDateTime || date$1 instanceof date.ZonedDateTime;
function extractTimeFieldsFromDateRange(selectedDate) {
  let startTime;
  let endTime;
  if (selectedDate) {
    if (selectedDate.startDate && dateSupportsTime(selectedDate.startDate)) {
      const { hour, minute, second, millisecond } = selectedDate.startDate;
      startTime = { hour, minute, second, millisecond };
    }
    if (selectedDate.endDate && dateSupportsTime(selectedDate.endDate)) {
      const { hour, minute, second, millisecond } = selectedDate.endDate;
      endTime = { hour, minute, second, millisecond };
    }
  }
  return { startTime, endTime };
}
function extractTimeFieldsFromDate(selectedDate) {
  if (selectedDate && dateSupportsTime(selectedDate)) {
    const { hour, minute, second, millisecond } = selectedDate;
    return { hour, minute, second, millisecond };
  }
}

exports.dateSupportsTime = dateSupportsTime;
exports.extractTimeFieldsFromDate = extractTimeFieldsFromDate;
exports.extractTimeFieldsFromDateRange = extractTimeFieldsFromDateRange;
exports.parseCalendarDate = parseCalendarDate;
exports.parseZonedDateTime = parseZonedDateTime;
//# sourceMappingURL=utils.js.map
