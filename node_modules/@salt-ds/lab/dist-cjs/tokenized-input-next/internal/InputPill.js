'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var react = require('react');
var InputPill$1 = require('./InputPill.css.js');
var useWidth = require('./useWidth.js');

const withBaseName = core.makePrefixer("saltInputPill");
const InputPill = react.memo(function InputPill2(props) {
  const {
    className,
    hidden,
    highlighted,
    index,
    label,
    onClose,
    pillsRef,
    ...rest
  } = props;
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-input-pill",
    css: InputPill$1,
    window: targetWindow
  });
  const { CloseIcon } = core.useIcon();
  const ref = react.useRef(null);
  const [isEllipsisActive, setEllipsisActive] = react.useState(false);
  const isRemovable = Boolean(onClose);
  core.useIsomorphicLayoutEffect(() => {
    var _a;
    const text = (_a = ref == null ? void 0 : ref.current) == null ? void 0 : _a.firstElementChild;
    if (!isRemovable && pillsRef.current) {
      pillsRef.current[index] = useWidth.getWidth(ref.current);
    }
    setEllipsisActive((text == null ? void 0 : text.offsetWidth) < (text == null ? void 0 : text.scrollWidth));
  }, [pillsRef, index, isRemovable]);
  core.useIsomorphicLayoutEffect(
    () => () => {
      pillsRef.current[index] = void 0;
    },
    [pillsRef, index]
  );
  const handleClose = (event) => {
    onClose == null ? void 0 : onClose(event, index);
  };
  return /* @__PURE__ */ jsxRuntime.jsx(core.Tooltip, {
    content: label,
    disabled: !isEllipsisActive,
    children: /* @__PURE__ */ jsxRuntime.jsxs(core.Pill, {
      className: clsx.clsx(
        withBaseName(),
        {
          [withBaseName("pillHighlighted")]: highlighted,
          [withBaseName("expanded")]: isRemovable,
          [withBaseName("hidden")]: hidden
        },
        className
      ),
      tabIndex: -1,
      onClick: isRemovable ? handleClose : void 0,
      ref,
      role: "option",
      ...rest,
      children: [
        /* @__PURE__ */ jsxRuntime.jsx("span", {
          className: withBaseName("label"),
          children: label
        }),
        isRemovable && /* @__PURE__ */ jsxRuntime.jsx(CloseIcon, {})
      ]
    })
  });
});

exports.InputPill = InputPill;
//# sourceMappingURL=InputPill.js.map
