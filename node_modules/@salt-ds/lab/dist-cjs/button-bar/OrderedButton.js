'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var clsx = require('clsx');
var react = require('react');
var core = require('@salt-ds/core');
var ButtonBarContext = require('./internal/ButtonBarContext.js');
var useDescendant = require('./internal/useDescendant.js');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var OrderedButton$1 = require('./OrderedButton.css.js');

const withBasename = core.makePrefixer("saltOrderedButton");
const OrderedButton = react.forwardRef(
  function OrderedButton2({
    className,
    align: alignProp,
    order,
    alignLeftOrder,
    stackOrder,
    variant,
    ...restProps
  }, ref) {
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-ordered-button",
      css: OrderedButton$1,
      window: targetWindow
    });
    const index = useDescendant.useDescendant({ order, stackOrder, alignLeftOrder, variant });
    const {
      matches,
      align: alignContext,
      alignedIndex
    } = react.useContext(ButtonBarContext.ButtonBarContext);
    const alignFromParent = index === alignedIndex ? alignContext : void 0;
    const align = alignProp || alignFromParent;
    return /* @__PURE__ */ jsxRuntime.jsx(core.Button, {
      className: clsx.clsx(
        withBasename(),
        {
          [withBasename(`align${align ? core.capitalize(align) : ""}`)]: align && !matches,
          [withBasename("stacked")]: matches
        },
        className
      ),
      ref,
      variant,
      ...restProps
    });
  }
);

exports.OrderedButton = OrderedButton;
//# sourceMappingURL=OrderedButton.js.map
