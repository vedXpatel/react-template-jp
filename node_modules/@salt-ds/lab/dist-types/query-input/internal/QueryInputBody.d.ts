import { type ChangeEventHandler, type FocusEventHandler, type KeyboardEventHandler, type Ref, type SyntheticEvent } from "react";
import { type ChangeHandler } from "../../tokenized-input";
import type { QueryInputItem } from "../queryInputTypes";
import type { BooleanOperator } from "../useQueryInput";
export interface QueryInputBodyProps {
    inputRef: Ref<HTMLInputElement>;
    disabled?: boolean;
    showCategory?: boolean;
    selectedItems: QueryInputItem[];
    onBlur: FocusEventHandler<HTMLInputElement>;
    onFocus: FocusEventHandler<HTMLInputElement>;
    onInputFocus: FocusEventHandler<HTMLInputElement>;
    onInputBlur: FocusEventHandler<HTMLInputElement>;
    onInputClick: (event: SyntheticEvent) => void;
    onInputClear: () => void;
    inputValue?: string;
    onInputChange: ChangeEventHandler<HTMLInputElement>;
    isFocused?: boolean;
    onSelectedItemsChange: ChangeHandler<QueryInputItem>;
    onKeyDown: KeyboardEventHandler<HTMLInputElement | HTMLButtonElement>;
    booleanOperator: BooleanOperator;
    onBooleanOperatorChange: (newBooleanOperator: BooleanOperator) => void;
}
export declare const QueryInputBody: import("react").ForwardRefExoticComponent<QueryInputBodyProps & import("react").RefAttributes<HTMLDivElement>>;
