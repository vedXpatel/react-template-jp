import { type DateValue } from "@internationalized/date";
import { type DateRangeSelection, type SingleDateSelection } from "../calendar";
import type { RangeDatePickerState, SingleDatePickerState } from "./DatePickerContext";
interface UseDatePickerBaseProps<T> {
    /** If `true`, the component is disabled. */
    disabled?: boolean;
    /** If `true`, the component is read-only. */
    readOnly?: boolean;
    /**
     * The selected date. The selected date will be controlled when this prop is provided.
     */
    selectedDate?: T | null;
    /**
     * The initial selected date, when the selected date is uncontrolled.
     */
    defaultSelectedDate?: UseDatePickerBaseProps<T>["selectedDate"];
    /**
     * The minimum date for the range, default is 1900.
     */
    minDate?: DateValue;
    /**
     * The maximum date for the range, default is 2100.
     */
    maxDate?: DateValue;
    /**
     * Handler for when the date selection is cancelled.
     */
    onCancel?: () => void;
    /**
     * Time zone of the date selection, defaults to the current time zone of the user.
     */
    timeZone?: string;
    /**
     * Locale of the date selection, defaults to the current locale of the user.
     */
    locale?: string;
}
/**
 * Props for single date selection.
 *
 * @typedef {UseDatePickerBaseProps<SingleDateSelection>} UseDatePickerSingleProps
 * @property {"single"} selectionVariant - Single date selection.
 * @property {(selectedSingleDate: SingleDateSelection | null, singleError: string | false) => void} [onSelectedDateChange] - Handler called when the selected date changes.
 * @property {(appliedSingleDate: SingleDateSelection | null, singleError: string | false) => void} [onApply] - Handler called when the selected date is confirmed/applied.
 */
export interface UseDatePickerSingleProps extends UseDatePickerBaseProps<SingleDateSelection> {
    /**
     * Single date selection.
     */
    selectionVariant: "single";
    /**
     * Handler called when the selected date changes.
     * @param {SingleDateSelection | null} selectedSingleDate - The selected date.
     * @param {string | false} singleError - Error returned by the parser or `false`.
     */
    onSelectedDateChange?: (selectedSingleDate: SingleDateSelection | null, singleError: string | false) => void;
    /**
     * Handler called when the selected date is confirmed/applied.
     * @param {SingleDateSelection | null} appliedSingleDate - The selected date.
     * @param {string | false} singleError - Error returned by the parser or `false`.
     */
    onApply?: (appliedSingleDate: SingleDateSelection | null, singleError: string | false) => void;
}
/**
 * Props for date range selection.
 *
 * @typedef {UseDatePickerBaseProps<DateRangeSelection>} UseDatePickerRangeProps
 * @property {"range"} selectionVariant - Date range selection.
 * @property {(selectedRangeDate: DateRangeSelection | null, rangeError: { startDate: string | false; endDate: string | false }) => void} [onSelectedDateChange] - Handler called when the selected date changes.
 * @property {(appliedRangeDate: DateRangeSelection | null, rangeError: { startDate: string | false; endDate: string | false }) => void} [onApply] - Handler called when the selected date is confirmed/applied.
 */
export interface UseDatePickerRangeProps extends UseDatePickerBaseProps<DateRangeSelection> {
    /**
     * Date range selection.
     */
    selectionVariant: "range";
    /**
     * Handler called when the selected date changes.
     * @param {DateRangeSelection | null} selectedRangeDate - The selected date.
     * @param {{ startDate: string | false; endDate: string | false }} rangeError - Error returned by the parser or `false`.
     */
    onSelectedDateChange?: (selectedRangeDate: DateRangeSelection | null, rangeError: {
        startDate: string | false;
        endDate: string | false;
    }) => void;
    /**
     * Handler called when the selected date is confirmed/applied.
     * @param {DateRangeSelection | null} appliedRangeDate - The selected date.
     * @param {{ startDate: string | false; endDate: string | false }} rangeError - Error returned by the parser or `false`.
     */
    onApply?: (appliedRangeDate: DateRangeSelection | null, rangeError: {
        startDate: string | false;
        endDate: string | false;
    }) => void;
}
/**
 * Props for the useDatePicker hook.
 *
 * @template SelectionVariant
 * @typedef {SelectionVariant extends "single" ? UseDatePickerSingleProps : SelectionVariant extends "range" ? UseDatePickerRangeProps : never} UseDatePickerProps
 */
export declare type UseDatePickerProps<SelectionVariant> = SelectionVariant extends "single" ? UseDatePickerSingleProps : SelectionVariant extends "range" ? UseDatePickerRangeProps : never;
/**
 * Custom hook for managing date picker state.
 *
 * @template SelectionVariant
 * @param {UseDatePickerProps<SelectionVariant>} props - The props for the date picker.
 * @param {React.ForwardedRef<HTMLDivElement>} ref - The ref for the date picker container.
 * @returns {DatePickerState<SelectionVariant extends "single" ? SingleDateSelection : DateRangeSelection>} The date picker state and helpers.
 */
export declare function useDatePicker<SelectionVariant extends "single" | "range">(props: UseDatePickerProps<SelectionVariant>, ref: React.ForwardedRef<HTMLDivElement>): SingleDatePickerState | RangeDatePickerState;
export {};
