import { CalendarDate, CalendarDateTime, type DateValue, ZonedDateTime } from "@internationalized/date";
import type { KeyboardEventHandler, MouseEventHandler, SyntheticEvent } from "react";
/**
 * Type representing a single date selection.
 */
export declare type SingleDateSelection = DateValue;
/**
 * Type representing multiple date selections.
 */
export declare type MultipleDateSelection = DateValue[];
/**
 * Type representing a date range selection.
 */
export declare type DateRangeSelection = {
    /**
     * The start date of the range.
     */
    startDate?: DateValue | null;
    /**
     * The end date of the range.
     */
    endDate?: DateValue | null;
};
/**
 * Type representing all possible selection value types.
 */
export declare type AllSelectionValueType = SingleDateSelection | MultipleDateSelection | DateRangeSelection | null;
/**
 * The default minimum year used by the calendar.
 */
export declare const CALENDAR_MIN_YEAR = 1900;
/**
 * The default maximum year used by the calendar.
 */
export declare const CALENDAR_MAX_YEAR = 2100;
/**
 * Checks if a value is a single date selection.
 * @param value - The value to check.
 * @returns `true` if the value is a single date selection, otherwise `false`.
 */
export declare function isSingleSelectionValueType(value: any): value is DateValue;
/**
 * Checks if a value is a date range selection.
 * @param value - The value to check.
 * @returns `true` if the value is a date range selection, otherwise `false`.
 */
export declare function isDateRangeSelection(value: any): value is DateRangeSelection;
/**
 * Checks if a value is a multiple date selection.
 * @param value - The value to check.
 * @returns `true` if the value is a multiple date selection, otherwise `false`.
 */
export declare function isMultipleDateSelection(value: any): value is MultipleDateSelection;
/**
 * Base properties for calendar UseCalendarSelection hook.
 * @template SelectionVariantType - The type of the selection variant.
 */
interface UseCalendarSelectionBaseProps<SelectionVariantType> {
    /**
     * The currently hovered date.
     */
    hoveredDate?: DateValue | null;
    /**
     * The currently selected date.
     */
    selectedDate?: SelectionVariantType | null;
    /**
     * The default selected date.
     */
    defaultSelectedDate?: SelectionVariantType;
    /**
     * Callback fired when the selected date changes.
     * @param event - The synthetic event.
     * @param selectedDate - The new selected date.
     */
    onSelectedDateChange?: (event: SyntheticEvent, selectedDate: SelectionVariantType | null) => void;
    /**
     * Function to determine if a day is selectable.
     * @param date - The date to check.
     * @returns `true` if the day is selectable, otherwise `false`.
     */
    isDaySelectable?: (date: DateValue) => boolean;
    /**
     * Callback fired when the hovered date changes.
     * @param event - The synthetic event.
     * @param hoveredDate - The new hovered date.
     */
    onHoveredDateChange?: (event: SyntheticEvent, hoveredDate: DateValue | null) => void;
}
/**
 * UseCalendar hook props to return a calendar day's status
 */
export interface UseCalendarSelectionOffsetProps extends Omit<UseCalendarSelectionBaseProps<DateRangeSelection>, "startDateOffset" | "endDateOffset"> {
    /**
     * The selection variant, set to "offset".
     */
    selectionVariant: "offset";
    /**
     * Function to calculate the start date offset.
     * @param date - The date to offset.
     * @returns The offset start date.
     */
    startDateOffset?: (date: DateValue) => DateValue;
    /**
     * Function to calculate the end date offset.
     * @param date - The date to offset.
     * @returns The offset end date.
     */
    endDateOffset?: (date: DateValue) => DateValue;
}
/**
 * Properties for the range date selection hook.
 */
export interface UseCalendarSelectionRangeProps extends UseCalendarSelectionBaseProps<DateRangeSelection> {
    /**
     * The selection variant, set to "range".
     */
    selectionVariant: "range";
}
/**
 * Properties for the multi-select date selection hook.
 */
export interface UseCalendarSelectionMultiSelectProps extends UseCalendarSelectionBaseProps<MultipleDateSelection> {
    /**
     * The selection variant, set to "multiselect".
     */
    selectionVariant: "multiselect";
}
/**
 * Properties for the single date selection hook.
 */
export interface UseCalendarSelectionSingleProps extends UseCalendarSelectionBaseProps<SingleDateSelection> {
    /**
     * The selection variant, set to "single".
     */
    selectionVariant: "single";
}
/**
 * UseCalendarSelection hook props, wth the selection variant determining the return type of the date selection
 */
export declare type UseCalendarSelectionProps = UseCalendarSelectionSingleProps | UseCalendarSelectionMultiSelectProps | UseCalendarSelectionRangeProps | UseCalendarSelectionOffsetProps;
export declare function useCalendarSelection(props: UseCalendarSelectionProps): {
    state: {
        selectedDate: CalendarDate | CalendarDateTime | ZonedDateTime | DateRangeSelection | MultipleDateSelection | null | undefined;
        hoveredDate: CalendarDate | CalendarDateTime | ZonedDateTime | null | undefined;
    };
    helpers: {
        setSelectedDate: (event: SyntheticEvent<HTMLButtonElement>, newSelectedDate: DateValue) => void;
        isSelected: (date: DateValue) => boolean;
        setHoveredDate: (event: SyntheticEvent, date: DateValue | null) => void;
        isHovered: (date: DateValue) => boolean;
        isSelectedSpan: (date: DateValue) => boolean;
        isHoveredSpan: (date: DateValue) => boolean;
        isSelectedStart: (date: DateValue) => boolean;
        isSelectedEnd: (date: DateValue) => boolean;
        isHoveredOffset: (date: DateValue) => boolean;
        isDaySelectable: ((date: DateValue) => boolean) | undefined;
    };
};
export declare function useCalendarSelectionDay({ date }: {
    date: DateValue;
}): {
    handleClick: MouseEventHandler<HTMLButtonElement>;
    handleKeyDown: KeyboardEventHandler<HTMLButtonElement>;
    handleMouseOver: MouseEventHandler<HTMLButtonElement>;
    handleMouseLeave: MouseEventHandler<HTMLButtonElement>;
    status: {
        selected: boolean;
        selectedSpan: boolean;
        hoveredSpan: boolean;
        selectedStart: boolean;
        selectedEnd: boolean;
        hovered: boolean;
        hoveredOffset: boolean;
    };
    dayProps: {
        className: string;
        "aria-pressed": string | undefined;
        "aria-disabled": string | undefined;
    };
};
export {};
