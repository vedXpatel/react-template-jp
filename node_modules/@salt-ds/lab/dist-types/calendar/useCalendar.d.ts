import { type DateValue } from "@internationalized/date";
import { type SyntheticEvent } from "react";
import { type UseCalendarSelectionMultiSelectProps, type UseCalendarSelectionOffsetProps, type UseCalendarSelectionRangeProps, type UseCalendarSelectionSingleProps } from "./useCalendarSelection";
/**
 * Interface representing the base properties UseCalendar hook.
 */
interface UseCalendarBaseProps {
    /**
     * The default visible month.
     */
    defaultVisibleMonth?: DateValue;
    /**
     * Callback fired when the visible month changes.
     * @param event - The synthetic event.
     * @param visibleMonth - The new visible month.
     */
    onVisibleMonthChange?: (event: SyntheticEvent, visibleMonth: DateValue) => void;
    /**
     * Function to determine if a day is unselectable.
     * @param date - The date to check.
     * @returns A string reason if the day is unselectable, otherwise `false` or `undefined`.
     */
    isDayUnselectable?: (date: DateValue) => string | false | undefined;
    /**
     * Function to determine if a day is highlighted.
     * @param date - The date to check.
     * @returns A string reason if the day is highlighted, otherwise `false` or `undefined`.
     */
    isDayHighlighted?: (date: DateValue) => string | false | undefined;
    /**
     * Function to determine if a day is disabled.
     * @param date - The date to check.
     * @returns A string reason if the day is disabled, otherwise `false` or `undefined`.
     */
    isDayDisabled?: (date: DateValue) => string | false | undefined;
    /**
     * The currently visible month.
     */
    visibleMonth?: DateValue;
    /**
     * If `true`, hides dates that are out of the selectable range.
     */
    hideOutOfRangeDates?: boolean;
    /**
     * The minimum selectable date.
     */
    minDate?: DateValue;
    /**
     * The maximum selectable date.
     */
    maxDate?: DateValue;
    /**
     * The time zone used for date calculations.
     */
    timeZone?: string;
    /**
     * The locale used for date formatting.
     */
    locale?: string;
}
/**
 * UseCalendar hook props for a single date selection Calendar.
 */
export interface UseCalendarSingleProps extends UseCalendarSelectionSingleProps, UseCalendarBaseProps {
    /**
     * The selection variant, set to "single".
     */
    selectionVariant: "single";
}
/**
 * UseCalendar hook props for a date range selection Calendar.
 */
export interface UseCalendarRangeProps extends UseCalendarSelectionRangeProps, UseCalendarBaseProps {
    /**
     * The selection variant, set to "range".
     */
    selectionVariant: "range";
}
/**
 * UseCalendar hook props for a multi-select Calendar.
 */
export interface UseCalendarMultiSelectProps extends UseCalendarSelectionMultiSelectProps, UseCalendarBaseProps {
    /**
     * The selection variant, set to "multiselect".
     */
    selectionVariant: "multiselect";
}
/**
 * UseCalendar hook props for an offset date selection Calendar.
 */
export interface UseCalendarOffsetProps extends UseCalendarSelectionOffsetProps, UseCalendarBaseProps {
    /**
     * The selection variant, set to "offset".
     */
    selectionVariant: "offset";
}
/**
 * UseCalendar hook props, wth the selection variant determining the return type of the date selection
 */
export declare type UseCalendarProps = UseCalendarSingleProps | UseCalendarRangeProps | UseCalendarMultiSelectProps | UseCalendarOffsetProps;
export declare function useCalendar(props: UseCalendarProps): {
    state: {
        selectedDate: import("@internationalized/date").CalendarDate | import("@internationalized/date").CalendarDateTime | import("@internationalized/date").ZonedDateTime | import("./useCalendarSelection").DateRangeSelection | import("./useCalendarSelection").MultipleDateSelection | null | undefined;
        hoveredDate: import("@internationalized/date").CalendarDate | import("@internationalized/date").CalendarDateTime | import("@internationalized/date").ZonedDateTime | null | undefined;
        visibleMonth: DateValue;
        focusedDate: DateValue | null;
        minDate: DateValue | undefined;
        maxDate: DateValue | undefined;
        selectionVariant: "offset" | "range" | "single" | "multiselect";
        hideOutOfRangeDates: boolean | undefined;
        calendarFocused: boolean;
        timeZone: string;
        locale: string;
    };
    helpers: {
        setSelectedDate: (event: SyntheticEvent<HTMLButtonElement, Event>, newSelectedDate: DateValue) => void;
        isSelected: (date: DateValue) => boolean;
        setHoveredDate: (event: SyntheticEvent<Element, Event>, date: DateValue | null) => void;
        isHovered: (date: DateValue) => boolean;
        isSelectedSpan: (date: DateValue) => boolean;
        isHoveredSpan: (date: DateValue) => boolean;
        isSelectedStart: (date: DateValue) => boolean;
        isSelectedEnd: (date: DateValue) => boolean;
        isHoveredOffset: (date: DateValue) => boolean;
        isDaySelectable: ((date: DateValue) => boolean) | undefined;
        setVisibleMonth: (event: SyntheticEvent, newVisibleMonth: DateValue) => void;
        setFocusedDate: (event: SyntheticEvent, date: DateValue) => void;
        setCalendarFocused: import("react").Dispatch<import("react").SetStateAction<boolean>>;
        isDayUnselectable: (date: DateValue) => string | false | undefined;
        isDayHighlighted: (date: DateValue) => string | false | undefined;
        isDayDisabled: (date: DateValue) => string | false | undefined;
        isDayVisible: (date: DateValue) => boolean;
        isOutsideAllowedDates: (date: DateValue) => boolean | undefined;
        isOutsideAllowedMonths: (date: DateValue) => boolean | undefined;
        isOutsideAllowedYears: (date: DateValue) => boolean | undefined;
    };
};
export {};
