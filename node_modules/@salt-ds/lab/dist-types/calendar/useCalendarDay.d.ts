import { type DateValue } from "@internationalized/date";
import { type RefObject } from "react";
/**
 * Interface representing the status of a day in the Calendar.
 */
export interface DayStatus {
    /**
     * If `true`, the day is out of the selectable range.
     */
    outOfRange?: boolean;
    /**
     * If `true`, the day is selected.
     */
    selected?: boolean;
    /**
     * If `true`, the day is today.
     */
    today?: boolean;
    /**
     * If set, the day is unselectable with a reason.
     */
    unselectable?: string | false;
    /**
     * If set, the day is highlighted with a reason.
     */
    highlighted?: string | false;
    /**
     * If `true`, the day is focused.
     */
    focused?: boolean;
    /**
     * If `true`, the day is disabled.
     */
    disabled?: boolean;
    /**
     * If `true`, the day is hidden.
     */
    hidden?: boolean;
}
/**
 * UseCalendar hook props to return a calendar day's status
 */
export interface useCalendarDayProps {
    /**
     * The date of the calendar day.
     */
    date: DateValue;
    /**
     * The month of the calendar day.
     */
    month: DateValue;
}
export declare function useCalendarDay({ date, month }: useCalendarDayProps, ref: RefObject<HTMLElement>): {
    status: DayStatus;
    dayProps: Omit<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref">;
    unselectableReason: string | false | undefined;
    highlightedReason: string | false | undefined;
    locale: string;
    timeZone: string;
};
