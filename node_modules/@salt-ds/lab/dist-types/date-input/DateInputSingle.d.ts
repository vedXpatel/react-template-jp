import { type DateValue } from "@internationalized/date";
import { type ComponentPropsWithoutRef, type InputHTMLAttributes, type ReactNode, type RefObject, type SyntheticEvent } from "react";
import { type SingleDateSelection } from "../calendar";
/**
 * Date error produced by DateInputSingle parser.
 */
export declare type DateInputSingleParserError = string | false;
/**
 * Date error produced by DateInputSingle parser.
 */
export declare type DateInputSingleError = DateInputSingleParserError;
/**
 * Return value of DateInputSingle parser.
 * @template T
 */
export interface DateInputSingleParserResult<T = DateValue | null> {
    /**
     * The parsed date value.
     */
    date: T;
    /**
     * The error encountered during parsing, if any.
     */
    error: DateInputSingleParserError;
}
/**
 * Props for the DateInputSingle component.
 * @template T
 */
export interface DateInputSingleProps<T = SingleDateSelection> extends Omit<ComponentPropsWithoutRef<"div">, "defaultValue">, Pick<ComponentPropsWithoutRef<"input">, "disabled" | "value" | "defaultValue" | "placeholder"> {
    /**
     * The aria-label for accessibility.
     */
    ariaLabel?: string;
    /**
     * Styling variant with full border. Defaults to false.
     */
    bordered?: boolean;
    /**
     * The marker to use in an empty read-only DateInput.
     * Use `''` to disable this feature. Defaults to 'â€”'.
     */
    emptyReadOnlyMarker?: string;
    /**
     * End adornment component.
     */
    endAdornment?: ReactNode;
    /**
     * Attributes applied to the `input` element.
     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dateInput#Attributes
     */
    inputProps?: InputHTMLAttributes<HTMLInputElement>;
    /**
     * If `true`, the component is read-only.
     */
    readOnly?: boolean;
    /**
     * Validation status.
     */
    validationStatus?: "error" | "warning" | "success";
    /**
     * Styling variant. Defaults to "primary".
     */
    variant?: "primary" | "secondary";
    /**
     * Function to format the input value.
     */
    format?: (date: DateValue | null) => string;
    /**
     * Reference for the input.
     */
    inputRef?: RefObject<HTMLInputElement>;
    /**
     * Input value. Use when the input value is controlled.
     */
    value?: string;
    /**
     * The initial input value. Use when the component is uncontrolled.
     */
    defaultValue?: string;
    /**
     * The date value. Use when the component is controlled.
     */
    date?: T | null;
    /**
     * The initial selected date value. Use when the component is uncontrolled.
     */
    defaultDate?: T | null;
    /**
     * Callback fired when the selected date changes.
     * @param event - The synthetic event.
     * @param date - The new date value.
     * @param error - The date input single error.
     */
    onDateChange?: (event: SyntheticEvent, date: T | null, error: DateInputSingleError) => void;
    /**
     * Function to parse date string to valid `DateValue` or null, if invalid or empty.
     * @param inputDate - The input date string.
     * @returns The result of the date input single parser.
     */
    parse?: (inputDate: string) => DateInputSingleParserResult;
    /**
     * Called when input value changes, either due to user interaction or programmatic formatting of valid dates.
     * @param newValue - The new date input value.
     * @param isFormatted - Whether the value is formatted.
     */
    onDateValueChange?: (newValue: string, isFormatted: boolean) => void;
    /**
     * Locale of the entered date.
     */
    locale?: string;
    /**
     * Timezone of the entered date.
     */
    timeZone?: string;
}
export declare const DateInputSingle: import("react").ForwardRefExoticComponent<DateInputSingleProps<DateValue> & import("react").RefAttributes<HTMLDivElement>>;
