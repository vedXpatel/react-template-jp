import { CalendarDateTime, type DateValue, type TimeFields, ZonedDateTime } from "@internationalized/date";
import type { DateRangeSelection, SingleDateSelection } from "../calendar";
export declare type RangeTimeFields = {
    startTime?: TimeFields;
    endTime?: TimeFields;
};
/**
 * Parses a string into a CalendarDate.
 * @param inputDate - The input date string.
 * @returns An object containing the parsed date and any error encountered.
 */
export declare function parseCalendarDate(inputDate: string): {
    date: DateValue | null;
    error: string | false;
};
/**
 * Parses a string into a ZonedDateTime.
 * @param inputDate - The input date string.
 * @param timeZone - The time zone to use for parsing. Defaults to the local time zone.
 * @returns An object containing the parsed date and any error encountered.
 */
export declare function parseZonedDateTime(inputDate: string, timeZone?: string): {
    date: DateValue | null;
    error: string | false;
};
/**
 * Checks if a date supports time fields.
 * @param date - The date to check.
 * @returns `true` if the date supports time fields, otherwise `false`.
 */
export declare const dateSupportsTime: (date: DateValue) => date is CalendarDateTime | ZonedDateTime;
/**
 * Extracts time fields from a date range selection.
 * @param selectedDate - The selected date range.
 * @returns An object containing the start and end time fields.
 */
export declare function extractTimeFieldsFromDateRange(selectedDate: DateRangeSelection | null): RangeTimeFields;
/**
 * Extracts time fields from a single date selection.
 * @param selectedDate - The selected date.
 * @returns The time fields of the selected date, if available.
 */
export declare function extractTimeFieldsFromDate(selectedDate: SingleDateSelection | null): TimeFields | undefined;
