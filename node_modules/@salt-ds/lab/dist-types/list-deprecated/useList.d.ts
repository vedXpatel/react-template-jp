import { type AriaAttributes, type Dispatch, type KeyboardEvent, type KeyboardEventHandler, type MouseEvent, type Ref, type SetStateAction } from "react";
import type { ListMultiSelectionVariant, ListProps, ListSelectionVariant } from "./ListProps";
interface listBoxAriaProps extends Pick<AriaAttributes, "aria-activedescendant" | "aria-multiselectable"> {
    role: string;
}
export interface ListState<Item = string, Variant extends ListSelectionVariant = "default"> {
    id?: string;
    focusVisible: boolean;
    selectedItem?: Variant extends ListMultiSelectionVariant ? Array<Item> : Item;
    highlightedIndex?: number;
    isDeselectable: boolean;
    isMultiSelect: boolean;
    isDisabled: boolean;
}
export interface ListHelpers<Item = string, Variant extends ListSelectionVariant = "default"> {
    setFocusVisible: (visible: boolean) => void;
    setSelectedItem: Dispatch<SetStateAction<(Variant extends ListMultiSelectionVariant ? Item[] : Item) | undefined>>;
    setHighlightedIndex: (highlightedIndex?: number) => void;
    handleSelect: (event: MouseEvent<HTMLElement> | KeyboardEvent<HTMLElement>, index: number | undefined, item: Item) => void;
    keyDownHandlers: {
        [key: string]: KeyboardEventHandler;
    };
}
export declare function useList<Item, Variant extends ListSelectionVariant>(props?: ListProps<Item, Variant>): {
    focusedRef: Ref<any>;
    listProps: Partial<ListProps<Item, Variant>> & listBoxAriaProps;
    state: ListState<Item, Variant>;
    helpers: ListHelpers<Item, Variant>;
};
export {};
