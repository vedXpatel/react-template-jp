import { type Dispatch, type MouseEvent, type MutableRefObject, type SetStateAction, type SyntheticEvent } from "react";
import type { StepperInputProps } from "./StepperInput";
/**
 * Manages increment / decrement logic
 */
export declare const useStepperInput: ({ decimalPlaces, disabled, inputRef, max, min, onChange, readOnly, setValue, step, stepBlock, value, }: Pick<StepperInputProps, "value" | "max" | "min" | "onChange" | "disabled" | "readOnly" | "step" | "inputRef" | "decimalPlaces" | "stepBlock"> & {
    setValue: Dispatch<SetStateAction<string | number | undefined>>;
    inputRef: MutableRefObject<HTMLInputElement | null>;
}) => {
    incrementButtonProps: {
        "aria-label": string;
        disabled: boolean;
        onMouseDown: (event: MouseEvent<HTMLButtonElement>) => void;
        "aria-hidden": boolean;
        tabIndex: number;
        onMouseUp: () => void | undefined;
    };
    decrementButtonProps: {
        "aria-label": string;
        disabled: boolean;
        onMouseDown: (event: MouseEvent<HTMLButtonElement>) => void;
        "aria-hidden": boolean;
        tabIndex: number;
        onMouseUp: () => void | undefined;
    };
    incrementValue: (event?: SyntheticEvent<Element, Event> | undefined, block?: boolean | undefined) => void;
    decrementValue: (event?: SyntheticEvent<Element, Event> | undefined, block?: boolean | undefined) => void;
};
