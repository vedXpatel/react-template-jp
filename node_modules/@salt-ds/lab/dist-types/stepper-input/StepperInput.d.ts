import { type ValidationStatus } from "@salt-ds/core";
import { type ComponentPropsWithoutRef, type InputHTMLAttributes, type ReactNode, type Ref, type SyntheticEvent } from "react";
export interface StepperInputProps extends Omit<ComponentPropsWithoutRef<"div">, "onChange"> {
    /**
     * A boolean. When `true`, the input will receive a full border.
     */
    bordered?: boolean;
    /**
     * The number of decimal places to display.
     */
    decimalPlaces?: number;
    /**
     * Sets the initial default value of the component.
     */
    defaultValue?: number | string;
    /**
     * If `true`, the stepper input will be disabled.
     */
    disabled?: boolean;
    /**
     * The marker to use in an empty read only Input.
     * Use `''` to disable this feature. Defaults to '—'.
     * @default '—'
     */
    emptyReadOnlyMarker?: string;
    /**
     * End adornment component
     */
    endAdornment?: ReactNode;
    /**
     * Whether to hide the stepper buttons. Defaults to `false`.
     * @default false
     */
    hideButtons?: boolean;
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps?: InputHTMLAttributes<HTMLInputElement>;
    /**
     * Optional ref for the input component
     */
    inputRef?: Ref<HTMLInputElement>;
    /**
     * The maximum value that can be selected. Defaults to Number.MAX_SAFE_INTEGER.
     * @default Number.MAX_SAFE_INTEGER
     */
    max?: number;
    /**
     * The minimum value that can be selected. Defaults to Number.MIN_SAFE_INTEGER.
     * @default Number.MIN_SAFE_INTEGER
     */
    min?: number;
    /**
     * Callback when stepper input value is changed.
     * @param event - the event triggers value change, could be undefined during increment / decrement button long press
     */
    onChange?: (event: SyntheticEvent | undefined, value: number | string) => void;
    /**
     * A string. Displayed in a dimmed color when the input value is empty.
     */
    placeholder?: string | undefined;
    /**
     * A boolean. If `true`, the component is not editable by the user.
     */
    readOnly?: boolean;
    /**
     * Start adornment component
     */
    startAdornment?: ReactNode;
    /**
     * The amount to increment or decrement the value by when using the stepper buttons or Up Arrow and Down Arrow keys. Default to 1.
     * @default 1
     */
    step?: number;
    /**
     * The amount to change the value when the value is incremented or decremented by holding Shift and pressing Up arrow or Down arrow keys.
     * Defaults to 10.
     * @default 10
     */
    stepBlock?: number;
    /**
     * Alignment of text within container. Defaults to "left".
     * @default "left"
     */
    textAlign?: "left" | "center" | "right";
    /**
     * Validation status.
     */
    validationStatus?: Extract<ValidationStatus, "error" | "warning" | "success">;
    /**
     * Styling variant. Defaults to "primary".
     * @default "primary"
     */
    variant?: "primary" | "secondary";
    /**
     * The value of the stepper input. The component will be controlled if this prop is provided.
     */
    value?: number | string | undefined;
}
export declare const StepperInput: import("react").ForwardRefExoticComponent<StepperInputProps & import("react").RefAttributes<HTMLDivElement>>;
