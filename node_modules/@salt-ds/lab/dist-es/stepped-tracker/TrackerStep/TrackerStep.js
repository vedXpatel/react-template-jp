import { jsxs, jsx } from 'react/jsx-runtime';
import { makePrefixer, useIcon } from '@salt-ds/core';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef, useEffect } from 'react';
import { TrackerConnector } from '../TrackerConnector/TrackerConnector.js';
import { useSteppedTrackerContext, useTrackerStepContext } from '../SteppedTrackerContext.js';
import css_248z from './TrackerStep.css.js';

const withBaseName = makePrefixer("saltTrackerStep");
const useCheckWithinSteppedTracker = (isWithinSteppedTracker) => {
  useEffect(() => {
    if (process.env.NODE_ENV !== "production") {
      if (!isWithinSteppedTracker) {
        console.error(
          "The TrackerStep component must be placed within a SteppedTracker component"
        );
      }
    }
  }, [isWithinSteppedTracker]);
};
const parseIconName = ({
  stage,
  status,
  active
}) => {
  if (stage === "completed")
    return "completed";
  if (active)
    return "active";
  if (status)
    return status;
  return stage;
};
const TrackerStep = forwardRef(
  function TrackerStep2(props, ref) {
    const {
      stage = "pending",
      status,
      style,
      className,
      children,
      ...restProps
    } = props;
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-tracker-step",
      css: css_248z,
      window: targetWindow
    });
    const { ErrorIcon, WarningIcon, CompletedIcon, ActiveIcon, PendingIcon } = useIcon();
    const { activeStep, totalSteps, isWithinSteppedTracker } = useSteppedTrackerContext();
    const stepNumber = useTrackerStepContext();
    useCheckWithinSteppedTracker(isWithinSteppedTracker);
    const isActive = activeStep === stepNumber;
    const iconName = parseIconName({ stage, status, active: isActive });
    const iconMap = {
      pending: PendingIcon,
      active: ActiveIcon,
      completed: CompletedIcon,
      warning: WarningIcon,
      error: ErrorIcon
    };
    const Icon = iconMap[iconName];
    const connectorState = activeStep > stepNumber ? "active" : "default";
    const hasConnector = stepNumber < totalSteps - 1;
    const innerStyle = {
      ...style,
      "--saltTrackerStep-width": `${100 / totalSteps}%`
    };
    return /* @__PURE__ */ jsxs("li", {
      className: clsx(
        withBaseName(),
        withBaseName(`stage-${stage}`),
        withBaseName(`status-${status}`),
        { [withBaseName("active")]: isActive },
        className
      ),
      style: innerStyle,
      "aria-current": isActive ? "step" : void 0,
      ref,
      ...restProps,
      children: [
        /* @__PURE__ */ jsx(Icon, {}),
        hasConnector && /* @__PURE__ */ jsx(TrackerConnector, {
          state: connectorState
        }),
        /* @__PURE__ */ jsx("div", {
          className: withBaseName("body"),
          children
        })
      ]
    });
  }
);

export { TrackerStep };
//# sourceMappingURL=TrackerStep.js.map
