import { jsx } from 'react/jsx-runtime';
import { useIcon, useForkRef, useControlled, Button } from '@salt-ds/core';
import { SearchIcon } from '@salt-ds/icons';
import { clsx } from 'clsx';
import { forwardRef, useRef } from 'react';
import { InputLegacy } from '../input-legacy/InputLegacy.js';
import { StaticInputAdornment } from '../input-legacy/StaticInputAdornment.js';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import css_248z from './SearchInput.css.js';

const baseName = "saltSearchInput";
const SearchInput = forwardRef(
  function SearchInput2({
    IconComponent = SearchIcon,
    className,
    onChange,
    onClear,
    onKeyUp,
    onSubmit,
    value: valueProp,
    defaultValue,
    ...other
  }, ref) {
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-search-input",
      css: css_248z,
      window: targetWindow
    });
    const { CloseIcon } = useIcon();
    const inputRef = useRef(null);
    const handleRef = useForkRef(inputRef, ref);
    const [value, setValue, isControlled] = useControlled({
      controlled: valueProp,
      default: defaultValue,
      name: "SearchInput",
      state: "value"
    });
    const handleChange = (event, newValue) => {
      setValue(newValue);
      onChange == null ? void 0 : onChange(event, newValue);
    };
    const handleClear = (event) => {
      var _a;
      setValue("");
      if (!isControlled) {
        onChange == null ? void 0 : onChange(event, "");
      }
      onClear == null ? void 0 : onClear();
      (_a = inputRef.current) == null ? void 0 : _a.focus();
    };
    const handleKeyUp = (event) => {
      if (event.key === "Enter" && onSubmit && value) {
        onSubmit == null ? void 0 : onSubmit(value);
      }
      onKeyUp == null ? void 0 : onKeyUp(event);
    };
    return /* @__PURE__ */ jsx(InputLegacy, {
      className: clsx(baseName, className),
      ref: handleRef,
      endAdornment: !!value && /* @__PURE__ */ jsx(Button, {
        className: clsx(`${baseName}-clearButton`),
        onClick: handleClear,
        variant: "secondary",
        children: /* @__PURE__ */ jsx(CloseIcon, {
          "aria-label": "clear input",
          className: `${baseName}-clearIcon`
        })
      }),
      onChange: handleChange,
      onKeyUp: handleKeyUp,
      startAdornment: IconComponent && /* @__PURE__ */ jsx(StaticInputAdornment, {
        children: /* @__PURE__ */ jsx(IconComponent, {
          className: `${baseName}-icon`
        })
      }),
      value: value || "",
      ...other
    });
  }
);

export { SearchInput };
//# sourceMappingURL=SearchInput.js.map
