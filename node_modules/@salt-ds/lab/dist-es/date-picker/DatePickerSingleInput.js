import { jsx } from 'react/jsx-runtime';
import { makePrefixer, useIcon, useForkRef, useControlled, Button } from '@salt-ds/core';
import { clsx } from 'clsx';
import { forwardRef, useRef, useCallback, useEffect } from 'react';
import { DateInputSingle } from '../date-input/DateInputSingle.js';
import '../date-input/DateInputRange.js';
import '@internationalized/date';
import { useDatePickerContext } from './DatePickerContext.js';
import { useDatePickerOverlay } from './DatePickerOverlayProvider.js';

const withBaseName = makePrefixer("saltDatePickerSingleInput");
const DatePickerSingleInput = forwardRef(function DatePickerSingleInput2(props, ref) {
  const {
    className,
    onFocus,
    onBlur,
    value: valueProp,
    defaultValue,
    onDateValueChange,
    ...rest
  } = props;
  const { CalendarIcon } = useIcon();
  const {
    state: { selectedDate, disabled, readOnly, cancelled, locale, timeZone },
    helpers: { setSelectedDate }
  } = useDatePickerContext({ selectionVariant: "single" });
  const {
    state: { open, floatingUIResult },
    helpers: { getReferenceProps, setOpen }
  } = useDatePickerOverlay();
  const inputRef = useForkRef(ref, floatingUIResult == null ? void 0 : floatingUIResult.reference);
  const prevState = useRef();
  const [value, setValue] = useControlled({
    controlled: valueProp,
    default: defaultValue,
    name: "DatePickerSingleInput",
    state: "value"
  });
  const handleCalendarButton = useCallback(() => {
    setOpen(!open);
  }, [open, setOpen]);
  const handleDateChange = useCallback(
    (_event, newDate, error) => {
      setSelectedDate(newDate, error);
    },
    [setSelectedDate]
  );
  const handleDateValueChange = (newDateValue, isFormatted) => {
    setValue(newDateValue);
    onDateValueChange == null ? void 0 : onDateValueChange(newDateValue, isFormatted);
  };
  useEffect(() => {
    if (open) {
      prevState.current = { date: selectedDate, value };
    }
  }, [open]);
  useEffect(() => {
    var _a, _b;
    if (cancelled) {
      setValue((_a = prevState == null ? void 0 : prevState.current) == null ? void 0 : _a.value);
      setSelectedDate(((_b = prevState == null ? void 0 : prevState.current) == null ? void 0 : _b.date) || null, false);
    }
  }, [cancelled]);
  return /* @__PURE__ */ jsx(DateInputSingle, {
    value: value || "",
    locale,
    timeZone,
    className: clsx(withBaseName(), className),
    ref: inputRef,
    date: selectedDate || null,
    readOnly,
    onDateChange: handleDateChange,
    onDateValueChange: handleDateValueChange,
    endAdornment: /* @__PURE__ */ jsx(Button, {
      appearance: "transparent",
      sentiment: "neutral",
      onClick: handleCalendarButton,
      disabled,
      "aria-label": "Open Calendar",
      children: /* @__PURE__ */ jsx(CalendarIcon, {})
    }),
    ...getReferenceProps({
      ...rest,
      onKeyDown: (event) => {
        if (event.key === "ArrowDown") {
          setOpen(true);
        }
      }
    })
  });
});

export { DatePickerSingleInput };
//# sourceMappingURL=DatePickerSingleInput.js.map
