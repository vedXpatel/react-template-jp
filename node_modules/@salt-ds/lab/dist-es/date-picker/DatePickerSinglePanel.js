import { jsxs, jsx } from 'react/jsx-runtime';
import { getLocalTimeZone, startOfMonth, today } from '@internationalized/date';
import { makePrefixer, useControlled, StackLayout, FlexItem, FormFieldHelperText, FlexLayout, FormFieldContext } from '@salt-ds/core';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import clsx from 'clsx';
import { forwardRef, useState, useCallback } from 'react';
import { Calendar } from '../calendar/Calendar.js';
import { CalendarNavigation } from '../calendar/CalendarNavigation.js';
import { CalendarWeekHeader } from '../calendar/CalendarWeekHeader.js';
import { CalendarDateGrid } from '../calendar/CalendarDateGrid.js';
import '../calendar/internal/CalendarContext.js';
import { getCurrentLocale } from '../calendar/formatDate.js';
import '../calendar/useCalendarSelection.js';
import css_248z from './DatePickerPanel.css.js';
import './DatePicker.js';
import './DatePickerActions.js';
import { useDatePickerContext } from './DatePickerContext.js';
import './DatePickerOverlay.js';
import './DatePickerSingleInput.js';
import './DatePickerRangeInput.js';
import './DatePickerRangePanel.js';

const withBaseName = makePrefixer("saltDatePickerPanel");
const DatePickerSinglePanel = forwardRef(function DatePickerSinglePanel2(props, ref) {
  const {
    CalendarProps,
    CalendarWeekHeaderProps,
    CalendarNavigationProps,
    CalendarDataGridProps,
    className,
    defaultVisibleMonth,
    visibleMonth: visibleMonthProp,
    onVisibleMonthChange,
    helperText,
    onSelect,
    ...rest
  } = props;
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-date-picker-single-panel",
    css: css_248z,
    window: targetWindow
  });
  const {
    state: {
      selectedDate,
      timeZone = getLocalTimeZone(),
      minDate = startOfMonth(today(timeZone)),
      maxDate = minDate.add({ months: 1 }),
      locale = getCurrentLocale()
    },
    helpers: { setSelectedDate }
  } = useDatePickerContext({ selectionVariant: "single" });
  const [hoveredDate, setHoveredDate] = useState(null);
  const [uncontrolledDefaultVisibleMonth] = useState(
    () => defaultVisibleMonth || startOfMonth(selectedDate || today(timeZone))
  );
  const [visibleMonth, setVisibleMonth] = useControlled({
    controlled: visibleMonthProp,
    default: uncontrolledDefaultVisibleMonth,
    name: "DatePickerSinglePanel",
    state: "visibleMonth"
  });
  const handleSelectedDateChange = useCallback(
    (event, newDate) => {
      setSelectedDate(newDate, false);
      onSelect == null ? void 0 : onSelect(event, newDate);
    },
    [setSelectedDate, onSelect]
  );
  const handleHoveredDateChange = useCallback(
    (event, newHoveredDate) => {
      setHoveredDate(newHoveredDate);
      if (newHoveredDate && (CalendarProps == null ? void 0 : CalendarProps.onHoveredDateChange)) {
        CalendarProps.onHoveredDateChange(event, newHoveredDate);
      }
    },
    [CalendarProps == null ? void 0 : CalendarProps.onHoveredDateChange]
  );
  const handleVisibleMonthChange = useCallback(
    (event, newVisibleMonth) => {
      setVisibleMonth(newVisibleMonth);
      if (onVisibleMonthChange) {
        onVisibleMonthChange(event, newVisibleMonth);
      }
    },
    [onVisibleMonthChange]
  );
  const baseCalendarProps = {
    selectionVariant: "single",
    visibleMonth,
    hoveredDate,
    onHoveredDateChange: handleHoveredDateChange,
    onVisibleMonthChange: handleVisibleMonthChange,
    onSelectedDateChange: handleSelectedDateChange,
    hideOutOfRangeDates: true,
    selectedDate,
    minDate,
    maxDate,
    locale,
    timeZone,
    ...CalendarProps
  };
  return /* @__PURE__ */ jsxs(StackLayout, {
    separators: true,
    gap: 0,
    className: clsx(className, withBaseName("container")),
    ref,
    ...rest,
    children: [
      helperText && /* @__PURE__ */ jsx(FlexItem, {
        className: withBaseName("header"),
        children: /* @__PURE__ */ jsx(FormFieldHelperText, {
          children: helperText
        })
      }),
      /* @__PURE__ */ jsx(FlexLayout, {
        gap: 0,
        children: /* @__PURE__ */ jsx(FormFieldContext.Provider, {
          value: {},
          children: /* @__PURE__ */ jsxs(Calendar, {
            selectionVariant: "single",
            ...baseCalendarProps,
            children: [
              /* @__PURE__ */ jsx(CalendarNavigation, {
                ...CalendarNavigationProps
              }),
              /* @__PURE__ */ jsx(CalendarWeekHeader, {
                ...CalendarWeekHeaderProps
              }),
              /* @__PURE__ */ jsx(CalendarDateGrid, {
                ...CalendarDataGridProps
              })
            ]
          })
        })
      })
    ]
  });
});

export { DatePickerSinglePanel };
//# sourceMappingURL=DatePickerSinglePanel.js.map
