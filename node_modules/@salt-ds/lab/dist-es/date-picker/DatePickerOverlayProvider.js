import { jsx } from 'react/jsx-runtime';
import { flip, useInteractions, useDismiss } from '@floating-ui/react';
import { createContext, useControlled, useFloatingUI } from '@salt-ds/core';
import { useRef, useEffect, useCallback, useMemo, useContext } from 'react';

const DatePickerOverlayContext = createContext("DatePickerOverlayContext", void 0);
const DatePickerOverlayProvider = ({ open: openProp, defaultOpen, children }) => {
  const [open, setOpenState] = useControlled({
    controlled: openProp,
    default: Boolean(defaultOpen),
    name: "DatePicker",
    state: "openDatePickerOverlay"
  });
  const triggeringElement = useRef(null);
  useEffect(() => {
    if (!open) {
      const trigger = triggeringElement.current;
      if (trigger) {
        trigger.focus();
      }
      if (trigger instanceof HTMLInputElement) {
        setTimeout(() => {
          trigger.setSelectionRange(0, trigger.value.length);
        }, 0);
      }
      triggeringElement.current = null;
    }
  }, [open]);
  const setOpen = useCallback((newOpen) => {
    if (newOpen) {
      triggeringElement.current = document.activeElement;
    }
    setOpenState(newOpen);
  }, []);
  const floatingUIResult = useFloatingUI({
    open,
    onOpenChange: setOpen,
    placement: "bottom-start",
    middleware: [flip({ fallbackStrategy: "initialPlacement" })]
  });
  const {
    getFloatingProps: _getFloatingPropsCallback,
    getReferenceProps: _getReferenceProps
  } = useInteractions([useDismiss(floatingUIResult.context)]);
  const getFloatingPropsCallback = useMemo(
    () => _getFloatingPropsCallback,
    [_getFloatingPropsCallback]
  );
  const getReferenceProps = useMemo(
    () => _getReferenceProps,
    [_getReferenceProps]
  );
  const getFloatingProps = useCallback(
    (userProps) => {
      var _a, _b;
      const { x, y, strategy, elements } = floatingUIResult;
      return {
        top: y != null ? y : 0,
        left: x != null ? x : 0,
        position: strategy,
        width: (_a = elements.floating) == null ? void 0 : _a.offsetWidth,
        height: (_b = elements.floating) == null ? void 0 : _b.offsetHeight,
        ...getFloatingPropsCallback(userProps)
      };
    },
    [getFloatingPropsCallback, floatingUIResult]
  );
  const state = useMemo(
    () => ({
      open,
      floatingUIResult
    }),
    [open, floatingUIResult]
  );
  const helpers = useMemo(
    () => ({
      getFloatingProps,
      getReferenceProps,
      setOpen
    }),
    [getFloatingProps, getReferenceProps, setOpen]
  );
  const contextValue = useMemo(() => ({ state, helpers }), [state, helpers]);
  return /* @__PURE__ */ jsx(DatePickerOverlayContext.Provider, {
    value: contextValue,
    children
  });
};
const useDatePickerOverlay = () => {
  const context = useContext(DatePickerOverlayContext);
  if (!context) {
    throw new Error(
      "useDatePickerOverlay must be used within a DatePickerOverlayProvider"
    );
  }
  return context;
};

export { DatePickerOverlayProvider, useDatePickerOverlay };
//# sourceMappingURL=DatePickerOverlayProvider.js.map
