import { jsxs, jsx } from 'react/jsx-runtime';
import { makePrefixer, Button } from '@salt-ds/core';
import { clsx } from 'clsx';
import { forwardRef, useEffect } from 'react';
import './DatePicker.js';
import { useDatePickerContext } from './DatePickerContext.js';
import './DatePickerOverlay.js';
import './DatePickerSingleInput.js';
import './DatePickerSinglePanel.js';
import './DatePickerRangeInput.js';
import './DatePickerRangePanel.js';
import css_248z from './DatePickerActions.css.js';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';

const withBaseName = makePrefixer("saltDatePickerActions");
const DatePickerActions = forwardRef(function DatePickerActions2(props, ref) {
  const {
    applyButtonRef,
    ApplyButtonProps,
    cancelButtonRef,
    children,
    className,
    CancelButtonProps,
    onApply,
    onCancel,
    selectionVariant,
    ...rest
  } = props;
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-date-picker-actions",
    css: css_248z,
    window: targetWindow
  });
  let stateAndHelpers;
  if (selectionVariant === "range") {
    stateAndHelpers = useDatePickerContext({
      selectionVariant: "range"
    });
  } else {
    stateAndHelpers = useDatePickerContext({
      selectionVariant: "single"
    });
  }
  const {
    state: { selectedDate },
    helpers: { cancel, apply, setEnableApply }
  } = stateAndHelpers;
  useEffect(() => {
    setEnableApply(true);
  }, [setEnableApply]);
  const handleCancel = (event) => {
    var _a;
    cancel();
    (_a = CancelButtonProps == null ? void 0 : CancelButtonProps.onClick) == null ? void 0 : _a.call(CancelButtonProps, event);
    onCancel == null ? void 0 : onCancel(event);
  };
  const handleApply = (event) => {
    var _a;
    if (selectionVariant === "single") {
      apply(selectedDate, false);
      onApply == null ? void 0 : onApply(event, selectedDate);
    } else {
      apply(selectedDate, { startDate: false, endDate: false });
      onApply == null ? void 0 : onApply(event, selectedDate);
    }
    (_a = ApplyButtonProps == null ? void 0 : ApplyButtonProps.onClick) == null ? void 0 : _a.call(ApplyButtonProps, event);
  };
  return /* @__PURE__ */ jsxs("div", {
    className: clsx(className, withBaseName()),
    ref,
    ...rest,
    children: [
      /* @__PURE__ */ jsx("div", {
        className: withBaseName("body"),
        children
      }),
      /* @__PURE__ */ jsx(Button, {
        appearance: "transparent",
        sentiment: "neutral",
        ref: cancelButtonRef,
        ...CancelButtonProps,
        onClick: handleCancel,
        className: clsx(withBaseName("action"), CancelButtonProps == null ? void 0 : CancelButtonProps.className),
        children: "Cancel"
      }),
      /* @__PURE__ */ jsx(Button, {
        appearance: "solid",
        sentiment: "accented",
        ref: applyButtonRef,
        ...ApplyButtonProps,
        onClick: handleApply,
        className: clsx(withBaseName("action"), ApplyButtonProps == null ? void 0 : ApplyButtonProps.className),
        children: "Apply"
      })
    ]
  });
});

export { DatePickerActions };
//# sourceMappingURL=DatePickerActions.js.map
