import { jsx } from 'react/jsx-runtime';
import { makePrefixer } from '@salt-ds/core';
import { clsx } from 'clsx';
import { useState, useEffect } from 'react';
import { InputLegacy } from '../input-legacy/InputLegacy.js';
import '../input-legacy/StaticInputAdornment.js';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import css_248z from './RGBAInput.css.js';

const withBaseName = makePrefixer("saltColorChooser");
const AlphaInput = ({
  alphaValue,
  onSubmit,
  showAsOpacity = false
}) => {
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-rgba-input",
    css: css_248z,
    window: targetWindow
  });
  const [alphaInputValue, setAlphaInputValue] = useState(
    !Number.isNaN(alphaValue) ? alphaValue.toString() : ""
  );
  useEffect(() => {
    setAlphaInputValue(!Number.isNaN(alphaValue) ? alphaValue.toString() : "");
  }, [alphaValue]);
  const handleAlphaInputChange = (event, newValue) => {
    const value = newValue.replace("%", "");
    let alpha = value;
    if (value.trim() === "" || Number.isNaN(value)) {
      alpha = "";
    }
    if (showAsOpacity && Number.parseFloat(value)) {
      alpha = (Number.parseFloat(value) / 100).toString();
    }
    if (value.charAt(1) === "." || value.charAt(0) === ".") {
      alpha = value;
    }
    setAlphaInputValue(alpha);
  };
  const handleKeyDownAlpha = (e) => {
    if (e.key === "Enter") {
      const alpha = alphaInputValue.trim().replace("%", "") !== "" ? Number.parseFloat(alphaInputValue) : 0;
      const validatedAlpha = Math.max(0, Math.min(alpha, 1));
      setAlphaInputValue(validatedAlpha.toString());
      onSubmit(validatedAlpha);
    }
  };
  const handleOnBlurAlpha = (e) => {
    const alpha = alphaInputValue.trim() !== "" ? Number.parseFloat(alphaInputValue) : 0;
    const validatedAlpha = Math.max(0, Math.min(alpha, 1));
    setAlphaInputValue(validatedAlpha.toString());
    onSubmit(validatedAlpha, e);
  };
  return /* @__PURE__ */ jsx(InputLegacy, {
    inputProps: {
      "data-testid": "a-input"
    },
    className: clsx({
      [withBaseName("rgbaInput")]: !showAsOpacity,
      [withBaseName("opacityInput")]: showAsOpacity
    }),
    value: showAsOpacity ? alphaInputValue ? `${(Number.parseFloat(alphaInputValue) * 100).toString()}%` : "%" : alphaInputValue,
    onChange: handleAlphaInputChange,
    onBlur: handleOnBlurAlpha,
    onKeyDown: handleKeyDownAlpha
  });
};

export { AlphaInput };
//# sourceMappingURL=AlphaInputField.js.map
