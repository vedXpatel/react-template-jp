{"version":3,"file":"DateInputRange.js","sources":["../src/date-input/DateInputRange.tsx"],"sourcesContent":["import { type DateValue, getLocalTimeZone } from \"@internationalized/date\";\nimport {\n  type InputProps,\n  StatusAdornment,\n  makePrefixer,\n  useControlled,\n  useForkRef,\n  useFormFieldProps,\n  useId,\n} from \"@salt-ds/core\";\nimport { useComponentCssInjection } from \"@salt-ds/styles\";\nimport { useWindow } from \"@salt-ds/window\";\nimport { clsx } from \"clsx\";\nimport {\n  type ChangeEvent,\n  type ChangeEventHandler,\n  type ComponentPropsWithoutRef,\n  type FocusEventHandler,\n  type InputHTMLAttributes,\n  type KeyboardEventHandler,\n  type MouseEventHandler,\n  type ReactNode,\n  type Ref,\n  type SyntheticEvent,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  type DateRangeSelection,\n  formatDate as defaultFormatDate,\n  getCurrentLocale,\n} from \"../calendar\";\nimport dateInputCss from \"./DateInput.css\";\nimport type { DateInputSingleParserError } from \"./DateInputSingle\";\nimport {\n  type RangeTimeFields,\n  extractTimeFieldsFromDateRange,\n  parseCalendarDate,\n} from \"./utils\";\n\nconst withBaseName = makePrefixer(\"saltDateInput\");\n\n/**\n * Date error produced by DateInputRange parser.\n */\nexport type DateInputRangeParserError = string | false;\n\n/**\n * DateInputRange raw value or null if no date is defined.\n */\nexport type DateInputRangeValue = {\n  startDate?: string | null;\n  endDate?: string | null;\n};\n\n/**\n * Return value of DateInputRange parser.\n * @template T\n */\nexport interface DateInputRangeParserResult<T = DateValue | null> {\n  /**\n   * The parsed date value.\n   */\n  date: T;\n  /**\n   * The error encountered during parsing, if any.\n   */\n  error: DateInputRangeParserError;\n}\n\n/**\n * Date Range error returned with selected date to indicate invalid dates.\n */\nexport type DateInputRangeError = {\n  /**\n   * The error for the start date.\n   */\n  startDate: DateInputSingleParserError;\n  /**\n   * The error for the end date.\n   */\n  endDate: DateInputSingleParserError;\n};\n\n/**\n * Props for the DateInputRange component.\n * @template T\n */\nexport interface DateInputRangeProps<T = DateRangeSelection>\n  extends Omit<ComponentPropsWithoutRef<\"div\">, \"defaultValue\" | \"onChange\">,\n    Omit<InputProps, \"defaultValue\" | \"inputRef\" | \"value\" | \"onChange\"> {\n  /**\n   * The aria-label for accessibility.\n   */\n  ariaLabel?: string;\n  /**\n   * Styling variant with full border. Defaults to false.\n   */\n  bordered?: boolean;\n  /**\n   * The marker to use in an empty read-only DateInput.\n   * Use `''` to disable this feature. Defaults to '—'.\n   */\n  emptyReadOnlyMarker?: string;\n  /**\n   * End adornment component.\n   */\n  endAdornment?: ReactNode;\n  /**\n   * Attributes applied to the start `input` element.\n   * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dateInput#Attributes\n   */\n  startInputProps?: InputHTMLAttributes<HTMLInputElement>;\n  /**\n   * Attributes applied to the end `input` element.\n   * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dateInput#Attributes\n   */\n  endInputProps?: InputHTMLAttributes<HTMLInputElement>;\n  /**\n   * If `true`, the component is read-only.\n   */\n  readOnly?: boolean;\n  /**\n   * Validation status.\n   */\n  validationStatus?: \"error\" | \"warning\" | \"success\";\n  /**\n   * Styling variant. Defaults to \"primary\".\n   */\n  variant?: \"primary\" | \"secondary\";\n  /**\n   * Function to format the input value.\n   */\n  format?: (date: DateValue | null) => string;\n  /**\n   * Optional ref for the start input component.\n   */\n  startInputRef?: Ref<HTMLInputElement>;\n  /**\n   * Optional ref for the end input component.\n   */\n  endInputRef?: Ref<HTMLInputElement>;\n  /**\n   * Input value. Use when the input value is controlled.\n   */\n  value?: DateInputRangeValue;\n  /**\n   * The initial input value. Use when the component is uncontrolled.\n   */\n  defaultValue?: DateInputRangeValue;\n  /**\n   * The date value. Use when the component is controlled.\n   */\n  date?: T | null;\n  /**\n   * The initial selected date value. Use when the component is uncontrolled.\n   */\n  defaultDate?: T | null;\n  /**\n   * Callback fired when the input value changes.\n   * @param event - The change event.\n   * @param date - The new date input range value.\n   */\n  onChange?: (\n    event: ChangeEvent<HTMLInputElement>,\n    date: DateInputRangeValue,\n  ) => void;\n  /**\n   * Callback fired when the selected date changes.\n   * @param event - The synthetic event.\n   * @param date - The new date value.\n   * @param error - The date input range error.\n   */\n  onDateChange?: (\n    event: SyntheticEvent,\n    date: T | null,\n    error: DateInputRangeError,\n  ) => void;\n  /**\n   * Called when input values change, either due to user interaction or programmatic formatting of valid dates.\n   * @param newValue - The new date input range value.\n   * @param isFormatted - Whether the value is formatted.\n   */\n  onDateValueChange?: (\n    newValue: DateInputRangeValue,\n    isFormatted: boolean,\n  ) => void;\n  /**\n   * Function to parse date string to valid `DateValue` or null, if invalid.\n   * @param inputDate - The input date string.\n   * @returns The result of the date input range parser.\n   */\n  parse?: (inputDate: string) => DateInputRangeParserResult;\n  /**\n   * Locale of the entered date.\n   */\n  locale?: string;\n  /**\n   * Timezone of the entered date.\n   */\n  timeZone?: string;\n}\n\nexport const DateInputRange = forwardRef<HTMLDivElement, DateInputRangeProps>(\n  function DateInputRange(props, ref) {\n    const {\n      bordered = false,\n      className,\n      disabled,\n      \"aria-label\": ariaLabel,\n      date: dateProp,\n      defaultDate = {},\n      onDateChange,\n      value: valueProp,\n      defaultValue = { startDate: \"\", endDate: \"\" },\n      onChange,\n      onClick,\n      onDateValueChange,\n      emptyReadOnlyMarker = \"—\",\n      endAdornment,\n      format: formatProp,\n      startInputProps = {},\n      endInputProps = {},\n      startInputRef: startInputRefProp,\n      endInputRef: endInputRefProp,\n      parse = parseCalendarDate,\n      placeholder = \"dd mmm yyyy\",\n      readOnly: readOnlyProp,\n      validationStatus: validationStatusProp,\n      variant = \"primary\",\n      locale = getCurrentLocale(),\n      timeZone = getLocalTimeZone(),\n      ...rest\n    } = props;\n    const wrapperRef = useRef(null);\n    const handleWrapperRef = useForkRef<HTMLDivElement>(ref, wrapperRef);\n    const lastError = useRef<{\n      startDate: DateInputRangeParserError;\n      endDate: DateInputRangeParserError;\n    }>({\n      startDate: false,\n      endDate: false,\n    });\n\n    const startInputRef = useRef<HTMLInputElement>(null);\n    const handleStartInputRef = useForkRef(startInputRef, startInputRefProp);\n    const endInputRef = useRef<HTMLInputElement>(null);\n    const handleEndInputRef = useForkRef(endInputRef, endInputRefProp);\n\n    const startInputID = useId();\n    const endInputID = useId();\n\n    const targetWindow = useWindow();\n    useComponentCssInjection({\n      testId: \"salt-date-input-range\",\n      css: dateInputCss,\n      window: targetWindow,\n    });\n\n    const [date, setDate] = useControlled({\n      controlled: dateProp,\n      default: defaultDate,\n      name: \"DateInputRange\",\n      state: \"date\",\n    });\n    const [dateValue, setDateValue] = useControlled({\n      controlled: valueProp,\n      default: defaultValue,\n      name: \"DateInputRange\",\n      state: \"dateValue\",\n    });\n\n    const preservedTime = useRef<RangeTimeFields>({});\n    preservedTime.current = extractTimeFieldsFromDateRange(date);\n\n    const format = useCallback(\n      (date: DateValue | null) => {\n        return formatProp\n          ? formatProp(date)\n          : defaultFormatDate(date, locale, { timeZone });\n      },\n      [formatProp, locale, timeZone],\n    );\n\n    const setDateValueFromDate = (newDate: DateInputRangeProps[\"date\"]) => {\n      let newDateValue = { ...dateValue };\n      const formattedStartDate = format(newDate?.startDate ?? null);\n      if (formattedStartDate) {\n        newDateValue = { ...newDateValue, startDate: formattedStartDate };\n      }\n      const formattedEndDate = format(newDate?.endDate ?? null);\n      if (formattedEndDate) {\n        newDateValue = { ...newDateValue, endDate: formattedEndDate };\n      }\n      if (\n        newDateValue?.startDate !== dateValue?.startDate ||\n        newDateValue?.endDate !== dateValue?.endDate\n      ) {\n        onDateValueChange?.(newDateValue, true);\n      }\n      setDateValue(newDateValue);\n    };\n\n    // Update date string value when selected date changes\n    useEffect(() => {\n      setDateValueFromDate(date);\n    }, [date, date?.startDate, date?.endDate]);\n\n    const [focused, setFocused] = useState(false);\n\n    const {\n      a11yProps: {\n        \"aria-describedby\": formFieldDescribedBy,\n        \"aria-labelledby\": formFieldLabelledBy,\n      } = {},\n      disabled: formFieldDisabled,\n      readOnly: formFieldReadOnly,\n      necessity: formFieldRequired,\n      validationStatus: formFieldValidationStatus,\n    } = useFormFieldProps();\n\n    const isReadOnly = readOnlyProp || formFieldReadOnly;\n    const isDisabled = disabled || formFieldDisabled;\n\n    const validationStatus = formFieldValidationStatus ?? validationStatusProp;\n\n    const {\n      \"aria-describedby\": startInputPropsDescribedBy,\n      \"aria-labelledby\": startInputPropsLabelledBy,\n      onBlur: startInputPropsOnBlur,\n      onChange: startInputPropsOnChange,\n      onKeyDown: startInputPropsOnKeyDown,\n      onFocus: startInputPropsOnFocus,\n      required: startInputPropsRequired,\n      ...restStartInputProps\n    } = startInputProps;\n\n    const startInputIsRequired = formFieldRequired\n      ? [\"required\", \"asterisk\"].includes(formFieldRequired)\n      : startInputPropsRequired;\n\n    const {\n      \"aria-describedby\": endInputPropsDescribedBy,\n      \"aria-labelledby\": endInputPropsLabelledBy,\n      onBlur: endInputPropsOnBlur,\n      onChange: endInputPropsOnChange,\n      onKeyDown: endInputPropsOnKeyDown,\n      onFocus: endInputPropsOnFocus,\n      required: endInputPropsRequired,\n      ...restEndInputProps\n    } = endInputProps;\n\n    const endInputIsRequired = formFieldRequired\n      ? [\"required\", \"asterisk\"].includes(formFieldRequired)\n      : endInputPropsRequired;\n\n    const apply = (event: SyntheticEvent) => {\n      const { date: newStartDate, error: startDateError } = parse(\n        dateValue.startDate ?? \"\",\n      );\n      const { date: newEndDate, error: endDateError } = parse(\n        dateValue.endDate || \"\",\n      );\n\n      const hasDateChanged = (\n        newDate: DateValue | null,\n        oldDate: DateValue | null,\n      ): boolean => {\n        if (newDate && oldDate) {\n          return newDate.compare(oldDate) !== 0;\n        }\n        return newDate !== oldDate;\n      };\n\n      const createNewDateRange = (\n        startDate: DateValue | null,\n        endDate: DateValue | null,\n      ): DateRangeSelection | null => {\n        if (!startDate && !endDate) {\n          return null;\n        }\n\n        const dateRange: DateRangeSelection = {};\n        dateRange.startDate = startDate;\n        dateRange.endDate = endDate;\n\n        return dateRange;\n      };\n\n      const hasStartDateChanged = hasDateChanged(\n        newStartDate,\n        date?.startDate || null,\n      );\n      const hasEndDateChanged = hasDateChanged(\n        newEndDate,\n        date?.endDate || null,\n      );\n      const hasStartOrEndDateChanged = hasStartDateChanged || hasEndDateChanged;\n\n      const newDate: DateRangeSelection | null = createNewDateRange(\n        newStartDate,\n        newEndDate,\n      );\n\n      if (newDate?.startDate || newDate?.endDate) {\n        setDateValueFromDate(newDate);\n      }\n\n      if (hasStartOrEndDateChanged) {\n        setDate(newDate);\n        if (newDate?.startDate && preservedTime.current.startTime) {\n          newDate.startDate = newDate.startDate.set(\n            preservedTime.current.startTime,\n          );\n        }\n        if (newDate?.endDate && preservedTime.current.endTime) {\n          newDate.endDate = newDate.endDate.set(preservedTime.current.endTime);\n        }\n      }\n      const error = {\n        startDate: startDateError,\n        endDate: endDateError,\n      };\n      if (\n        hasStartOrEndDateChanged ||\n        lastError.current.startDate !== error.startDate ||\n        lastError.current.endDate !== error.endDate\n      ) {\n        const error = {\n          startDate: startDateError,\n          endDate: endDateError,\n        };\n        onDateChange?.(event, newDate, error);\n        lastError.current = error;\n      }\n    };\n\n    const handleStartInputChange: ChangeEventHandler<HTMLInputElement> = (\n      event,\n    ) => {\n      const newDateValue = { ...dateValue, startDate: event.target.value };\n      setDateValue(newDateValue);\n      startInputPropsOnChange?.(event);\n      onChange?.(event, newDateValue);\n      onDateValueChange?.(newDateValue, false);\n    };\n\n    const handleEndInputChange: ChangeEventHandler<HTMLInputElement> = (\n      event,\n    ) => {\n      const newDateValue = { ...dateValue, endDate: event.target.value };\n      setDateValue(newDateValue);\n      endInputPropsOnChange?.(event);\n      onChange?.(event, newDateValue);\n      onDateValueChange?.(newDateValue, false);\n    };\n\n    const handleStartInputFocus: FocusEventHandler<HTMLInputElement> = (\n      event,\n    ) => {\n      setFocused(true);\n      startInputPropsOnFocus?.(event);\n    };\n\n    const handleEndInputFocus: FocusEventHandler<HTMLInputElement> = (\n      event,\n    ) => {\n      setFocused(true);\n      endInputPropsOnFocus?.(event);\n    };\n\n    const handleStartInputBlur: FocusEventHandler<HTMLInputElement> = (\n      event,\n    ) => {\n      setFocused(false);\n      apply(event);\n      startInputPropsOnBlur?.(event);\n    };\n\n    const handleEndInputBlur: FocusEventHandler<HTMLInputElement> = (event) => {\n      setFocused(false);\n      apply(event);\n      endInputPropsOnBlur?.(event);\n    };\n\n    const handleStartInputKeyDown: KeyboardEventHandler<HTMLInputElement> = (\n      event,\n    ) => {\n      if (event.key === \"Enter\") {\n        apply(event);\n      }\n      startInputPropsOnKeyDown?.(event);\n    };\n\n    const handleEndInputKeyDown: KeyboardEventHandler<HTMLInputElement> = (\n      event,\n    ) => {\n      if (event.key === \"Enter\") {\n        apply(event);\n      }\n      endInputPropsOnKeyDown?.(event);\n    };\n\n    const handleWrapperClick: MouseEventHandler<HTMLDivElement> = (event) => {\n      if (event.target === wrapperRef.current) {\n        const input = startInputRef.current;\n        input?.focus();\n        input?.setSelectionRange(input.value.length, input.value.length);\n      }\n      onClick?.(event);\n    };\n\n    return (\n      <div\n        className={clsx(\n          withBaseName(),\n          withBaseName(variant),\n          {\n            [withBaseName(\"focused\")]: !isDisabled && focused,\n            [withBaseName(\"disabled\")]: isDisabled,\n            [withBaseName(\"readOnly\")]: isReadOnly,\n            [withBaseName(validationStatus ?? \"\")]: validationStatus,\n            [withBaseName(\"bordered\")]: bordered,\n          },\n          className,\n        )}\n        ref={handleWrapperRef}\n        onClick={handleWrapperClick}\n        {...rest}\n      >\n        <input\n          autoComplete=\"off\"\n          aria-describedby={clsx(\n            formFieldDescribedBy,\n            startInputPropsDescribedBy,\n          )}\n          aria-labelledby={clsx(\n            formFieldLabelledBy,\n            startInputPropsLabelledBy,\n            startInputID,\n          )}\n          aria-label={clsx(\"Start date\", ariaLabel)}\n          id={startInputID}\n          className={withBaseName(\"input\")}\n          disabled={isDisabled}\n          readOnly={isReadOnly}\n          ref={handleStartInputRef}\n          tabIndex={isDisabled ? -1 : 0}\n          placeholder={placeholder}\n          size={placeholder.length}\n          value={\n            isReadOnly && !dateValue?.startDate\n              ? emptyReadOnlyMarker\n              : (dateValue.startDate ?? \"\")\n          }\n          {...restStartInputProps}\n          onBlur={handleStartInputBlur}\n          onChange={handleStartInputChange}\n          onKeyDown={handleStartInputKeyDown}\n          onFocus={!isDisabled ? handleStartInputFocus : undefined}\n          required={startInputIsRequired}\n        />\n        <span>-</span>\n        <input\n          autoComplete=\"off\"\n          aria-describedby={clsx(\n            formFieldDescribedBy,\n            endInputPropsDescribedBy,\n          )}\n          aria-labelledby={clsx(\n            formFieldLabelledBy,\n            endInputPropsLabelledBy,\n            endInputID,\n          )}\n          aria-label={clsx(\"End date\", ariaLabel)}\n          id={endInputID}\n          className={withBaseName(\"input\")}\n          disabled={isDisabled}\n          readOnly={isReadOnly}\n          ref={handleEndInputRef}\n          tabIndex={isDisabled ? -1 : 0}\n          placeholder={placeholder}\n          size={placeholder.length}\n          value={\n            isReadOnly && !dateValue?.endDate\n              ? emptyReadOnlyMarker\n              : (dateValue.endDate ?? \"\")\n          }\n          {...restEndInputProps}\n          onBlur={handleEndInputBlur}\n          onChange={handleEndInputChange}\n          onKeyDown={handleEndInputKeyDown}\n          onFocus={!isDisabled ? handleEndInputFocus : undefined}\n          required={endInputIsRequired}\n        />\n        <div className={withBaseName(\"endAdornmentContainer\")}>\n          {!isDisabled && !isReadOnly && validationStatus && (\n            <StatusAdornment status={validationStatus} />\n          )}\n          {endAdornment}\n        </div>\n        <div className={withBaseName(\"activationIndicator\")} />\n      </div>\n    );\n  },\n);\n"],"names":["DateInputRange","dateInputCss","date","defaultFormatDate","_a","_b","newDate","error"],"mappings":";;;;;;;;;;;;;;;;;AA2CA,MAAM,YAAA,GAAe,aAAa,eAAe,CAAA,CAAA;AAmK1C,MAAM,cAAiB,GAAA,UAAA;AAAA,EAC5B,SAASA,eAAe,CAAA,KAAA,EAAO,GAAK,EAAA;AA/MtC,IAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAgNI,IAAM,MAAA;AAAA,MACJ,QAAW,GAAA,KAAA;AAAA,MACX,SAAA;AAAA,MACA,QAAA;AAAA,MACA,YAAc,EAAA,SAAA;AAAA,MACd,IAAM,EAAA,QAAA;AAAA,MACN,cAAc,EAAC;AAAA,MACf,YAAA;AAAA,MACA,KAAO,EAAA,SAAA;AAAA,MACP,YAAe,GAAA,EAAE,SAAW,EAAA,EAAA,EAAI,SAAS,EAAG,EAAA;AAAA,MAC5C,QAAA;AAAA,MACA,OAAA;AAAA,MACA,iBAAA;AAAA,MACA,mBAAsB,GAAA,QAAA;AAAA,MACtB,YAAA;AAAA,MACA,MAAQ,EAAA,UAAA;AAAA,MACR,kBAAkB,EAAC;AAAA,MACnB,gBAAgB,EAAC;AAAA,MACjB,aAAe,EAAA,iBAAA;AAAA,MACf,WAAa,EAAA,eAAA;AAAA,MACb,KAAQ,GAAA,iBAAA;AAAA,MACR,WAAc,GAAA,aAAA;AAAA,MACd,QAAU,EAAA,YAAA;AAAA,MACV,gBAAkB,EAAA,oBAAA;AAAA,MAClB,OAAU,GAAA,SAAA;AAAA,MACV,SAAS,gBAAiB,EAAA;AAAA,MAC1B,WAAW,gBAAiB,EAAA;AAAA,MACzB,GAAA,IAAA;AAAA,KACD,GAAA,KAAA,CAAA;AACJ,IAAM,MAAA,UAAA,GAAa,OAAO,IAAI,CAAA,CAAA;AAC9B,IAAM,MAAA,gBAAA,GAAmB,UAA2B,CAAA,GAAA,EAAK,UAAU,CAAA,CAAA;AACnE,IAAA,MAAM,YAAY,MAGf,CAAA;AAAA,MACD,SAAW,EAAA,KAAA;AAAA,MACX,OAAS,EAAA,KAAA;AAAA,KACV,CAAA,CAAA;AAED,IAAM,MAAA,aAAA,GAAgB,OAAyB,IAAI,CAAA,CAAA;AACnD,IAAM,MAAA,mBAAA,GAAsB,UAAW,CAAA,aAAA,EAAe,iBAAiB,CAAA,CAAA;AACvE,IAAM,MAAA,WAAA,GAAc,OAAyB,IAAI,CAAA,CAAA;AACjD,IAAM,MAAA,iBAAA,GAAoB,UAAW,CAAA,WAAA,EAAa,eAAe,CAAA,CAAA;AAEjE,IAAA,MAAM,eAAe,KAAM,EAAA,CAAA;AAC3B,IAAA,MAAM,aAAa,KAAM,EAAA,CAAA;AAEzB,IAAA,MAAM,eAAe,SAAU,EAAA,CAAA;AAC/B,IAAyB,wBAAA,CAAA;AAAA,MACvB,MAAQ,EAAA,uBAAA;AAAA,MACR,GAAK,EAAAC,QAAA;AAAA,MACL,MAAQ,EAAA,YAAA;AAAA,KACT,CAAA,CAAA;AAED,IAAA,MAAM,CAAC,IAAA,EAAM,OAAO,CAAA,GAAI,aAAc,CAAA;AAAA,MACpC,UAAY,EAAA,QAAA;AAAA,MACZ,OAAS,EAAA,WAAA;AAAA,MACT,IAAM,EAAA,gBAAA;AAAA,MACN,KAAO,EAAA,MAAA;AAAA,KACR,CAAA,CAAA;AACD,IAAA,MAAM,CAAC,SAAA,EAAW,YAAY,CAAA,GAAI,aAAc,CAAA;AAAA,MAC9C,UAAY,EAAA,SAAA;AAAA,MACZ,OAAS,EAAA,YAAA;AAAA,MACT,IAAM,EAAA,gBAAA;AAAA,MACN,KAAO,EAAA,WAAA;AAAA,KACR,CAAA,CAAA;AAED,IAAM,MAAA,aAAA,GAAgB,MAAwB,CAAA,EAAE,CAAA,CAAA;AAChD,IAAc,aAAA,CAAA,OAAA,GAAU,+BAA+B,IAAI,CAAA,CAAA;AAE3D,IAAA,MAAM,MAAS,GAAA,WAAA;AAAA,MACb,CAACC,KAA2B,KAAA;AAC1B,QAAO,OAAA,UAAA,GACH,WAAWA,KAAI,CAAA,GACfC,WAAkBD,KAAM,EAAA,MAAA,EAAQ,EAAE,QAAA,EAAU,CAAA,CAAA;AAAA,OAClD;AAAA,MACA,CAAC,UAAY,EAAA,MAAA,EAAQ,QAAQ,CAAA;AAAA,KAC/B,CAAA;AAEA,IAAM,MAAA,oBAAA,GAAuB,CAAC,OAAyC,KAAA;AA/R3E,MAAA,IAAAE,GAAAC,EAAAA,GAAAA,CAAAA;AAgSM,MAAI,IAAA,YAAA,GAAe,EAAE,GAAG,SAAU,EAAA,CAAA;AAClC,MAAA,MAAM,qBAAqB,MAAOD,CAAAA,CAAAA,GAAAA,GAAA,mCAAS,SAAT,KAAA,IAAA,GAAAA,MAAsB,IAAI,CAAA,CAAA;AAC5D,MAAA,IAAI,kBAAoB,EAAA;AACtB,QAAA,YAAA,GAAe,EAAE,GAAG,YAAc,EAAA,SAAA,EAAW,kBAAmB,EAAA,CAAA;AAAA,OAClE;AACA,MAAA,MAAM,mBAAmB,MAAOC,CAAAA,CAAAA,GAAAA,GAAA,mCAAS,OAAT,KAAA,IAAA,GAAAA,MAAoB,IAAI,CAAA,CAAA;AACxD,MAAA,IAAI,gBAAkB,EAAA;AACpB,QAAA,YAAA,GAAe,EAAE,GAAG,YAAc,EAAA,OAAA,EAAS,gBAAiB,EAAA,CAAA;AAAA,OAC9D;AACA,MAAA,IAAA,CACE,6CAAc,SAAc,OAAA,SAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,SAAA,CAAW,eACvC,YAAc,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,YAAA,CAAA,OAAA,OAAY,uCAAW,OACrC,CAAA,EAAA;AACA,QAAA,iBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,iBAAA,CAAoB,YAAc,EAAA,IAAA,CAAA,CAAA;AAAA,OACpC;AACA,MAAA,YAAA,CAAa,YAAY,CAAA,CAAA;AAAA,KAC3B,CAAA;AAGA,IAAA,SAAA,CAAU,MAAM;AACd,MAAA,oBAAA,CAAqB,IAAI,CAAA,CAAA;AAAA,OACxB,CAAC,IAAA,EAAM,6BAAM,SAAW,EAAA,IAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,IAAA,CAAM,OAAO,CAAC,CAAA,CAAA;AAEzC,IAAA,MAAM,CAAC,OAAA,EAAS,UAAU,CAAA,GAAI,SAAS,KAAK,CAAA,CAAA;AAE5C,IAAM,MAAA;AAAA,MACJ,SAAW,EAAA;AAAA,QACT,kBAAoB,EAAA,oBAAA;AAAA,QACpB,iBAAmB,EAAA,mBAAA;AAAA,UACjB,EAAC;AAAA,MACL,QAAU,EAAA,iBAAA;AAAA,MACV,QAAU,EAAA,iBAAA;AAAA,MACV,SAAW,EAAA,iBAAA;AAAA,MACX,gBAAkB,EAAA,yBAAA;AAAA,QAChB,iBAAkB,EAAA,CAAA;AAEtB,IAAA,MAAM,aAAa,YAAgB,IAAA,iBAAA,CAAA;AACnC,IAAA,MAAM,aAAa,QAAY,IAAA,iBAAA,CAAA;AAE/B,IAAA,MAAM,mBAAmB,yBAA6B,IAAA,IAAA,GAAA,yBAAA,GAAA,oBAAA,CAAA;AAEtD,IAAM,MAAA;AAAA,MACJ,kBAAoB,EAAA,0BAAA;AAAA,MACpB,iBAAmB,EAAA,yBAAA;AAAA,MACnB,MAAQ,EAAA,qBAAA;AAAA,MACR,QAAU,EAAA,uBAAA;AAAA,MACV,SAAW,EAAA,wBAAA;AAAA,MACX,OAAS,EAAA,sBAAA;AAAA,MACT,QAAU,EAAA,uBAAA;AAAA,MACP,GAAA,mBAAA;AAAA,KACD,GAAA,eAAA,CAAA;AAEJ,IAAM,MAAA,oBAAA,GAAuB,oBACzB,CAAC,UAAA,EAAY,UAAU,CAAE,CAAA,QAAA,CAAS,iBAAiB,CACnD,GAAA,uBAAA,CAAA;AAEJ,IAAM,MAAA;AAAA,MACJ,kBAAoB,EAAA,wBAAA;AAAA,MACpB,iBAAmB,EAAA,uBAAA;AAAA,MACnB,MAAQ,EAAA,mBAAA;AAAA,MACR,QAAU,EAAA,qBAAA;AAAA,MACV,SAAW,EAAA,sBAAA;AAAA,MACX,OAAS,EAAA,oBAAA;AAAA,MACT,QAAU,EAAA,qBAAA;AAAA,MACP,GAAA,iBAAA;AAAA,KACD,GAAA,aAAA,CAAA;AAEJ,IAAM,MAAA,kBAAA,GAAqB,oBACvB,CAAC,UAAA,EAAY,UAAU,CAAE,CAAA,QAAA,CAAS,iBAAiB,CACnD,GAAA,qBAAA,CAAA;AAEJ,IAAM,MAAA,KAAA,GAAQ,CAAC,KAA0B,KAAA;AAvW7C,MAAAD,IAAAA,GAAAA,CAAAA;AAwWM,MAAA,MAAM,EAAE,IAAA,EAAM,YAAc,EAAA,KAAA,EAAO,gBAAmB,GAAA,KAAA;AAAA,QAAA,CACpDA,GAAA,GAAA,SAAA,CAAU,SAAV,KAAA,IAAA,GAAAA,GAAuB,GAAA,EAAA;AAAA,OACzB,CAAA;AACA,MAAA,MAAM,EAAE,IAAA,EAAM,UAAY,EAAA,KAAA,EAAO,cAAiB,GAAA,KAAA;AAAA,QAChD,UAAU,OAAW,IAAA,EAAA;AAAA,OACvB,CAAA;AAEA,MAAM,MAAA,cAAA,GAAiB,CACrBE,QAAAA,EACA,OACY,KAAA;AACZ,QAAA,IAAIA,YAAW,OAAS,EAAA;AACtB,UAAOA,OAAAA,QAAAA,CAAQ,OAAQ,CAAA,OAAO,CAAM,KAAA,CAAA,CAAA;AAAA,SACtC;AACA,QAAA,OAAOA,QAAY,KAAA,OAAA,CAAA;AAAA,OACrB,CAAA;AAEA,MAAM,MAAA,kBAAA,GAAqB,CACzB,SAAA,EACA,OAC8B,KAAA;AAC9B,QAAI,IAAA,CAAC,SAAa,IAAA,CAAC,OAAS,EAAA;AAC1B,UAAO,OAAA,IAAA,CAAA;AAAA,SACT;AAEA,QAAA,MAAM,YAAgC,EAAC,CAAA;AACvC,QAAA,SAAA,CAAU,SAAY,GAAA,SAAA,CAAA;AACtB,QAAA,SAAA,CAAU,OAAU,GAAA,OAAA,CAAA;AAEpB,QAAO,OAAA,SAAA,CAAA;AAAA,OACT,CAAA;AAEA,MAAA,MAAM,mBAAsB,GAAA,cAAA;AAAA,QAC1B,YAAA;AAAA,QAAA,CACA,6BAAM,SAAa,KAAA,IAAA;AAAA,OACrB,CAAA;AACA,MAAA,MAAM,iBAAoB,GAAA,cAAA;AAAA,QACxB,UAAA;AAAA,QAAA,CACA,6BAAM,OAAW,KAAA,IAAA;AAAA,OACnB,CAAA;AACA,MAAA,MAAM,2BAA2B,mBAAuB,IAAA,iBAAA,CAAA;AAExD,MAAA,MAAM,OAAqC,GAAA,kBAAA;AAAA,QACzC,YAAA;AAAA,QACA,UAAA;AAAA,OACF,CAAA;AAEA,MAAI,IAAA,CAAA,OAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAS,SAAa,MAAA,OAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAS,OAAS,CAAA,EAAA;AAC1C,QAAA,oBAAA,CAAqB,OAAO,CAAA,CAAA;AAAA,OAC9B;AAEA,MAAA,IAAI,wBAA0B,EAAA;AAC5B,QAAA,OAAA,CAAQ,OAAO,CAAA,CAAA;AACf,QAAA,IAAA,CAAI,OAAS,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAA,SAAA,KAAa,aAAc,CAAA,OAAA,CAAQ,SAAW,EAAA;AACzD,UAAQ,OAAA,CAAA,SAAA,GAAY,QAAQ,SAAU,CAAA,GAAA;AAAA,YACpC,cAAc,OAAQ,CAAA,SAAA;AAAA,WACxB,CAAA;AAAA,SACF;AACA,QAAA,IAAA,CAAI,OAAS,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAA,OAAA,KAAW,aAAc,CAAA,OAAA,CAAQ,OAAS,EAAA;AACrD,UAAA,OAAA,CAAQ,UAAU,OAAQ,CAAA,OAAA,CAAQ,GAAI,CAAA,aAAA,CAAc,QAAQ,OAAO,CAAA,CAAA;AAAA,SACrE;AAAA,OACF;AACA,MAAA,MAAM,KAAQ,GAAA;AAAA,QACZ,SAAW,EAAA,cAAA;AAAA,QACX,OAAS,EAAA,YAAA;AAAA,OACX,CAAA;AACA,MACE,IAAA,wBAAA,IACA,SAAU,CAAA,OAAA,CAAQ,SAAc,KAAA,KAAA,CAAM,aACtC,SAAU,CAAA,OAAA,CAAQ,OAAY,KAAA,KAAA,CAAM,OACpC,EAAA;AACA,QAAA,MAAMC,MAAQ,GAAA;AAAA,UACZ,SAAW,EAAA,cAAA;AAAA,UACX,OAAS,EAAA,YAAA;AAAA,SACX,CAAA;AACA,QAAA,YAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,YAAA,CAAe,OAAO,OAASA,EAAAA,MAAAA,CAAAA,CAAAA;AAC/B,QAAA,SAAA,CAAU,OAAUA,GAAAA,MAAAA,CAAAA;AAAA,OACtB;AAAA,KACF,CAAA;AAEA,IAAM,MAAA,sBAAA,GAA+D,CACnE,KACG,KAAA;AACH,MAAA,MAAM,eAAe,EAAE,GAAG,WAAW,SAAW,EAAA,KAAA,CAAM,OAAO,KAAM,EAAA,CAAA;AACnE,MAAA,YAAA,CAAa,YAAY,CAAA,CAAA;AACzB,MAA0B,uBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,uBAAA,CAAA,KAAA,CAAA,CAAA;AAC1B,MAAA,QAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAW,KAAO,EAAA,YAAA,CAAA,CAAA;AAClB,MAAA,iBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,iBAAA,CAAoB,YAAc,EAAA,KAAA,CAAA,CAAA;AAAA,KACpC,CAAA;AAEA,IAAM,MAAA,oBAAA,GAA6D,CACjE,KACG,KAAA;AACH,MAAA,MAAM,eAAe,EAAE,GAAG,WAAW,OAAS,EAAA,KAAA,CAAM,OAAO,KAAM,EAAA,CAAA;AACjE,MAAA,YAAA,CAAa,YAAY,CAAA,CAAA;AACzB,MAAwB,qBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAA,KAAA,CAAA,CAAA;AACxB,MAAA,QAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAW,KAAO,EAAA,YAAA,CAAA,CAAA;AAClB,MAAA,iBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,iBAAA,CAAoB,YAAc,EAAA,KAAA,CAAA,CAAA;AAAA,KACpC,CAAA;AAEA,IAAM,MAAA,qBAAA,GAA6D,CACjE,KACG,KAAA;AACH,MAAA,UAAA,CAAW,IAAI,CAAA,CAAA;AACf,MAAyB,sBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAAA,KAAA,CAAA,CAAA;AAAA,KAC3B,CAAA;AAEA,IAAM,MAAA,mBAAA,GAA2D,CAC/D,KACG,KAAA;AACH,MAAA,UAAA,CAAW,IAAI,CAAA,CAAA;AACf,MAAuB,oBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,oBAAA,CAAA,KAAA,CAAA,CAAA;AAAA,KACzB,CAAA;AAEA,IAAM,MAAA,oBAAA,GAA4D,CAChE,KACG,KAAA;AACH,MAAA,UAAA,CAAW,KAAK,CAAA,CAAA;AAChB,MAAA,KAAA,CAAM,KAAK,CAAA,CAAA;AACX,MAAwB,qBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAA,KAAA,CAAA,CAAA;AAAA,KAC1B,CAAA;AAEA,IAAM,MAAA,kBAAA,GAA0D,CAAC,KAAU,KAAA;AACzE,MAAA,UAAA,CAAW,KAAK,CAAA,CAAA;AAChB,MAAA,KAAA,CAAM,KAAK,CAAA,CAAA;AACX,MAAsB,mBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,mBAAA,CAAA,KAAA,CAAA,CAAA;AAAA,KACxB,CAAA;AAEA,IAAM,MAAA,uBAAA,GAAkE,CACtE,KACG,KAAA;AACH,MAAI,IAAA,KAAA,CAAM,QAAQ,OAAS,EAAA;AACzB,QAAA,KAAA,CAAM,KAAK,CAAA,CAAA;AAAA,OACb;AACA,MAA2B,wBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,wBAAA,CAAA,KAAA,CAAA,CAAA;AAAA,KAC7B,CAAA;AAEA,IAAM,MAAA,qBAAA,GAAgE,CACpE,KACG,KAAA;AACH,MAAI,IAAA,KAAA,CAAM,QAAQ,OAAS,EAAA;AACzB,QAAA,KAAA,CAAM,KAAK,CAAA,CAAA;AAAA,OACb;AACA,MAAyB,sBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAAA,KAAA,CAAA,CAAA;AAAA,KAC3B,CAAA;AAEA,IAAM,MAAA,kBAAA,GAAwD,CAAC,KAAU,KAAA;AACvE,MAAI,IAAA,KAAA,CAAM,MAAW,KAAA,UAAA,CAAW,OAAS,EAAA;AACvC,QAAA,MAAM,QAAQ,aAAc,CAAA,OAAA,CAAA;AAC5B,QAAO,KAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,KAAA,CAAA,KAAA,EAAA,CAAA;AACP,QAAA,KAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,KAAA,CAAO,iBAAkB,CAAA,KAAA,CAAM,KAAM,CAAA,MAAA,EAAQ,MAAM,KAAM,CAAA,MAAA,CAAA,CAAA;AAAA,OAC3D;AACA,MAAU,OAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAA,KAAA,CAAA,CAAA;AAAA,KACZ,CAAA;AAEA,IAAA,uBACG,IAAA,CAAA,KAAA,EAAA;AAAA,MACC,SAAW,EAAA,IAAA;AAAA,QACT,YAAa,EAAA;AAAA,QACb,aAAa,OAAO,CAAA;AAAA,QACpB;AAAA,UACE,CAAC,YAAA,CAAa,SAAS,CAAA,GAAI,CAAC,UAAc,IAAA,OAAA;AAAA,UAC1C,CAAC,YAAa,CAAA,UAAU,CAAI,GAAA,UAAA;AAAA,UAC5B,CAAC,YAAa,CAAA,UAAU,CAAI,GAAA,UAAA;AAAA,UAC5B,CAAC,YAAA,CAAa,gBAAoB,IAAA,IAAA,GAAA,gBAAA,GAAA,EAAE,CAAI,GAAA,gBAAA;AAAA,UACxC,CAAC,YAAa,CAAA,UAAU,CAAI,GAAA,QAAA;AAAA,SAC9B;AAAA,QACA,SAAA;AAAA,OACF;AAAA,MACA,GAAK,EAAA,gBAAA;AAAA,MACL,OAAS,EAAA,kBAAA;AAAA,MACR,GAAG,IAAA;AAAA,MAEJ,QAAA,EAAA;AAAA,wBAAC,GAAA,CAAA,OAAA,EAAA;AAAA,UACC,YAAa,EAAA,KAAA;AAAA,UACb,kBAAkB,EAAA,IAAA;AAAA,YAChB,oBAAA;AAAA,YACA,0BAAA;AAAA,WACF;AAAA,UACA,iBAAiB,EAAA,IAAA;AAAA,YACf,mBAAA;AAAA,YACA,yBAAA;AAAA,YACA,YAAA;AAAA,WACF;AAAA,UACA,YAAA,EAAY,IAAK,CAAA,YAAA,EAAc,SAAS,CAAA;AAAA,UACxC,EAAI,EAAA,YAAA;AAAA,UACJ,SAAA,EAAW,aAAa,OAAO,CAAA;AAAA,UAC/B,QAAU,EAAA,UAAA;AAAA,UACV,QAAU,EAAA,UAAA;AAAA,UACV,GAAK,EAAA,mBAAA;AAAA,UACL,QAAA,EAAU,aAAa,CAAK,CAAA,GAAA,CAAA;AAAA,UAC5B,WAAA;AAAA,UACA,MAAM,WAAY,CAAA,MAAA;AAAA,UAClB,KAAA,EACE,cAAc,EAAC,SAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,SAAA,CAAW,aACtB,mBACC,GAAA,CAAA,EAAA,GAAA,SAAA,CAAU,cAAV,IAAuB,GAAA,EAAA,GAAA,EAAA;AAAA,UAE7B,GAAG,mBAAA;AAAA,UACJ,MAAQ,EAAA,oBAAA;AAAA,UACR,QAAU,EAAA,sBAAA;AAAA,UACV,SAAW,EAAA,uBAAA;AAAA,UACX,OAAA,EAAS,CAAC,UAAA,GAAa,qBAAwB,GAAA,KAAA,CAAA;AAAA,UAC/C,QAAU,EAAA,oBAAA;AAAA,SACZ,CAAA;AAAA,wBACC,GAAA,CAAA,MAAA,EAAA;AAAA,UAAK,QAAA,EAAA,GAAA;AAAA,SAAC,CAAA;AAAA,wBACN,GAAA,CAAA,OAAA,EAAA;AAAA,UACC,YAAa,EAAA,KAAA;AAAA,UACb,kBAAkB,EAAA,IAAA;AAAA,YAChB,oBAAA;AAAA,YACA,wBAAA;AAAA,WACF;AAAA,UACA,iBAAiB,EAAA,IAAA;AAAA,YACf,mBAAA;AAAA,YACA,uBAAA;AAAA,YACA,UAAA;AAAA,WACF;AAAA,UACA,YAAA,EAAY,IAAK,CAAA,UAAA,EAAY,SAAS,CAAA;AAAA,UACtC,EAAI,EAAA,UAAA;AAAA,UACJ,SAAA,EAAW,aAAa,OAAO,CAAA;AAAA,UAC/B,QAAU,EAAA,UAAA;AAAA,UACV,QAAU,EAAA,UAAA;AAAA,UACV,GAAK,EAAA,iBAAA;AAAA,UACL,QAAA,EAAU,aAAa,CAAK,CAAA,GAAA,CAAA;AAAA,UAC5B,WAAA;AAAA,UACA,MAAM,WAAY,CAAA,MAAA;AAAA,UAClB,KAAA,EACE,cAAc,EAAC,SAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,SAAA,CAAW,WACtB,mBACC,GAAA,CAAA,EAAA,GAAA,SAAA,CAAU,YAAV,IAAqB,GAAA,EAAA,GAAA,EAAA;AAAA,UAE3B,GAAG,iBAAA;AAAA,UACJ,MAAQ,EAAA,kBAAA;AAAA,UACR,QAAU,EAAA,oBAAA;AAAA,UACV,SAAW,EAAA,qBAAA;AAAA,UACX,OAAA,EAAS,CAAC,UAAA,GAAa,mBAAsB,GAAA,KAAA,CAAA;AAAA,UAC7C,QAAU,EAAA,kBAAA;AAAA,SACZ,CAAA;AAAA,wBACC,IAAA,CAAA,KAAA,EAAA;AAAA,UAAI,SAAA,EAAW,aAAa,uBAAuB,CAAA;AAAA,UACjD,QAAA,EAAA;AAAA,YAAA,CAAC,UAAc,IAAA,CAAC,UAAc,IAAA,gBAAA,oBAC5B,GAAA,CAAA,eAAA,EAAA;AAAA,cAAgB,MAAQ,EAAA,gBAAA;AAAA,aAAkB,CAAA;AAAA,YAE5C,YAAA;AAAA,WAAA;AAAA,SACH,CAAA;AAAA,wBACC,GAAA,CAAA,KAAA,EAAA;AAAA,UAAI,SAAA,EAAW,aAAa,qBAAqB,CAAA;AAAA,SAAG,CAAA;AAAA,OAAA;AAAA,KACvD,CAAA,CAAA;AAAA,GAEJ;AACF;;;;"}