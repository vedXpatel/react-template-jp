import { CalendarDate, toZoned, getLocalTimeZone, CalendarDateTime, ZonedDateTime } from '@internationalized/date';

function parseCalendarDate(inputDate) {
  if (!(inputDate == null ? void 0 : inputDate.length)) {
    return { date: null, error: false };
  }
  const date = new Date(inputDate);
  if (Number.isNaN(date.getTime())) {
    return { date: null, error: "not a valid date" };
  }
  const year = date.getFullYear();
  const month = date.getMonth() + 1;
  const day = date.getDate();
  try {
    const isoDate = new CalendarDate(year, month, day);
    return { date: isoDate, error: false };
  } catch (err) {
    return { date: null, error: err.message };
  }
}
function parseZonedDateTime(inputDate, timeZone = getLocalTimeZone()) {
  const parsedDate = parseCalendarDate(inputDate);
  if (!parsedDate.date || parsedDate.error) {
    return { ...parsedDate, date: null };
  }
  try {
    const zonedDate = toZoned(parsedDate.date, timeZone, "compatible");
    return { date: zonedDate, error: false };
  } catch (err) {
    return { date: null, error: err.message };
  }
}
const dateSupportsTime = (date) => date instanceof CalendarDateTime || date instanceof ZonedDateTime;
function extractTimeFieldsFromDateRange(selectedDate) {
  let startTime;
  let endTime;
  if (selectedDate) {
    if (selectedDate.startDate && dateSupportsTime(selectedDate.startDate)) {
      const { hour, minute, second, millisecond } = selectedDate.startDate;
      startTime = { hour, minute, second, millisecond };
    }
    if (selectedDate.endDate && dateSupportsTime(selectedDate.endDate)) {
      const { hour, minute, second, millisecond } = selectedDate.endDate;
      endTime = { hour, minute, second, millisecond };
    }
  }
  return { startTime, endTime };
}
function extractTimeFieldsFromDate(selectedDate) {
  if (selectedDate && dateSupportsTime(selectedDate)) {
    const { hour, minute, second, millisecond } = selectedDate;
    return { hour, minute, second, millisecond };
  }
}

export { dateSupportsTime, extractTimeFieldsFromDate, extractTimeFieldsFromDateRange, parseCalendarDate, parseZonedDateTime };
//# sourceMappingURL=utils.js.map
