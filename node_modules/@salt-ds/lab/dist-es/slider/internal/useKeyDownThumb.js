import { setValue, roundToStep, preventOverlappingValues, clampValue } from './utils.js';

const supportedKeys = [
  "Home",
  "End",
  "ArrowUp",
  "ArrowRight",
  "ArrowDown",
  "ArrowLeft"
];
const getValueFromKeyName = (keyName, value, min, max, step) => {
  switch (keyName) {
    case "Home":
      return min;
    case "End":
      return max;
    case "ArrowUp":
    case "ArrowRight":
      return value + step;
    case "ArrowDown":
    case "ArrowLeft":
      return value - step;
    default:
      return value;
  }
};
const useKeyDownThumb = (min, max, step, value, onChange, index) => {
  return (event) => {
    if (!supportedKeys.includes(event.key))
      return;
    event.preventDefault();
    const targetValue = value[index];
    const rawValue = getValueFromKeyName(
      event.key,
      targetValue,
      min,
      max,
      step
    );
    const roundedToStep = roundToStep(rawValue, step);
    const rounded = Number(roundedToStep.toFixed(1));
    const clamped = clampValue(rounded, [min, max]);
    const newValue = preventOverlappingValues(value, clamped, index);
    setValue(value, newValue, index, onChange);
  };
};

export { useKeyDownThumb };
//# sourceMappingURL=useKeyDownThumb.js.map
