import { jsxs, jsx } from 'react/jsx-runtime';
import { makePrefixer, Label } from '@salt-ds/core';
import { clsx } from 'clsx';
import { useState } from 'react';
import { useSliderContext } from './SliderContext.js';
import { useKeyDownThumb } from './useKeyDownThumb.js';
import { getPercentage } from './utils.js';

const withBaseName = makePrefixer("saltSliderThumb");
function SliderThumb(props) {
  const { index, activeThumb, setActiveThumb } = props;
  const [focussed, setFocussed] = useState(false);
  const { min, max, step, value, onChange, ariaLabel } = useSliderContext();
  const onKeyDown = useKeyDownThumb(min, max, step, value, onChange, index);
  const thumbValue = value[index];
  const thumbPosition = getPercentage(min, max, thumbValue);
  const handlePointerOver = () => {
    if (activeThumb === void 0 && index !== null)
      setActiveThumb(index);
  };
  const handleFocus = () => {
    setFocussed(true);
    if (index !== null)
      setActiveThumb(index);
  };
  const handleBlur = () => {
    setFocussed(false);
    setActiveThumb(void 0);
  };
  const showTooltip = focussed || activeThumb === index;
  return /* @__PURE__ */ jsxs("div", {
    style: { left: `${thumbPosition}%` },
    className: withBaseName("container"),
    onPointerOver: handlePointerOver,
    onFocus: handleFocus,
    onBlur: handleBlur,
    children: [
      /* @__PURE__ */ jsxs("div", {
        className: clsx(withBaseName("tooltip"), {
          [withBaseName("tooltip-visible")]: showTooltip
        }),
        "aria-expanded": showTooltip,
        children: [
          /* @__PURE__ */ jsx("svg", {
            className: withBaseName("tooltip-arrow"),
            "aria-hidden": "true",
            viewBox: "0 1 14 14",
            children: /* @__PURE__ */ jsx("path", {
              d: "M0,0 H14 L7,7 Q7,7 7,7 Z"
            })
          }),
          /* @__PURE__ */ jsx(Label, {
            children: value[index]
          })
        ]
      }),
      /* @__PURE__ */ jsx("div", {
        className: withBaseName(),
        onKeyDown,
        role: "slider",
        "aria-valuemin": min,
        "aria-valuemax": max,
        "aria-valuenow": index === 1 ? value[1] : value[0],
        "aria-label": ariaLabel,
        "aria-orientation": "horizontal",
        tabIndex: 0
      })
    ]
  });
}

export { SliderThumb };
//# sourceMappingURL=SliderThumb.js.map
