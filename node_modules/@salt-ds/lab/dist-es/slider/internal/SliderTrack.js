import { jsxs, jsx } from 'react/jsx-runtime';
import { makePrefixer } from '@salt-ds/core';
import { useRef, useState, useEffect } from 'react';
import { useSliderContext } from './SliderContext.js';
import { SliderSelection } from './SliderSelection.js';
import { SliderThumb } from './SliderThumb.js';
import { getValue, getNearestIndex, setValue, preventOverlappingValues } from './utils.js';

const withBaseName = makePrefixer("saltSliderTrack");
const SliderTrack = ({ ...props }) => {
  const { min, max, step, value, onChange } = useSliderContext();
  const trackRef = useRef(null);
  const valueRef = useRef(value);
  const [activeThumb, setActiveThumbState] = useState(void 0);
  const activeThumbRef = useRef(void 0);
  const pointerDown = useRef(false);
  const setActiveThumb = (index) => {
    setActiveThumbState(index);
    activeThumbRef.current = index;
  };
  const handlePointerUp = () => {
    setActiveThumb(void 0);
    pointerDown.current = false;
  };
  const handlePointerDown = (event) => {
    if (event.button !== 0)
      return;
    const { clientX } = event;
    const newValue = getValue(trackRef, min, max, step, clientX);
    const nearestIndex = getNearestIndex(value, newValue);
    setValue(value, newValue, value.length > 1 ? nearestIndex : 0, onChange);
    setActiveThumb(nearestIndex);
    pointerDown.current = true;
  };
  const handlePointerMove = (event) => {
    if (!pointerDown.current || typeof activeThumbRef.current === "undefined")
      return;
    const thumb = activeThumbRef.current;
    const { clientX } = event;
    const rawValue = getValue(trackRef, min, max, step, clientX);
    const newValue = preventOverlappingValues(
      valueRef.current,
      rawValue,
      thumb
    );
    setValue(valueRef.current, newValue, thumb, onChange);
  };
  const handlePointerOut = () => {
    if (!pointerDown.current) {
      setActiveThumb(void 0);
    }
  };
  useEffect(() => {
    window.addEventListener("pointerup", handlePointerUp);
    window.addEventListener("pointermove", handlePointerMove);
    return () => {
      window.removeEventListener("pointerup", handlePointerUp);
      window.removeEventListener("pointermove", handlePointerMove);
    };
  }, []);
  useEffect(() => {
    valueRef.current = value;
  }, [value]);
  return /* @__PURE__ */ jsxs("div", {
    className: withBaseName(),
    ref: trackRef,
    onPointerDown: handlePointerDown,
    onPointerOut: handlePointerOut,
    ...props,
    children: [
      /* @__PURE__ */ jsx("div", {
        className: withBaseName("rail")
      }),
      /* @__PURE__ */ jsx(SliderSelection, {}),
      value.map((_, i) => {
        return /* @__PURE__ */ jsx(SliderThumb, {
          index: i,
          activeThumb,
          setActiveThumb
        }, i);
      })
    ]
  });
};

export { SliderTrack };
//# sourceMappingURL=SliderTrack.js.map
