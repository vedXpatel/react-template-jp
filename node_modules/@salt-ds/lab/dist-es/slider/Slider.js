import { jsx, jsxs } from 'react/jsx-runtime';
import { makePrefixer, useControlled, Label } from '@salt-ds/core';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef } from 'react';
import { SliderTrack } from './internal/SliderTrack.js';
import { SliderMarks } from './internal/SliderMarks.js';
import { SliderContext } from './internal/SliderContext.js';
import css_248z from './Slider.css.js';
import { parseValueProp } from './internal/utils.js';

const withBaseName = makePrefixer("saltSlider");
const defaultMin = 0;
const defaultMax = 10;
const defaultStep = 1;
const Slider = forwardRef(function Slider2({
  min = defaultMin,
  max = defaultMax,
  step = defaultStep,
  value: valueProp,
  defaultValue = [0],
  onChange,
  className,
  "aria-label": ariaLabel,
  marks = "inline",
  ...rest
}, ref) {
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-slider",
    css: css_248z,
    window: targetWindow
  });
  const [value, setValue] = useControlled({
    controlled: parseValueProp(valueProp, min, max),
    default: defaultValue,
    name: "Slider",
    state: "Value"
  });
  const handleSliderChange = (value2) => {
    setValue(value2);
    onChange == null ? void 0 : onChange(value2);
  };
  return /* @__PURE__ */ jsx(SliderContext.Provider, {
    value: {
      value,
      min,
      max,
      step,
      onChange: handleSliderChange,
      ariaLabel
    },
    children: /* @__PURE__ */ jsxs("div", {
      ref,
      className: clsx(
        withBaseName(),
        { [withBaseName("bottomLabel")]: marks !== "inline" },
        className
      ),
      ...rest,
      children: [
        marks !== "all" && /* @__PURE__ */ jsx(Label, {
          className: clsx(withBaseName("label"), {
            [withBaseName("labelMinBottom")]: marks !== "inline"
          }),
          children: min
        }),
        /* @__PURE__ */ jsx(SliderTrack, {}),
        marks !== "all" && /* @__PURE__ */ jsx(Label, {
          className: clsx(withBaseName("label"), {
            [withBaseName("labelMaxBottom")]: marks !== "inline"
          }),
          children: max
        }),
        marks === "all" && /* @__PURE__ */ jsx(SliderMarks, {
          max,
          min,
          step
        })
      ]
    })
  });
});

export { Slider };
//# sourceMappingURL=Slider.js.map
