{"version":3,"file":"Slider.js","sources":["../src/slider/Slider.tsx"],"sourcesContent":["import { Label, makePrefixer, useControlled } from \"@salt-ds/core\";\nimport { useComponentCssInjection } from \"@salt-ds/styles\";\nimport { useWindow } from \"@salt-ds/window\";\nimport { clsx } from \"clsx\";\nimport { type HTMLAttributes, forwardRef } from \"react\";\nimport { SliderContext, SliderMarks, SliderTrack } from \"./internal\";\n\nimport sliderCss from \"./Slider.css\";\nimport { parseValueProp } from \"./internal/utils\";\nimport type { SliderChangeHandler, SliderValue } from \"./types\";\n\nconst withBaseName = makePrefixer(\"saltSlider\");\n\nconst defaultMin = 0;\nconst defaultMax = 10;\nconst defaultStep = 1;\n\nexport interface SliderProps\n  extends Omit<HTMLAttributes<HTMLDivElement>, \"onChange\" | \"defaultValue\"> {\n  /**\n   * Minimum slider value\n   */\n  min?: number;\n  /**\n   * Maximum slider value\n   */\n  max?: number;\n  /**\n   * Minimum interval the slider thumb can move\n   */\n  step?: number;\n  /**\n   * Initial value of the slider\n   */\n  defaultValue?: SliderValue;\n  /**\n   * The markings the slider is displayed with\n   */\n  marks?: \"inline\" | \"bottom\" | \"all\";\n  /**\n   * Value of the slider, to be used when in a controlled state\n   */\n  value?: SliderValue;\n  /**\n   * Change handler to be used when in a controlled state\n   */\n  onChange?: SliderChangeHandler;\n}\n\nexport const Slider = forwardRef<HTMLDivElement, SliderProps>(function Slider(\n  {\n    min = defaultMin,\n    max = defaultMax,\n    step = defaultStep,\n    value: valueProp,\n    defaultValue = [0],\n    onChange,\n    className,\n    \"aria-label\": ariaLabel,\n    marks = \"inline\",\n    ...rest\n  },\n  ref,\n) {\n  const targetWindow = useWindow();\n  useComponentCssInjection({\n    testId: \"salt-slider\",\n    css: sliderCss,\n    window: targetWindow,\n  });\n\n  const [value, setValue] = useControlled<SliderValue>({\n    controlled: parseValueProp(valueProp, min, max),\n    default: defaultValue,\n    name: \"Slider\",\n    state: \"Value\",\n  });\n\n  const handleSliderChange = (value: SliderValue) => {\n    setValue(value);\n    onChange?.(value);\n  };\n\n  return (\n    <SliderContext.Provider\n      value={{\n        value,\n        min,\n        max,\n        step,\n        onChange: handleSliderChange,\n        ariaLabel,\n      }}\n    >\n      <div\n        ref={ref}\n        className={clsx(\n          withBaseName(),\n          { [withBaseName(\"bottomLabel\")]: marks !== \"inline\" },\n          className,\n        )}\n        {...rest}\n      >\n        {marks !== \"all\" && (\n          <Label\n            className={clsx(withBaseName(\"label\"), {\n              [withBaseName(\"labelMinBottom\")]: marks !== \"inline\",\n            })}\n          >\n            {min}\n          </Label>\n        )}\n        <SliderTrack />\n        {marks !== \"all\" && (\n          <Label\n            className={clsx(withBaseName(\"label\"), {\n              [withBaseName(\"labelMaxBottom\")]: marks !== \"inline\",\n            })}\n          >\n            {max}\n          </Label>\n        )}\n        {marks === \"all\" && <SliderMarks max={max} min={min} step={step} />}\n      </div>\n    </SliderContext.Provider>\n  );\n});\n"],"names":["Slider","sliderCss","value"],"mappings":"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"}