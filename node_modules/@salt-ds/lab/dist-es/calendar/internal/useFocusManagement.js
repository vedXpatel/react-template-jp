import { endOfWeek, startOfWeek } from '@internationalized/date';
import { getCurrentLocale } from '../formatDate.js';
import { useCalendarContext } from './CalendarContext.js';

function useFocusManagement({
  date,
  locale = getCurrentLocale()
}) {
  const {
    helpers: { setFocusedDate }
  } = useCalendarContext();
  const handleClick = (event) => {
    setFocusedDate(event, date);
  };
  const handleKeyDown = (event) => {
    let newDate = date;
    switch (event.key) {
      case "ArrowUp":
        newDate = date.subtract({ weeks: 1 });
        break;
      case "ArrowDown":
        newDate = date.add({ weeks: 1 });
        break;
      case "ArrowLeft":
        newDate = date.subtract({ days: 1 });
        break;
      case "ArrowRight":
        newDate = date.add({ days: 1 });
        break;
      case "Home":
        newDate = startOfWeek(date, locale);
        break;
      case "End":
        newDate = endOfWeek(date, locale);
        break;
      case "PageUp":
        if (event.shiftKey) {
          newDate = date.subtract({ years: 1 });
        } else {
          newDate = date.subtract({ months: 1 });
        }
        break;
      case "PageDown":
        if (event.shiftKey) {
          newDate = date.add({ years: 1 });
        } else {
          newDate = date.add({ months: 1 });
        }
        break;
    }
    if (newDate.compare(date) !== 0) {
      event.preventDefault();
    }
    setFocusedDate(event, newDate);
  };
  const handleFocus = (event) => {
    setFocusedDate(event, date);
  };
  return {
    handleClick,
    handleKeyDown,
    handleFocus
  };
}

export { useFocusManagement };
//# sourceMappingURL=useFocusManagement.js.map
