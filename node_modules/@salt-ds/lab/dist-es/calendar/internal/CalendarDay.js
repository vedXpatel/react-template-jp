import { jsx } from 'react/jsx-runtime';
import { makePrefixer, useForkRef, Tooltip } from '@salt-ds/core';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef, useRef } from 'react';
import { useCalendarDay } from '../useCalendarDay.js';
import css_248z from './CalendarDay.css.js';
import { formatDate } from './utils.js';

const withBaseName = makePrefixer("saltCalendarDay");
const CalendarDay = forwardRef(
  function CalendarDay2(props, ref) {
    const {
      className,
      day,
      renderDayContents,
      month,
      TooltipProps,
      formatDate: formatDateProp = formatDate,
      ...rest
    } = props;
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-calendar-day",
      css: css_248z,
      window: targetWindow
    });
    const dayRef = useRef(null);
    const buttonRef = useForkRef(ref, dayRef);
    const { status, dayProps, unselectableReason, highlightedReason, locale } = useCalendarDay(
      {
        date: day,
        month
      },
      dayRef
    );
    const { outOfRange, today, unselectable, highlighted, hidden, disabled } = status;
    const buttonElement = /* @__PURE__ */ jsx("button", {
      "aria-label": formatDateProp(day, locale, {
        day: "2-digit",
        month: "long",
        year: "numeric"
      }),
      disabled,
      type: "button",
      ...dayProps,
      ref: buttonRef,
      ...rest,
      className: clsx(
        withBaseName(),
        {
          [withBaseName("hidden")]: hidden,
          [withBaseName("outOfRange")]: outOfRange,
          [withBaseName("disabled")]: disabled,
          [withBaseName("unselectable")]: !!unselectable,
          [withBaseName("highlighted")]: !!highlighted
        },
        dayProps.className,
        className
      ),
      children: /* @__PURE__ */ jsx("span", {
        className: clsx(withBaseName("content"), {
          [withBaseName("today")]: today
        }),
        children: renderDayContents ? renderDayContents(day, status) : formatDateProp(day, locale, { day: "numeric" })
      })
    });
    const hasTooltip = unselectableReason || highlightedReason;
    if (!hasTooltip) {
      return buttonElement;
    }
    return /* @__PURE__ */ jsx(Tooltip, {
      hideIcon: true,
      status: unselectableReason ? "error" : "info",
      content: unselectableReason || highlightedReason || "Date is out of range",
      placement: "top",
      enterDelay: 0,
      leaveDelay: 0,
      ...TooltipProps,
      children: buttonElement
    });
  }
);

export { CalendarDay };
//# sourceMappingURL=CalendarDay.js.map
