import { getLocalTimeZone, DateFormatter, startOfWeek, today, startOfMonth, startOfYear, isSameMonth, toCalendarDate, endOfMonth, createCalendar } from '@internationalized/date';
import { getCurrentLocale } from '../formatDate.js';

function formatDate(date, locale, options) {
  const timeLocale = locale || getCurrentLocale();
  const timeZone = (options == null ? void 0 : options.timeZone) || getLocalTimeZone();
  const formatter = new DateFormatter(timeLocale, options);
  return formatter.format(date.toDate(timeZone));
}
function getCalendar(locale) {
  const calendarIdentifier = new DateFormatter(locale).resolvedOptions().calendar;
  return createCalendar(calendarIdentifier);
}
function daysForLocale(weekday, locale) {
  return [...Array(7).keys()].map(
    (day) => formatDate(
      startOfWeek(today(getLocalTimeZone()), locale).add({
        days: day
      }),
      locale,
      { weekday: weekday || "long" }
    )
  );
}
function monthsForLocale(currentYear, locale) {
  const calendar = getCalendar(locale);
  return [...Array(calendar.getMonthsInYear(currentYear)).keys()].map(
    (month) => startOfYear(currentYear).add({ months: month })
  );
}
function mapDate(currentDate, currentMonth) {
  return {
    date: currentDate,
    dateOfMonth: currentDate.month,
    isCurrentMonth: isSameMonth(currentDate, currentMonth)
  };
}
function generateVisibleDays(currentMonth, locale) {
  const totalDays = 6 * 7;
  const startDate = startOfWeek(startOfMonth(currentMonth), locale);
  return [...Array(totalDays).keys()].map((dayDelta) => {
    const day = startDate.add({ days: dayDelta });
    return mapDate(day, currentMonth);
  });
}
function monthDiff(a, b) {
  return b.month - a.month + 12 * (b.year - a.year);
}
function generateDatesForMonth(date) {
  const calendarDate = toCalendarDate(date);
  const startDate = startOfMonth(calendarDate);
  const endDate = endOfMonth(calendarDate);
  const dates = [];
  for (let currentDate = startDate; currentDate.compare(endDate) <= 0; currentDate = currentDate.add({ days: 1 })) {
    dates.push(currentDate);
  }
  return dates;
}

export { daysForLocale, formatDate, generateDatesForMonth, generateVisibleDays, getCalendar, monthDiff, monthsForLocale };
//# sourceMappingURL=utils.js.map
