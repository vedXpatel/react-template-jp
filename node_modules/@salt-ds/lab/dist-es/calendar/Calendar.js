import { jsx } from 'react/jsx-runtime';
import { makePrefixer } from '@salt-ds/core';
import { clsx } from 'clsx';
import { forwardRef } from 'react';
import { CalendarContext } from './internal/CalendarContext.js';
import { useCalendar } from './useCalendar.js';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { DateFormatter } from '@internationalized/date';
import css_248z from './Calendar.css.js';

const withBaseName = makePrefixer("saltCalendar");
const Calendar = forwardRef(
  function Calendar2(props, ref) {
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-calendar",
      css: css_248z,
      window: targetWindow
    });
    const {
      children,
      className,
      selectedDate,
      defaultSelectedDate,
      visibleMonth: visibleMonthProp,
      timeZone,
      locale,
      defaultVisibleMonth,
      onSelectedDateChange,
      onVisibleMonthChange,
      hideOutOfRangeDates,
      isDayUnselectable,
      isDayHighlighted,
      isDayDisabled,
      minDate,
      maxDate,
      selectionVariant,
      onHoveredDateChange,
      hoveredDate,
      ...propsRest
    } = props;
    let startDateOffset;
    let endDateOffset;
    let rest;
    if (selectionVariant === "offset") {
      ({ startDateOffset, endDateOffset, ...rest } = propsRest);
    } else {
      rest = propsRest;
    }
    const useCalendarProps = {
      selectedDate,
      defaultSelectedDate,
      visibleMonth: visibleMonthProp,
      timeZone,
      locale,
      defaultVisibleMonth,
      onSelectedDateChange,
      onVisibleMonthChange,
      isDayUnselectable,
      isDayHighlighted,
      isDayDisabled,
      minDate,
      maxDate,
      selectionVariant,
      onHoveredDateChange,
      hideOutOfRangeDates,
      hoveredDate,
      startDateOffset,
      endDateOffset
    };
    const { state, helpers } = useCalendar(useCalendarProps);
    const calendarLabel = new DateFormatter(state.locale, {
      month: "long",
      year: "numeric"
    }).format(state.visibleMonth.toDate(state.timeZone));
    return /* @__PURE__ */ jsx(CalendarContext.Provider, {
      value: {
        state,
        helpers
      },
      children: /* @__PURE__ */ jsx("div", {
        className: clsx(withBaseName(), className),
        role: "application",
        "aria-label": calendarLabel,
        ref,
        ...rest,
        children
      })
    });
  }
);

export { Calendar };
//# sourceMappingURL=Calendar.js.map
