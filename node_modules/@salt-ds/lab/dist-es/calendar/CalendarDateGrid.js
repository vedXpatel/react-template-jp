import { jsx } from 'react/jsx-runtime';
import { isSameMonth } from '@internationalized/date';
import { makePrefixer, useIsomorphicLayoutEffect } from '@salt-ds/core';
import { forwardRef, useRef, useState, useEffect, useCallback } from 'react';
import { useCalendarContext } from './internal/CalendarContext.js';
import { CalendarMonth } from './internal/CalendarMonth.js';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import css_248z from './CalendarDateGrid.css.js';
import { formatDate, monthDiff } from './internal/utils.js';

function getMonths(month) {
  return [month.subtract({ months: 1 }), month, month.add({ months: 1 })];
}
const withBaseName = makePrefixer("saltCalendarDateGrid");
const CalendarDateGrid = forwardRef(function CalendarDateGrid2(props, ref) {
  const {
    onFocus,
    onBlur,
    getCalendarMonthProps = () => void 0,
    ...rest
  } = props;
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-calendar-date-grid",
    css: css_248z,
    window: targetWindow
  });
  const {
    state: { visibleMonth, locale },
    helpers: { setCalendarFocused }
  } = useCalendarContext();
  const containerRef = useRef(null);
  const diffIndex = (a, b) => monthDiff(a, b);
  const { current: baseIndex } = useRef(visibleMonth);
  useIsomorphicLayoutEffect(() => {
    if (containerRef.current) {
      containerRef.current.style.transform = `translate3d(${diffIndex(baseIndex, visibleMonth) * -101}%, 0, 0)`;
    }
  });
  const [months, setMonths] = useState(() => getMonths(visibleMonth));
  useEffect(() => {
    setMonths((oldMonths) => {
      const newMonths = getMonths(visibleMonth).filter((month) => {
        return !oldMonths.find((oldMonth) => isSameMonth(oldMonth, month));
      });
      return oldMonths.concat(newMonths);
    });
    setMonths(getMonths(visibleMonth));
    return void 0;
  }, [formatDate(visibleMonth, locale)]);
  const handleFocus = useCallback(
    (event) => {
      setCalendarFocused(true);
      onFocus == null ? void 0 : onFocus(event);
    },
    [setCalendarFocused, onFocus]
  );
  const handleBlur = useCallback(
    (event) => {
      setCalendarFocused(false);
      onBlur == null ? void 0 : onBlur(event);
    },
    [setCalendarFocused, onBlur]
  );
  return /* @__PURE__ */ jsx("div", {
    className: withBaseName(),
    tabIndex: -1,
    style: {
      overflowX: "hidden",
      position: "relative"
    },
    ref,
    children: /* @__PURE__ */ jsx("div", {
      className: withBaseName("grid"),
      ref: containerRef,
      onBlur: handleBlur,
      onFocus: handleFocus,
      ...rest,
      children: months.map((date, index) => /* @__PURE__ */ jsx("div", {
        className: withBaseName("slide"),
        style: {
          transform: `translateX(${diffIndex(date, baseIndex) * -101}%)`
        },
        "aria-hidden": index !== 1 ? "true" : void 0,
        children: /* @__PURE__ */ jsx(CalendarMonth, {
          ...getCalendarMonthProps(date),
          date
        })
      }, formatDate(date, locale)))
    })
  });
});

export { CalendarDateGrid };
//# sourceMappingURL=CalendarDateGrid.js.map
