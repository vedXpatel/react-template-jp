import { getLocalTimeZone, DateFormatter } from '@internationalized/date';

function getCurrentLocale() {
  return navigator.languages[0];
}
const defaultFormatOptions = {
  day: "2-digit",
  month: "short",
  year: "numeric"
};
function formatDate(date, locale, options) {
  var _a, _b, _c;
  if (!date) {
    return "";
  }
  const timeLocale = locale || getCurrentLocale();
  const timeZone = (options == null ? void 0 : options.timeZone) || getLocalTimeZone();
  const formatter = new DateFormatter(timeLocale, {
    ...defaultFormatOptions,
    ...options
  });
  const formattedDate = formatter.formatToParts(date.toDate(timeZone));
  const isNumericFormat = (options == null ? void 0 : options.month) === "numeric" || defaultFormatOptions.month === "numeric";
  const separator = isNumericFormat ? "/" : " ";
  const parts = [];
  if ((options == null ? void 0 : options.day) !== void 0 || defaultFormatOptions.day !== void 0) {
    const day = (_a = formattedDate.find(
      (part) => part.type === "day"
    )) == null ? void 0 : _a.value;
    if (day)
      parts.push(day);
  }
  if ((options == null ? void 0 : options.month) !== void 0 || defaultFormatOptions.month !== void 0) {
    const month = (_b = formattedDate.find(
      (part) => part.type === "month"
    )) == null ? void 0 : _b.value;
    if (month)
      parts.push(month);
  }
  if ((options == null ? void 0 : options.year) !== void 0 || defaultFormatOptions.year !== void 0) {
    const year = (_c = formattedDate.find(
      (part) => part.type === "year"
    )) == null ? void 0 : _c.value;
    if (year)
      parts.push(year);
  }
  return parts.join(separator);
}

export { formatDate, getCurrentLocale };
//# sourceMappingURL=formatDate.js.map
