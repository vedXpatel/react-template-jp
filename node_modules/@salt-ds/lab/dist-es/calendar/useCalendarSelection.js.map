{"version":3,"file":"useCalendarSelection.js","sources":["../src/calendar/useCalendarSelection.ts"],"sourcesContent":["import {\n  CalendarDate,\n  CalendarDateTime,\n  type DateValue,\n  ZonedDateTime,\n  isSameDay,\n} from \"@internationalized/date\";\nimport { makePrefixer, useControlled } from \"@salt-ds/core\";\nimport { clsx } from \"clsx\";\nimport type {\n  KeyboardEventHandler,\n  MouseEventHandler,\n  SyntheticEvent,\n} from \"react\";\nimport { useCallback, useMemo } from \"react\";\nimport { useCalendarContext } from \"./internal/CalendarContext\";\n\n/**\n * Type representing a single date selection.\n */\nexport type SingleDateSelection = DateValue;\n\n/**\n * Type representing multiple date selections.\n */\nexport type MultipleDateSelection = DateValue[];\n\n/**\n * Type representing a date range selection.\n */\nexport type DateRangeSelection = {\n  /**\n   * The start date of the range.\n   */\n  startDate?: DateValue | null;\n  /**\n   * The end date of the range.\n   */\n  endDate?: DateValue | null;\n};\n\n/**\n * Type representing all possible selection value types.\n */\nexport type AllSelectionValueType =\n  | SingleDateSelection\n  | MultipleDateSelection\n  | DateRangeSelection\n  | null;\n\n/**\n * The default minimum year used by the calendar.\n */\nexport const CALENDAR_MIN_YEAR = 1900;\n\n/**\n * The default maximum year used by the calendar.\n */\nexport const CALENDAR_MAX_YEAR = 2100;\n\n/**\n * Checks if a value is a single date selection.\n * @param value - The value to check.\n * @returns `true` if the value is a single date selection, otherwise `false`.\n */\n// biome-ignore lint/suspicious/noExplicitAny: type guard\nexport function isSingleSelectionValueType(value: any): value is DateValue {\n  return (\n    value instanceof CalendarDate ||\n    value instanceof CalendarDateTime ||\n    value instanceof ZonedDateTime\n  );\n}\n\n/**\n * Checks if a value is a date range selection.\n * @param value - The value to check.\n * @returns `true` if the value is a date range selection, otherwise `false`.\n */\n// biome-ignore lint/suspicious/noExplicitAny: type guard\nexport function isDateRangeSelection(value: any): value is DateRangeSelection {\n  return (\n    value &&\n    typeof value === \"object\" &&\n    (\"startDate\" in value || \"endDate\" in value)\n  );\n}\n\n/**\n * Checks if a value is a multiple date selection.\n * @param value - The value to check.\n * @returns `true` if the value is a multiple date selection, otherwise `false`.\n */\nexport function isMultipleDateSelection(\n  // biome-ignore lint/suspicious/noExplicitAny: type guard\n  value: any,\n): value is MultipleDateSelection {\n  return (\n    Array.isArray(value) &&\n    value.every((item) => isSingleSelectionValueType(item))\n  );\n}\n\n/**\n * Base properties for calendar UseCalendarSelection hook.\n * @template SelectionVariantType - The type of the selection variant.\n */\ninterface UseCalendarSelectionBaseProps<SelectionVariantType> {\n  /**\n   * The currently hovered date.\n   */\n  hoveredDate?: DateValue | null;\n  /**\n   * The currently selected date.\n   */\n  selectedDate?: SelectionVariantType | null;\n  /**\n   * The default selected date.\n   */\n  defaultSelectedDate?: SelectionVariantType;\n  /**\n   * Callback fired when the selected date changes.\n   * @param event - The synthetic event.\n   * @param selectedDate - The new selected date.\n   */\n  onSelectedDateChange?: (\n    event: SyntheticEvent,\n    selectedDate: SelectionVariantType | null,\n  ) => void;\n  /**\n   * Function to determine if a day is selectable.\n   * @param date - The date to check.\n   * @returns `true` if the day is selectable, otherwise `false`.\n   */\n  isDaySelectable?: (date: DateValue) => boolean;\n  /**\n   * Callback fired when the hovered date changes.\n   * @param event - The synthetic event.\n   * @param hoveredDate - The new hovered date.\n   */\n  onHoveredDateChange?: (\n    event: SyntheticEvent,\n    hoveredDate: DateValue | null,\n  ) => void;\n}\n\n/**\n * UseCalendar hook props to return a calendar day's status\n */\nexport interface UseCalendarSelectionOffsetProps\n  extends Omit<\n    UseCalendarSelectionBaseProps<DateRangeSelection>,\n    \"startDateOffset\" | \"endDateOffset\"\n  > {\n  /**\n   * The selection variant, set to \"offset\".\n   */\n  selectionVariant: \"offset\";\n  /**\n   * Function to calculate the start date offset.\n   * @param date - The date to offset.\n   * @returns The offset start date.\n   */\n  startDateOffset?: (date: DateValue) => DateValue;\n  /**\n   * Function to calculate the end date offset.\n   * @param date - The date to offset.\n   * @returns The offset end date.\n   */\n  endDateOffset?: (date: DateValue) => DateValue;\n}\n\n/**\n * Properties for the range date selection hook.\n */\nexport interface UseCalendarSelectionRangeProps\n  extends UseCalendarSelectionBaseProps<DateRangeSelection> {\n  /**\n   * The selection variant, set to \"range\".\n   */\n  selectionVariant: \"range\";\n}\n\n/**\n * Properties for the multi-select date selection hook.\n */\nexport interface UseCalendarSelectionMultiSelectProps\n  extends UseCalendarSelectionBaseProps<MultipleDateSelection> {\n  /**\n   * The selection variant, set to \"multiselect\".\n   */\n  selectionVariant: \"multiselect\";\n}\n\n/**\n * Properties for the single date selection hook.\n */\nexport interface UseCalendarSelectionSingleProps\n  extends UseCalendarSelectionBaseProps<SingleDateSelection> {\n  /**\n   * The selection variant, set to \"single\".\n   */\n  selectionVariant: \"single\";\n}\n\n/**\n * UseCalendarSelection hook props, wth the selection variant determining the return type of the date selection\n */\nexport type UseCalendarSelectionProps =\n  | UseCalendarSelectionSingleProps\n  | UseCalendarSelectionMultiSelectProps\n  | UseCalendarSelectionRangeProps\n  | UseCalendarSelectionOffsetProps;\n\nconst withBaseName = makePrefixer(\"saltCalendarDay\");\n\nfunction addOrRemoveFromArray(array: AllSelectionValueType, item: DateValue) {\n  if (Array.isArray(array)) {\n    if (array.find((element) => isSameDay(element, item))) {\n      return array.filter((element) => !isSameDay(element, item));\n    }\n    return array.concat(item);\n  }\n  return [item];\n}\n\nconst updateRangeSelection = (\n  currentSelectedDate: DateRangeSelection,\n  newSelectedDate: DateValue,\n): DateRangeSelection => {\n  let base = { ...currentSelectedDate };\n  if (base?.startDate && base?.endDate) {\n    base = { startDate: newSelectedDate };\n  } else if (base?.startDate && newSelectedDate.compare(base.startDate) < 0) {\n    base = { startDate: newSelectedDate };\n  } else if (base?.startDate && newSelectedDate.compare(base.startDate) >= 0) {\n    base = { ...base, endDate: newSelectedDate };\n  } else {\n    base = { startDate: newSelectedDate };\n  }\n  return base;\n};\n\nexport function useCalendarSelection(props: UseCalendarSelectionProps) {\n  const {\n    hoveredDate: hoveredDateProp,\n    selectedDate: selectedDateProp,\n    defaultSelectedDate,\n    onSelectedDateChange,\n    onHoveredDateChange,\n    isDaySelectable,\n    selectionVariant,\n    // startDateOffset,\n    // endDateOffset,\n  } = props;\n  const [selectedDate, setSelectedDateState] = useControlled({\n    controlled: selectedDateProp,\n    default: defaultSelectedDate,\n    name: \"Calendar\",\n    state: \"selectedDate\",\n  });\n\n  const startDateOffset =\n    selectionVariant === \"offset\" ? props.startDateOffset : undefined;\n  const endDateOffset =\n    selectionVariant === \"offset\" ? props.endDateOffset : undefined;\n\n  const getStartDateOffset = useCallback(\n    (date: DateValue) => {\n      if (selectionVariant === \"offset\" && startDateOffset) {\n        return startDateOffset(date);\n      }\n      return date;\n    },\n    [selectionVariant, startDateOffset],\n  );\n\n  const getEndDateOffset = useCallback(\n    (date: DateValue) => {\n      if (selectionVariant === \"offset\" && endDateOffset) {\n        return endDateOffset(date);\n      }\n      return date;\n    },\n    [selectionVariant, endDateOffset],\n  );\n\n  const setSelectedDate = useCallback(\n    (event: SyntheticEvent<HTMLButtonElement>, newSelectedDate: DateValue) => {\n      if (!isDaySelectable || isDaySelectable(newSelectedDate)) {\n        switch (selectionVariant) {\n          case \"single\": {\n            setSelectedDateState(newSelectedDate);\n            onSelectedDateChange?.(event, newSelectedDate);\n            break;\n          }\n          case \"multiselect\": {\n            const newMultiSelectDate = addOrRemoveFromArray(\n              selectedDate as DateValue[],\n              newSelectedDate,\n            );\n            setSelectedDateState(newMultiSelectDate);\n            onSelectedDateChange?.(event, newMultiSelectDate);\n            break;\n          }\n          case \"range\": {\n            const newRangeDate = updateRangeSelection(\n              selectedDate as DateRangeSelection,\n              newSelectedDate,\n            );\n            setSelectedDateState(newRangeDate);\n            onSelectedDateChange?.(event, newRangeDate);\n            break;\n          }\n          case \"offset\": {\n            const newOffsetDate: DateRangeSelection = {\n              startDate: getStartDateOffset(newSelectedDate),\n              endDate: getEndDateOffset(newSelectedDate),\n            };\n            setSelectedDateState(newOffsetDate);\n            props.onSelectedDateChange?.(event, newOffsetDate);\n            break;\n          }\n        }\n      }\n    },\n    [isDaySelectable, selectedDate, selectionVariant, onSelectedDateChange],\n  );\n\n  const isSelected = useCallback(\n    (date: DateValue) => {\n      switch (selectionVariant) {\n        case \"single\":\n          return (\n            isSingleSelectionValueType(selectedDate) &&\n            isSameDay(selectedDate, date)\n          );\n        case \"multiselect\":\n          return (\n            Array.isArray(selectedDate) &&\n            !!selectedDate.find((element) => isSameDay(element, date))\n          );\n        default:\n          return false;\n      }\n    },\n    [selectionVariant, selectedDate],\n  );\n\n  const [hoveredDate, setHoveredDateState] = useControlled({\n    controlled: hoveredDateProp,\n    default: undefined,\n    name: \"Calendar\",\n    state: \"hoveredDate\",\n  });\n\n  const setHoveredDate = useCallback(\n    (event: SyntheticEvent, date: DateValue | null) => {\n      setHoveredDateState(date);\n      onHoveredDateChange?.(event, date);\n    },\n    [onHoveredDateChange],\n  );\n\n  const isHovered = useCallback(\n    (date: DateValue) => {\n      return !!hoveredDate && isSameDay(date, hoveredDate);\n    },\n    [hoveredDate],\n  );\n\n  const isSelectedSpan = useCallback(\n    (date: DateValue) => {\n      if (\n        (selectionVariant === \"range\" || selectionVariant === \"offset\") &&\n        isDateRangeSelection(selectedDate) &&\n        selectedDate?.startDate &&\n        selectedDate?.endDate\n      ) {\n        return (\n          date.compare(selectedDate.startDate) > 0 &&\n          date.compare(selectedDate.endDate) < 0\n        );\n      }\n      return false;\n    },\n    [selectionVariant, selectedDate],\n  );\n  const isHoveredSpan = useCallback(\n    (date: DateValue) => {\n      if (\n        (selectionVariant === \"range\" || selectionVariant === \"offset\") &&\n        isDateRangeSelection(selectedDate) &&\n        selectedDate.startDate &&\n        !selectedDate.endDate &&\n        hoveredDate\n      ) {\n        const isForwardRange =\n          hoveredDate.compare(selectedDate.startDate) > 0 &&\n          ((date.compare(selectedDate.startDate) > 0 &&\n            date.compare(hoveredDate) < 0) ||\n            isSameDay(date, hoveredDate));\n\n        const isValidDayHovered =\n          !isDaySelectable || isDaySelectable(hoveredDate);\n\n        return isForwardRange && isValidDayHovered;\n      }\n      return false;\n    },\n    [selectionVariant, selectedDate, hoveredDate, isDaySelectable],\n  );\n\n  const isSelectedStart = useCallback(\n    (date: DateValue) => {\n      if (\n        (selectionVariant === \"range\" || selectionVariant === \"offset\") &&\n        isDateRangeSelection(selectedDate) &&\n        selectedDate.startDate\n      ) {\n        return isSameDay(selectedDate.startDate, date);\n      }\n      return false;\n    },\n    [selectionVariant, selectedDate],\n  );\n\n  const isSelectedEnd = useCallback(\n    (date: DateValue) => {\n      if (\n        (selectionVariant === \"range\" || selectionVariant === \"offset\") &&\n        isDateRangeSelection(selectedDate) &&\n        selectedDate.endDate\n      ) {\n        return isSameDay(selectedDate.endDate, date);\n      }\n      return false;\n    },\n    [selectionVariant, selectedDate],\n  );\n\n  const isHoveredOffset = useCallback(\n    (date: DateValue) => {\n      if (hoveredDate && selectionVariant === \"offset\") {\n        const startDate = getStartDateOffset(hoveredDate);\n        const endDate = getEndDateOffset(hoveredDate);\n\n        return (\n          date.compare(startDate) >= 0 &&\n          date.compare(endDate) <= 0 &&\n          (!isDaySelectable || isDaySelectable(date))\n        );\n      }\n\n      return false;\n    },\n    [\n      getStartDateOffset,\n      getEndDateOffset,\n      hoveredDate,\n      isDaySelectable,\n      selectionVariant,\n    ],\n  );\n\n  return useMemo(\n    () => ({\n      state: {\n        selectedDate,\n        hoveredDate,\n      },\n      helpers: {\n        setSelectedDate,\n        isSelected,\n        setHoveredDate,\n        isHovered,\n        isSelectedSpan,\n        isHoveredSpan,\n        isSelectedStart,\n        isSelectedEnd,\n        isHoveredOffset,\n        isDaySelectable,\n      },\n    }),\n    [\n      selectedDate,\n      hoveredDate,\n      setSelectedDate,\n      isSelected,\n      setHoveredDate,\n      isHovered,\n      isSelectedSpan,\n      isHoveredSpan,\n      isSelectedStart,\n      isSelectedEnd,\n      isHoveredOffset,\n      isDaySelectable,\n    ],\n  );\n}\n\nexport function useCalendarSelectionDay({ date }: { date: DateValue }) {\n  const {\n    helpers: {\n      setSelectedDate,\n      isSelected,\n      setHoveredDate,\n      isSelectedSpan,\n      isHoveredSpan,\n      isSelectedStart,\n      isSelectedEnd,\n      isHovered,\n      isHoveredOffset,\n      isDaySelectable,\n    },\n  } = useCalendarContext();\n\n  const handleClick: MouseEventHandler<HTMLButtonElement> = useCallback(\n    (event) => {\n      setSelectedDate(event, date);\n    },\n    [date, setSelectedDate],\n  );\n\n  const handleKeyDown: KeyboardEventHandler<HTMLButtonElement> = useCallback(\n    (event) => {\n      switch (event.key) {\n        case \"Space\":\n        case \"Enter\":\n          setSelectedDate(event, date);\n          event.preventDefault();\n      }\n    },\n    [date, setSelectedDate],\n  );\n\n  const handleMouseOver: MouseEventHandler<HTMLButtonElement> = useCallback(\n    (event) => {\n      setHoveredDate(event, date);\n    },\n    [date, setHoveredDate],\n  );\n\n  const handleMouseLeave: MouseEventHandler<HTMLButtonElement> = useCallback(\n    (event) => {\n      setHoveredDate(event, null);\n    },\n    [setHoveredDate],\n  );\n\n  const selected = isSelected(date);\n  const selectedSpan = isSelectedSpan(date);\n  const hoveredSpan = isHoveredSpan(date);\n  const selectedStart = isSelectedStart(date);\n  const selectedEnd = isSelectedEnd(date);\n  const hovered = isHovered(date);\n  const hoveredOffset = isHoveredOffset(date);\n\n  return {\n    handleClick,\n    handleKeyDown,\n    handleMouseOver,\n    handleMouseLeave,\n    status: {\n      selected,\n      selectedSpan,\n      hoveredSpan,\n      selectedStart,\n      selectedEnd,\n      hovered,\n      hoveredOffset,\n    },\n    dayProps: {\n      className: clsx({\n        [withBaseName(\"selected\")]: selected,\n        [withBaseName(\"selectedSpan\")]: selectedSpan,\n        [withBaseName(\"hoveredSpan\")]: hoveredSpan,\n        [withBaseName(\"selectedStart\")]: selectedStart,\n        [withBaseName(\"selectedEnd\")]: selectedEnd,\n        [withBaseName(\"hovered\")]: hovered,\n        [withBaseName(\"hoveredOffset\")]: hoveredOffset,\n      }),\n      \"aria-pressed\":\n        selected || selectedEnd || selectedStart || selectedSpan\n          ? \"true\"\n          : undefined,\n      \"aria-disabled\":\n        isDaySelectable && !isDaySelectable(date) ? \"true\" : undefined,\n    },\n  };\n}\n"],"names":[],"mappings":"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"}