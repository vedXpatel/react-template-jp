import { jsxs, jsx } from 'react/jsx-runtime';
import { forwardRef, Children, useEffect, createElement } from 'react';
import { makePrefixer, useIcon, useId, GridLayout, Button, RadioButtonGroup, RadioButton } from '@salt-ds/core';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { DeckLayout } from '../deck-layout/DeckLayout.js';
import { useSlideSelection } from '../utils/useSlideSelection.js';
import css_248z from './Carousel.css.js';

const withBaseName = makePrefixer("saltCarousel");
const Carousel = forwardRef(
  function Carousel2({
    initialIndex,
    animation = "slide",
    carouselDescription,
    children,
    className,
    compact,
    id: idProp,
    ...rest
  }, ref) {
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-carousel",
      css: css_248z,
      window: targetWindow
    });
    const { NextIcon, PreviousIcon } = useIcon();
    const id = useId(idProp);
    const slidesCount = Children.count(children);
    const [_, selectedSlide, handleSlideSelection] = useSlideSelection(initialIndex);
    const moveSlide = (direction) => {
      const moveLeft = selectedSlide === 0 ? slidesCount - 1 : selectedSlide - 1;
      const moveRight = selectedSlide === slidesCount - 1 ? 0 : selectedSlide + 1;
      const newSelection = direction === "left" ? moveLeft : moveRight;
      const newTransition = direction === "left" ? "decrease" : "increase";
      handleSlideSelection(newSelection, newTransition);
    };
    const handleRadioChange = ({
      target: { value }
    }) => {
      handleSlideSelection(Number(value));
    };
    useEffect(() => {
      if (process.env.NODE_ENV !== "production") {
        if (slidesCount < 1) {
          console.warn(
            "Carousel component requires more than one children to render. At least two elements should be provided."
          );
        }
      }
    }, [slidesCount]);
    return /* @__PURE__ */ jsxs(GridLayout, {
      "aria-label": carouselDescription,
      "aria-roledescription": "carousel",
      id,
      role: "region",
      ref,
      gap: 0,
      columns: 3,
      className: clsx(
        withBaseName(),
        compact && withBaseName("compact"),
        className
      ),
      ...rest,
      children: [
        /* @__PURE__ */ jsx(Button, {
          variant: "secondary",
          className: withBaseName("prev-button"),
          onClick: () => moveSlide("left"),
          children: /* @__PURE__ */ jsx(PreviousIcon, {
            size: 2
          })
        }),
        /* @__PURE__ */ jsx(DeckLayout, {
          activeIndex: selectedSlide,
          animation,
          className: withBaseName("slider"),
          children
        }),
        /* @__PURE__ */ jsx(Button, {
          variant: "secondary",
          className: withBaseName("next-button"),
          onClick: () => moveSlide("right"),
          children: /* @__PURE__ */ jsx(NextIcon, {
            size: 2
          })
        }),
        /* @__PURE__ */ jsx("div", {
          className: withBaseName("dots"),
          children: /* @__PURE__ */ jsx(RadioButtonGroup, {
            "aria-label": "Carousel buttons",
            onChange: handleRadioChange,
            value: `${selectedSlide}`,
            direction: "horizontal",
            children: Array.from({ length: slidesCount }, (_2, index) => ({
              value: `${index}`
            })).map((radio) => /* @__PURE__ */ createElement(RadioButton, {
              ...radio,
              key: radio.value
            }))
          })
        })
      ]
    });
  }
);

export { Carousel };
//# sourceMappingURL=Carousel.js.map
